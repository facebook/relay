==================================== INPUT ====================================
//- UserTypeResolvers.js
/**
 * @RelayResolver User
 */
// Impl omitted for test

type FlowVersionOfStatusEnum = "AMDIN" | "USER";

/**
 * @RelayResolver User.status: Status
 */
export function status(user: User): FlowVersionOfStatusEnum {
  return "ADMIN";
}

//- SomeComponent.js
graphql`fragment SomeComponentFragment on User {
  status
}`

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "enumModuleSuffix": ".LOL_WHAT",
  "featureFlags": {
    "enable_resolver_normalization_ast": true
  }
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql
enum Status {
  ADMIN
  USER
}
==================================== OUTPUT ===================================
//- __generated__/SomeComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<b800d4461e6cc7083332e61bd4bbf503>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { User____relay_model_instance$data } from "User____relay_model_instance.graphql";
export type Status = "ADMIN" | "USER";
import type { FragmentType } from "relay-runtime";
import {status as userStatusResolverType} from "UserTypeResolvers";
// Type assertion validating that `userStatusResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userStatusResolverType: (
  __relay_model_instance: User____relay_model_instance$data['__relay_model_instance'],
) => Status | null);
declare export opaque type SomeComponentFragment$fragmentType: FragmentType;
export type SomeComponentFragment$data = {|
  +status: ?Status,
  +$fragmentType: SomeComponentFragment$fragmentType,
|};
export type SomeComponentFragment$key = {
  +$data?: SomeComponentFragment$data,
  +$fragmentSpreads: SomeComponentFragment$fragmentType,
  ...
};
*/

import {status as userStatusResolver} from 'UserTypeResolvers';
import User____relay_model_instance_graphql from 'User____relay_model_instance.graphql';
import {resolverDataInjector} from 'relay-runtime/experimental';

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "SomeComponentFragment",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "User____relay_model_instance"
      },
      "kind": "RelayResolver",
      "name": "status",
      "resolverModule": resolverDataInjector(User____relay_model_instance_graphql, userStatusResolver, '__relay_model_instance', true),
      "path": "status"
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "6bb04088a9e45bd235fc92a69a2f3ef5";

export default ((node/*: any*/)/*: Fragment<
  SomeComponentFragment$fragmentType,
  SomeComponentFragment$data,
>*/);

//- __generated__/User____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<ac7d955e40828114b6ec54ff21ee84d3>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { User__id$data } from "User__id.graphql";
import type { FragmentType } from "relay-runtime";
import {User as userRelayModelInstanceResolverType} from "UserTypeResolvers";
// Type assertion validating that `userRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userRelayModelInstanceResolverType: (
  id: User__id$data['id'],
) => mixed);
declare export opaque type User____relay_model_instance$fragmentType: FragmentType;
export type User____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof userRelayModelInstanceResolverType>>,
  +$fragmentType: User____relay_model_instance$fragmentType,
|};
export type User____relay_model_instance$key = {
  +$data?: User____relay_model_instance$data,
  +$fragmentSpreads: User____relay_model_instance$fragmentType,
  ...
};
*/

import {User as userRelayModelInstanceResolver} from 'UserTypeResolvers';
import User__id_graphql from 'User__id.graphql';
import {resolverDataInjector} from 'relay-runtime/experimental';

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "User__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": resolverDataInjector(User__id_graphql, userRelayModelInstanceResolver, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "User",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  User____relay_model_instance$fragmentType,
  User____relay_model_instance$data,
>*/);

//- __generated__/User__id.graphql.js
/**
 * <auto-generated> SignedSource<<56388778b313654f6700e4bfa73599a2>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type User__id$fragmentType: FragmentType;
export type User__id$data = {|
  +id: string,
  +$fragmentType: User__id$fragmentType,
|};
export type User__id$key = {
  +$data?: User__id$data,
  +$fragmentSpreads: User__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  User__id$fragmentType,
  User__id$data,
>*/);
