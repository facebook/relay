"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55640],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>d,mdx:()=>y,useMDXComponents:()=>p,withMDXComponents:()=>s});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){return function(n){var t=p(n.components);return r.createElement(e,o({},n,{components:t}))}},p=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),s=p(t),d=a,f=s["".concat(i,".").concat(d)]||s[d]||u[d]||o;return t?r.createElement(f,l(l({ref:n},m),{},{components:t})):r.createElement(f,l({ref:n},m))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},19084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=["components"],l={id:"relay-environment",title:"Relay Environment",slug:"/api-reference/relay-runtime/relay-environment",description:"Setting up a Relay Environment"},c=void 0,m={unversionedId:"api-reference/relay-runtime/relay-environment",id:"version-v20.1.0/api-reference/relay-runtime/relay-environment",title:"Relay Environment",description:"Setting up a Relay Environment",source:"@site/versioned_docs/version-v20.1.0/api-reference/relay-runtime/relay-environment.md",sourceDirName:"api-reference/relay-runtime",slug:"/api-reference/relay-runtime/relay-environment",permalink:"/docs/api-reference/relay-runtime/relay-environment",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.1.0/api-reference/relay-runtime/relay-environment.md",tags:[],version:"v20.1.0",frontMatter:{id:"relay-environment",title:"Relay Environment",slug:"/api-reference/relay-runtime/relay-environment",description:"Setting up a Relay Environment"},sidebar:"docs",previous:{title:"EntryPointContainer",permalink:"/docs/api-reference/entrypoint-container/"},next:{title:"fetchQuery",permalink:"/docs/api-reference/fetch-query/"}},s={},p=[{value:"Creating an Environment",id:"creating-an-environment",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2}],d={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.mdx)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"The core of Relay's runtime is the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Environment"),". The environment knows how to make requests to your GraphQL server and contains the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Store"),", Relay's normalized data cache. Generally your application will construct a single environment which is configured to fetch data from your server, and then expose that environment to all of your components via ",(0,o.mdx)("inlineCode",{parentName:"p"},"RelayEnvironmentProvider"),"."),(0,o.mdx)("h2",{id:"creating-an-environment"},"Creating an Environment"),(0,o.mdx)("p",null,"To create your environment you must provide two key pieces, a ",(0,o.mdx)("a",{parentName:"p",href:"/docs/guides/network-layer/"},(0,o.mdx)("inlineCode",{parentName:"a"},"Network"))," and a ",(0,o.mdx)("a",{parentName:"p",href:"/docs/api-reference/store/"},(0,o.mdx)("inlineCode",{parentName:"a"},"Store")),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Network")," is responsible for making requests to your GraphQL server. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"Store")," holds the normalized data cache."),(0,o.mdx)("p",null,"A minimal implementation of an environment might look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts",metastring:'title="RelayEnvironment.js"',title:'"RelayEnvironment.js"'},'import { Environment, Store, RecordSource, Network, FetchFunction } from "relay-runtime";\n\nconst HTTP_ENDPOINT = "https://graphql.org/graphql/";\n\nconst fetchGraphQL: FetchFunction = async (request, variables) => {\n  const resp = await fetch(HTTP_ENDPOINT, {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({ query: request.text, variables }),\n  });\n  if (!resp.ok) {\n    throw new Error("Response failed.");\n  }\n  return await resp.json();\n};\n\nexport const environment = new Environment({\n  store: new Store(new RecordSource({})),\n  network: Network.create(fetchGraphQL),\n});\n')),(0,o.mdx)("h2",{id:"advanced-configuration"},"Advanced Configuration"),(0,o.mdx)("p",null,"The Relay environment accepts a number of additional configuration options when it is created. These options are all optional, but can be used to customize the behavior of the environment."),(0,o.mdx)("p",null,"Notable options include:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"log")," - A function that will be called with telemetry events. See the types for ",(0,o.mdx)("a",{parentName:"li",href:"https://github.com/facebook/relay/blob/0414c9ad0744483e349e07defcb6d70a52cf8b3c/packages/relay-runtime/store/RelayStoreTypes.js#L799"},(0,o.mdx)("inlineCode",{parentName:"a"},"LogEvent"))," for a full list of events and their fields."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/docs/guided-tour/reusing-cached-data/filling-in-missing-data/"},(0,o.mdx)("inlineCode",{parentName:"a"},"missingFieldHandlers"))," - A list of handlers that will be called when a field is missing from the store. This can be used to enable fulfilling queries to fields like ",(0,o.mdx)("inlineCode",{parentName:"li"},"Query.node")," from cache."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"getDataID")," - A function that will be called to generate a unique ID for a given object. This can be used to customize the way that Relay generates IDs for objects if your server does not implement the ",(0,o.mdx)("a",{parentName:"li",href:"https://graphql.org/learn/global-object-identification/"},"Global Object Identification spec"),"."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"/docs/api-reference/field-logger/"},(0,o.mdx)("inlineCode",{parentName:"a"},"relayFieldLogger"))," - A function that will be called when Relay encounters a field-level error.")),(0,o.mdx)("p",null,"For a full list of options, inspect the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/relay-runtime/lib/store/RelayModernEnvironment.d.ts#L26-L43"},"provided TypeScript types"),"."))}u.isMDXComponent=!0}}]);