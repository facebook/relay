==================================== INPUT ====================================
//- PersonComponent.js
graphql`query PersonComponentQuery {
  some_resolver_field {
    __typename
  }
}`

//- Resolvers.js
/**
 * @RelayResolver Query.some_resolver_field: SomeType
 */

//- relay.config.json
{
  "language": "typescript",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ]
}

//- schema.graphql
type Query {
  some_field: Boolean
}

//- schema-extensions/extension.graphql
type SomeType {
  name: String
}
==================================== OUTPUT ===================================
//- __generated__/PersonComponentQuery.graphql.ts
/**
 * <auto-generated> SignedSource<<c2ce77688f8027efb49b544ed5894da6>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { ConcreteRequest } from 'relay-runtime';
import { some_resolver_field as querySomeResolverFieldResolverType } from "../Resolvers.js";
// Type assertion validating that `querySomeResolverFieldResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(querySomeResolverFieldResolverType satisfies () => Query__some_resolver_field$normalization | null | undefined);
export type PersonComponentQuery$variables = Record<PropertyKey, never>;
export type PersonComponentQuery$data = {
  readonly some_resolver_field: {
    readonly __typename: "SomeType";
  } | null | undefined;
};
export type PersonComponentQuery = {
  response: PersonComponentQuery$data;
  variables: PersonComponentQuery$variables;
};

import {some_resolver_field as querySomeResolverFieldResolver} from '../Resolvers';
import Query__some_resolver_field$normalization_graphql from './Query__some_resolver_field$normalization.graphql';

const node: ConcreteRequest = (function(){
var v0 = {
  "alias": null,
  "args": null,
  "concreteType": "SomeType",
  "kind": "LinkedField",
  "name": "some_resolver_field",
  "plural": false,
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "__typename",
      "storageKey": null
    }
  ],
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": {
      "hasClientEdges": true
    },
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "concreteType": "SomeType",
        "modelResolvers": null,
        "backingField": {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "some_resolver_field",
          "resolverModule": querySomeResolverFieldResolver,
          "path": "some_resolver_field",
          "normalizationInfo": {
            "kind": "OutputType",
            "concreteType": "SomeType",
            "plural": false,
            "normalizationNode": Query__some_resolver_field$normalization_graphql
          }
        },
        "linkedField": (v0/*: any*/)
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "backingField": {
          "name": "some_resolver_field",
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "storageKey": null,
          "isOutputType": true
        },
        "linkedField": (v0/*: any*/)
      }
    ]
  },
  "params": {
    "cacheID": "0deed3d106ca29ad927a703c08de07e0",
    "id": null,
    "metadata": {},
    "name": "PersonComponentQuery",
    "operationKind": "query",
    "text": null
  }
};
})();

(node as any).hash = "cce2ca0ff6c56b73797dc10f7ebb20d7";

export default node;

//- __generated__/Query__some_resolver_field$normalization.graphql.ts
/**
 * <auto-generated> SignedSource<<139f6c628244cd9ea4ea6edbaae1ec6d>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { NormalizationSplitOperation } from 'relay-runtime';

export type Query__some_resolver_field$normalization = {
  readonly name: string | null | undefined;
};


const node: NormalizationSplitOperation = {
  "kind": "SplitOperation",
  "metadata": {},
  "name": "Query__some_resolver_field$normalization",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "name",
          "storageKey": null
        }
      ]
    }
  ]
};

export default node;
