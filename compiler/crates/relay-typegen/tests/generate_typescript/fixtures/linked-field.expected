==================================== INPUT ====================================
fragment LinkedField on User {
  profilePicture {
    uri
    width
    height
  }
  hometown {
    # object
    id
    profilePicture {
      uri
    }
  }
  actor {
    # interface
    id
  }
}

query UnionTypeTest {
  neverNode {
    __typename
    ... on FakeNode {
      id
    }
  }
}
==================================== OUTPUT ===================================
export type UnionTypeTestVariables = {};
export type UnionTypeTestResponse = {
  readonly neverNode?: {
    readonly __typename: "FakeNode",
    readonly id: string,
  } | {
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    readonly __typename: "%other"
  }
};
export type UnionTypeTest = {
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
};
-------------------------------------------------------------------------------
import { FragmentReference } from "relay-runtime";
export type LinkedField$ref = FragmentReference & { _: "LinkedField$ref" };
export type LinkedField$fragmentType = LinkedField$ref & { _: "LinkedField$fragmentType" };
export type LinkedField = {
  readonly profilePicture?: {
    readonly uri?: string,
    readonly width?: number,
    readonly height?: number,
  },
  readonly hometown?: {
    readonly id: string,
    readonly profilePicture?: {
      readonly uri?: string
    },
  },
  readonly actor?: {
    readonly id: string
  },
  readonly $refType: LinkedField$ref,
};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  readonly $data?: LinkedField$data,
  readonly $fragmentRefs: LinkedField$ref,
};
