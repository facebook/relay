"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53300],{3905:(e,n,r)=>{r.r(n),r.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>u});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},i.apply(this,arguments)}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=t.createContext({}),u=function(e){return function(n){var r=m(n.components);return t.createElement(e,i({},n,{components:r}))}},m=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=m(e.components);return t.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=m(r),c=a,f=u["".concat(o,".").concat(c)]||u[c]||p[c]||i;return r?t.createElement(f,s(s({ref:n},d),{},{components:r})):t.createElement(f,s({ref:n},d))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},81484:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var t=r(83117),a=r(80102),i=(r(67294),r(3905)),o=["components"],s={id:"runtime-functions",title:"Runtime Functions",slug:"/api-reference/relay-resolvers/runtime-functions/",description:"Runtime functions associated with Relay Resolvers"},l=void 0,d={unversionedId:"api-reference/relay-resolvers/runtime-functions",id:"version-v20.0.0/api-reference/relay-resolvers/runtime-functions",title:"Runtime Functions",description:"Runtime functions associated with Relay Resolvers",source:"@site/versioned_docs/version-v20.0.0/api-reference/relay-resolvers/runtime-functions.md",sourceDirName:"api-reference/relay-resolvers",slug:"/api-reference/relay-resolvers/runtime-functions/",permalink:"/docs/v20.0.0/api-reference/relay-resolvers/runtime-functions/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/api-reference/relay-resolvers/runtime-functions.md",tags:[],version:"v20.0.0",frontMatter:{id:"runtime-functions",title:"Runtime Functions",slug:"/api-reference/relay-resolvers/runtime-functions/",description:"Runtime functions associated with Relay Resolvers"},sidebar:"docs",previous:{title:"Docblock Format",permalink:"/docs/v20.0.0/api-reference/relay-resolvers/docblock-format/"},next:{title:"GraphQL Directives",permalink:"/docs/v20.0.0/api-reference/graphql-and-directives/"}},u={},m=[{value:"RelayModernStore",id:"relaymodernstore",level:2},{value:"<code>readFragment()</code>",id:"readfragment",level:2},{value:"<code>suspenseSentinel()</code>",id:"suspensesentinel",level:2},{value:"<code>useClientQuery()</code>",id:"useclientquery",level:2}],c={toc:m};function p(e){var n=e.components,r=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"This page documents the runtime functions associated with Relay Resolvers. For an overview of Relay Resolvers and how to think about them, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v20.0.0/guides/relay-resolvers/introduction"},"Relay Resolvers")," guide."),(0,i.mdx)("h2",{id:"relaymodernstore"},"RelayModernStore"),(0,i.mdx)("p",null,"RelayModernStore exposes ",(0,i.mdx)("inlineCode",{parentName:"p"},"batchLiveStateUpdates()"),". See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v20.0.0/guides/relay-resolvers/live-fields/#batching"},"Live Fields")," for more details of how to use this method."),(0,i.mdx)("h2",{id:"readfragment"},(0,i.mdx)("inlineCode",{parentName:"h2"},"readFragment()")),(0,i.mdx)("p",null,"Derived resolver fields model data that is derived from other data in the graph. To read the data that a derived field depends on, they must use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"readFragment()")," function which is exported from ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay-runtime"),". This function accepts a GraphQL fragment and a fragment key, and returns the data for the fragment."),(0,i.mdx)("admonition",{type:"warning"},(0,i.mdx)("p",{parentName:"admonition"},(0,i.mdx)("inlineCode",{parentName:"p"},"readFragment()")," may only be used in Relay Resolvers. It will throw an error if used in any other context.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},'import {readFragment} from "relay-runtime";\n\n/**\n * @RelayResolver User.fullName: String\n * @rootFragment UserFullNameFragment\n */\nexport function fullName(key: UserFullNameFragment$key): string {\n  const user = readFragment(graphql`\n    fragment UserFullNameFragment on User {\n      firstName\n      lastName\n    }\n  `, key);\n  return `${user.firstName} ${user.lastName}`;\n}\n')),(0,i.mdx)("p",null,"Note that Relay will ensure your field resolver is recomputed any time data in that fragment changes."),(0,i.mdx)("p",null,"See the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v20.0.0/guides/relay-resolvers/derived-fields/"},"Derived Fields")," guide for more information."),(0,i.mdx)("h2",{id:"suspensesentinel"},(0,i.mdx)("inlineCode",{parentName:"h2"},"suspenseSentinel()")),(0,i.mdx)("p",null,"Live resolvers model client state that can change over time. If at some point during that field's lifecycle, the data being read is in a pending state, for example if the data is being fetched from an API, the resolver may return the ",(0,i.mdx)("inlineCode",{parentName:"p"},"suspenseSentinel()")," to indicate that the data is not yet available."),(0,i.mdx)("p",null,"Relay expects that when the data is available, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LiveStateValue")," will notify Relay by calling the subscribe callback."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {suspenseSentinel} from 'relay-runtime';\n\n/**\n * @RelayResolver Query.myIp: String\n * @live\n */\nexport function myIp(): LiveState<string> {\n  return {\n    read: () => {\n      const state = store.getState();\n      const ipLoadObject = state.ip;\n      if (ipLoadObject.status === \"LOADING\") {\n        return suspenseSentinel();\n      }\n      return state.ip;\n    },\n    subscribe: (callback) => {\n      return store.subscribe(callback);\n    },\n  };\n}\n")),(0,i.mdx)("p",null,"See the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v20.0.0/guides/relay-resolvers/live-fields/"},"Live Fields")," guide for more information."),(0,i.mdx)("h2",{id:"useclientquery"},(0,i.mdx)("inlineCode",{parentName:"h2"},"useClientQuery()")),(0,i.mdx)("p",null,"If a query contains only client fields, it may not currently be used with hooks like ",(0,i.mdx)("inlineCode",{parentName:"p"},"usePreloadedQuery")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"useLazyLoadQuery")," since both of those hooks assume they will need to issue a network request. If you attempt to use these APIs in Flow you will get a type error."),(0,i.mdx)("p",null,"Instead, for client-only queries, you can use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"useClientQuery")," hook:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {useClientQuery} from 'react-relay';\n\nexport function MyComponent() {\n  const data = useClientQuery(graphql`\n    query MyQuery {\n      myIp\n    }\n  `);\n  return <div>{data.myIp}</div>;\n}\n")))}p.isMDXComponent=!0}}]);