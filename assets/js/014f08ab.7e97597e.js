"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[58789],{3905:(e,r,n)=>{n.r(r),n.d(r,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>v,useMDXComponents:()=>u,withMDXComponents:()=>d});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(){return l=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},l.apply(this,arguments)}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),d=function(e){return function(r){var n=u(r.components);return t.createElement(e,l({},r,{components:n}))}},u=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=u(e.components);return t.createElement(c.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},y=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,y=d["".concat(a,".").concat(p)]||d[p]||m[p]||l;return n?t.createElement(y,i(i({ref:r},c),{},{components:n})):t.createElement(y,i({ref:r},c))}));function v(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=y;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<l;c++)a[c]=n[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},51320:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>c,default:()=>v,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var t,o=n(83117),l=n(80102),a=(n(67294),n(3905)),i=["components"],s={id:"enabling",title:"Enabling Relay Resolvers",slug:"/guides/relay-resolvers/enabling-resolvers",description:"Enabling experimental Relay Resolvers"},c=void 0,d={unversionedId:"guides/relay-resolvers/enabling",id:"version-v20.0.0/guides/relay-resolvers/enabling",title:"Enabling Relay Resolvers",description:"Enabling experimental Relay Resolvers",source:"@site/versioned_docs/version-v20.0.0/guides/relay-resolvers/enabling.md",sourceDirName:"guides/relay-resolvers",slug:"/guides/relay-resolvers/enabling-resolvers",permalink:"/docs/guides/relay-resolvers/enabling-resolvers",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/guides/relay-resolvers/enabling.md",tags:[],version:"v20.0.0",frontMatter:{id:"enabling",title:"Enabling Relay Resolvers",slug:"/guides/relay-resolvers/enabling-resolvers",description:"Enabling experimental Relay Resolvers"},sidebar:"docs",previous:{title:"Introduction to Relay Resolvers",permalink:"/docs/guides/relay-resolvers/introduction"},next:{title:"Defining Types",permalink:"/docs/guides/relay-resolvers/defining-types/"}},u={},p=[{value:"Runtime",id:"runtime",level:2},{value:"Enable new Flow based RelayResolver syntax",id:"enable-new-flow-based-relayresolver-syntax",level:2}],m=(t="FbInternalOnly",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",e)}),y={toc:p};function v(e){var r=e.components,n=(0,l.Z)(e,i);return(0,a.mdx)("wrapper",(0,o.Z)({},y,n,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"runtime"},"Runtime"),(0,a.mdx)("p",null,"When using Relay Resolvers, we recommend configuring a ",(0,a.mdx)("inlineCode",{parentName:"p"},"fieldLogger")," in your Relay Enviornment in order to track errors which have been thrown within Relay resolver functions."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-ts"},'import { Environment, RecordSource, RelayFeatureFlags } from "relay-runtime";\nimport RelayModernStore from "relay-runtime/lib/store/RelayModernStore";\n\n// It is recommended to log errors thrown by Resolvers\nfunction fieldLogger(event) {\n  if(event.kind === "relay_resolver.error") {\n    // Log this somewhere!\n    console.warn(`Resolver error encountered in ${event.owner}.${event.fieldPath}`)\n    console.warn(event.error)\n  }\n}\n\nconst environment = new Environment({\n  network: Network.create(/* your fetch function here */),\n  store: new RelayModernStore(new RecordSource()),\n  relayFieldLogger: fieldLogger\n});\n\n// ... create your Relay context with your environment\n')),(0,a.mdx)(m,{mdxType:"FbInternalOnly"},(0,a.mdx)("h2",{id:"enable-new-flow-based-relayresolver-syntax"},"Enable new Flow based RelayResolver syntax"),(0,a.mdx)("p",null,"To opt-in the new syntax in a file, add ",(0,a.mdx)("inlineCode",{parentName:"p"},"//relay:enable-new-relay-resolver")," to the file"),(0,a.mdx)("p",null,"To convert files to the new syntax, run codemode: ",(0,a.mdx)("inlineCode",{parentName:"p"},"flow-runner codemod relay/migrateResolver <path>"),". The codemod doesn't support all cases, so you might need to modify some files manually after it runs.")))}v.isMDXComponent=!0}}]);