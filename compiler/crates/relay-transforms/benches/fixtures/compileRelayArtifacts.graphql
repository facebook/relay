query UnusedFragmentArgdefUnchecked__QueryWithUnusedFragmentArgumentDefinition(
  $id: ID!
) {
  node(id: $id) {
    ...UnusedFragmentArgdefUnchecked__Profile
  }
}

fragment UnusedFragmentArgdefUnchecked__Profile on User {
  id
  name
  ...UnusedFragmentArgdefUnchecked__ProfilePhotoWrapper
}

fragment UnusedFragmentArgdefUnchecked__ProfilePhotoWrapper on User
  @argumentDefinitions(size: {type: "Int"}) {
  __typename
  ...UnusedFragmentArgdefUnchecked__ProfilePhoto
}

fragment UnusedFragmentArgdefUnchecked__ProfilePhoto on User {
  profilePicture(size: [100]) {
    uri
  }
}

query ComplexArgumentsInList__CheckinSearchQuery(
  $queryText: String!
  $searchInputText: String
  $searchInput: CheckinSearchInput
  $searchInputLast: CheckinSearchInput!
) {
  checkinSearchQuery(
    query: {
      query: $queryText
      inputs: [{query: $searchInputText}, $searchInput, null, $searchInputLast]
    }
  ) {
    query
  }
}

query LinkedHandleField__LinkedHandleField($id: ID!) {
  node(id: $id) {
    ... on User {
      friends(first: 10) @__clientField(handle: "clientFriends") {
        count
      }
    }
  }
}

fragment UnmaskedFragmentSpreadsDupArguments__UserUtil_user on User
  @argumentDefinitions(
    localIsRelative: {type: "Boolean", defaultValue: false}
  ) {
  profilePicture(size: $PictureSize) {
    width
    height
  }
  ...UnmaskedFragmentSpreadsDupArguments__UserUtil2_user @relay(mask: false)
  url(relative: $globalIsRelative)
  anotherUrl: url(relative: $localIsRelative)
}

fragment UnmaskedFragmentSpreadsDupArguments__UserUtil2_user on User {
  url(relative: $globalIsRelative)
}

query InlineDataFragment__Test {
  ...InlineDataFragment__ParentFragment
}

fragment InlineDataFragment__ParentFragment on Query {
  me {
    ...InlineDataFragment__Profile
    profilePicture(size: 100) {
      uri
      height
    }
  }
  username(name: "test") {
    ...InlineDataFragment__Profile
  }
}

fragment InlineDataFragment__Profile on User @inline {
  profilePicture(size: 100) {
    uri
    width
  }
}

query QueryWithRawResponseTypeDirective__ViewerQuery @raw_response_type {
  viewer {
    actor {
      id
    }
  }
}

query FalsePositiveCircularFragmentReferenceRegression__TestQuery {
  viewer {
    ...FalsePositiveCircularFragmentReferenceRegression__MyViewer
    ...FalsePositiveCircularFragmentReferenceRegression__MyOtherViewer
    actor {
      name
    }
  }
}

fragment FalsePositiveCircularFragmentReferenceRegression__MyViewer on Viewer {
  ...FalsePositiveCircularFragmentReferenceRegression__MyNestedViewer
}

fragment FalsePositiveCircularFragmentReferenceRegression__MyOtherViewer on Viewer {
  ...FalsePositiveCircularFragmentReferenceRegression__MyNestedViewer
}

fragment FalsePositiveCircularFragmentReferenceRegression__MyNestedViewer on Viewer
  @argumentDefinitions(includeEmail: {type: "Boolean!", defaultValue: false}) {
  primaryEmail @include(if: $includeEmail)
}

query ModuleOverlapAcrossDocuments__FooNameRendererQuery($id: ID!) {
  node(id: $id) {
    ...ModuleOverlapAcrossDocuments__FooNameRendererFragment
  }
}

fragment ModuleOverlapAcrossDocuments__FooNameRendererFragment on User {
  id
  nameRenderer {
    ...ModuleOverlapAcrossDocuments__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
    ...ModuleOverlapAcrossDocuments__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
  }
}

query ModuleOverlapAcrossDocuments__BarNameRendererQuery($id: ID!) {
  node(id: $id) {
    ...ModuleOverlapAcrossDocuments__BarNameRendererFragment
  }
}

fragment ModuleOverlapAcrossDocuments__BarNameRendererFragment on User {
  nameRenderer {
    ...ModuleOverlapAcrossDocuments__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment ModuleOverlapAcrossDocuments__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment ModuleOverlapAcrossDocuments__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query QueryWithMatchDirectiveWithExtraArgument__NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...QueryWithMatchDirectiveWithExtraArgument__NameRendererFragment
  }
}

fragment QueryWithMatchDirectiveWithExtraArgument__NameRendererFragment on User {
  id
  nameRendererForContext(context: HEADER) @match {
    ...QueryWithMatchDirectiveWithExtraArgument__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...QueryWithMatchDirectiveWithExtraArgument__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithMatchDirectiveWithExtraArgument__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment QueryWithMatchDirectiveWithExtraArgument__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query FragmentWithDeferOnAbstractType__QueryWithFragmentWithDefer {
  node(id: "my-id") {
    ...FragmentWithDeferOnAbstractType__NodeFragment @defer(label: "node")
  }
}

fragment FragmentWithDeferOnAbstractType__NodeFragment on Node {
  id
  ... on User {
    name
  }
  ... on Page {
    websites
  }
}

fragment MatchOnChildOfPlural__ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer @match {
      ...MatchOnChildOfPlural__PlainUserNameRenderer_name
        @module(name: "PlainUserNameRenderer.react")
      ...MatchOnChildOfPlural__MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment MatchOnChildOfPlural__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MatchOnChildOfPlural__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query QueryWithFragmentVariables__TestQuery(
  $id: ID!
  $cond: Boolean!
  $pictureSize: [Int] = [128]
) {
  node(id: $id) {
    id
    ...QueryWithFragmentVariables__Profile
    ...QueryWithFragmentVariables__ProfileFriends @include(if: $cond)
  }
}

fragment QueryWithFragmentVariables__ProfileFriends on User {
  friends(first: 10) {
    edges {
      node {
        ...QueryWithFragmentVariables__Profile
      }
    }
  }
}

fragment QueryWithFragmentVariables__Profile on User
  @argumentDefinitions(pictureSize: {type: "[Int]"}) {
  profilePicture(size: $pictureSize) {
    uri
  }
}

query Connection__NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
              friends(first: 10) @connection(key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

query QueryWithModuleDirective__NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...QueryWithModuleDirective__NameRendererFragment
  }
}

fragment QueryWithModuleDirective__NameRendererFragment on User {
  id
  nameRenderer {
    ...QueryWithModuleDirective__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithModuleDirective__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query UnmaskedFragmentSpreadsGlobalArguments__TestQuery(
  $ProfilePicture_SIZE: [Int]
  $isRelative: Boolean
) {
  me {
    ...UnmaskedFragmentSpreadsGlobalArguments__UserProfile_user
  }
}

fragment UnmaskedFragmentSpreadsGlobalArguments__UserProfile_user on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    width
    height
  }
  ...UnmaskedFragmentSpreadsGlobalArguments__UserUtil_user @relay(mask: false)
}

fragment UnmaskedFragmentSpreadsGlobalArguments__UserUtil_user on User {
  url(relative: $isRelative)
}

query QueryWithMatchDirective__NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...QueryWithMatchDirective__NameRendererFragment
  }
}

fragment QueryWithMatchDirective__NameRendererFragment on User {
  id
  nameRenderer @match {
    ...QueryWithMatchDirective__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...QueryWithMatchDirective__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithMatchDirective__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment QueryWithMatchDirective__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

fragment InlineDataFragmentGlobalVars__ParentFragment on Query {
  me {
    ...InlineDataFragmentGlobalVars__Profile
  }
}

fragment InlineDataFragmentGlobalVars__Profile on User @inline {
  profilePicture(size: $pictureSize) {
    uri
  }
}

fragment RefetchableFragmentWithConnectionWithStream__PaginationFragment on Node
  @argumentDefinitions(
    count: {type: "Int", defaultValue: 10}
    cursor: {type: "ID"}
  )
  @refetchable(queryName: "RefetchableFragmentQuery") {
  id
  ... on User {
    name
    friends(after: $cursor, first: $count)
      @stream_connection(key: "PaginationFragment_friends", initial_count: 1) {
      edges {
        node {
          id
        }
      }
    }
  }
}

query Unions__UnionQuery {
  maybeNode {
    ... on NonNode {
      name
    }
    ... on Story {
      id
      body {
        text
      }
    }
  }
}

query DeferMultipleFragmentsSameParent__QueryWithMultipeDeferredFragmentsOnSameParent(
  $id: ID!
) {
  feedback: node(id: $id) {
    id
    ...DeferMultipleFragmentsSameParent__FeedbackComments_feedback @defer
    ...DeferMultipleFragmentsSameParent__FeedbackText_feedback @defer
  }
}

fragment DeferMultipleFragmentsSameParent__FeedbackComments_feedback on Feedback {
  comments(first: 10) {
    edges {
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment DeferMultipleFragmentsSameParent__FeedbackText_feedback on Feedback {
  body {
    text
  }
}

fragment RefetchableFragmentWithConnectionBidirectional__PaginationFragment on Node
  @argumentDefinitions(
    count: {type: "Int", defaultValue: 10}
    cursor: {type: "ID"}
  )
  @refetchable(queryName: "RefetchableFragmentQuery") {
  id
  ... on User {
    name
    friends(
      after: $cursor
      first: $count
      before: $beforeCursor
      last: $lastCount
    ) @connection(key: "PaginationFragment_friends") {
      edges {
        node {
          id
        }
      }
    }
  }
}

query ScalarHandleField__ScalarHandleField($id: ID!) {
  node(id: $id) {
    ... on User {
      name @__clientField(handle: "clientName")
    }
  }
}

query ViewerQuery__ViewerQuery {
  viewer {
    actor {
      id
    }
  }
}

query KitchenSink__NodeQuery($id: ID!, $cond: Boolean!, $PictureSize: [Int]!) {
  node(id: $id) {
    id
    ... on User @include(if: $cond) {
      name
    }
    ...KitchenSink__UserFragment @include(if: $cond)
  }
}

fragment KitchenSink__UserFragment on User
  @argumentDefinitions(
    after: {type: "ID"}
    cond: {type: "Boolean!", defaultValue: false}
    first: {type: "Int", defaultValue: 5}
    size: {type: "[Int]"}
  ) {
  id
  __typename
  friends(after: $after, first: $first) {
    count
  }
  name @include(if: $cond)
  thumbnail: profilePicture(size: 32) {
    height
    width
    src: uri
  }
  profilePicture(size: $size) {
    height
    width
    src: uri
  }
  scaled: profilePicture(size: $PictureSize) {
    uri
  }
}

query QueryWithMatchDirectiveNoInlineExperimental__NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...QueryWithMatchDirectiveNoInlineExperimental__NameRendererFragment
  }
}

fragment QueryWithMatchDirectiveNoInlineExperimental__NameRendererFragment on User {
  id
  nameRenderer @match {
    ...QueryWithMatchDirectiveNoInlineExperimental__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...QueryWithMatchDirectiveNoInlineExperimental__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithMatchDirectiveNoInlineExperimental__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment QueryWithMatchDirectiveNoInlineExperimental__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

fragment FragmentOnViewer__RefetchableFragment on Viewer
  @refetchable(queryName: "RefetchableFragmentQuery") {
  actor {
    id
    name
    ...FragmentOnViewer__ProfilePicture
  }
}

fragment FragmentOnViewer__ProfilePicture on User {
  profilePicture(size: $size) {
    uri
  }
}

fragment PluralFragment__PluralFragment on User @relay(plural: true) {
  name
}

fragment RefetchableConnection__RefetchableConnection_feedback on Feedback
  @refetchable(queryName: "RefetchableConnectionQuery") {
  id
  comments(first: $count, after: $cursor)
    @connection(key: "RefetchableConnection_comments") {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}

query StableLiterals__StableLiteralsTest {
  me {
    storyCommentSearch(query: {text: "foo", limit: 2, offset: 10}) {
      id
    }
  }
}

query UnusedVariablesRemovedFromPrintNotCodegen__QueryWithUnusedVariables(
  $id: ID!
  $unusedFirst: Int
  $unusedAfter: ID
) {
  node(id: $id) {
    id
    ...UnusedVariablesRemovedFromPrintNotCodegen__ConnectionFragment
  }
}

fragment UnusedVariablesRemovedFromPrintNotCodegen__ConnectionFragment on User
  @argumentDefinitions(
    fetchConnection: {type: "Boolean", defaultValue: false}
  ) {
  ... @include(if: $fetchConnection) {
    friends(after: $unusedAfter, first: $unusedFirst) {
      edges {
        node {
          id
        }
      }
    }
  }
}

fragment RefetchableFragmentOnNodeWithMissingId__RefetchableFragment on Node
  @refetchable(queryName: "RefetchableFragmentQuery") {
  ... on User {
    name
    ...RefetchableFragmentOnNodeWithMissingId__ProfilePicture
  }
}

fragment RefetchableFragmentOnNodeWithMissingId__ProfilePicture on User {
  profilePicture(size: $size) {
    uri
  }
}

query RelayClientIdField__RelayClientIDFieldQuery($id: ID!) {
  __id
  me {
    __id
    __typename
    id
  }
  node(id: $id) {
    __id
    __typename
    id
    ... on Comment {
      commentBody(supported: ["PlainCommentBody"]) {
        __id
        __typename
        ... on PlainCommentBody {
          __id
          text {
            __id
            __typename
            text
          }
        }
      }
    }
  }
}

fragment RefetchableConnectionCustomHandler__RefetchableConnection_feedback on Feedback
  @refetchable(queryName: "RefetchableConnectionQuery") {
  id
  comments(first: $count, after: $cursor)
    @connection(key: "RefetchableConnection_comments", handler: "custom") {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}

fragment FragmentOnNodeInterface__RefetchableFragment on Node
  @refetchable(queryName: "RefetchableFragmentQuery") {
  id
  ... on User {
    name
    ...FragmentOnNodeInterface__ProfilePicture
  }
}

fragment FragmentOnNodeInterface__ProfilePicture on User {
  profilePicture(size: $size) {
    uri
  }
}

query UnmaskedFragmentSpreadsRecursive__TestQuery(
  $ProfilePicture_SIZE: [Int]
  $isRelative: Boolean
  $showFirstName: Boolean
) {
  me {
    ...UnmaskedFragmentSpreadsRecursive__UserProfile_user
  }
}

fragment UnmaskedFragmentSpreadsRecursive__UserProfile_user on User {
  firstName(if: $showFirstName)
  ...UnmaskedFragmentSpreadsRecursive__UserUtil_user @relay(mask: false)
}

fragment UnmaskedFragmentSpreadsRecursive__UserUtil_user on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    width
    height
  }
  ...UnmaskedFragmentSpreadsRecursive__UserUtil2_user @relay(mask: false)
}

fragment UnmaskedFragmentSpreadsRecursive__UserUtil2_user on User {
  url(relative: $isRelative)
}

fragment FragmentOnObjectImplementingNodeInterface__RefetchableFragment on User
  @refetchable(queryName: "RefetchableFragmentQuery") {
  id
  name
  ...FragmentOnObjectImplementingNodeInterface__ProfilePicture
}

fragment FragmentOnObjectImplementingNodeInterface__ProfilePicture on User {
  profilePicture(size: $size) {
    uri
  }
}

query FragmentWithDeferArgumentsWithoutLabel__QueryWithFragmentWithDefer {
  me {
    id
    ...FragmentWithDeferArgumentsWithoutLabel__UserFragment
  }
}

fragment FragmentWithDeferArgumentsWithoutLabel__UserFragment on User {
  id
  emailAddresses
  ...FragmentWithDeferArgumentsWithoutLabel__DeferredFragment @defer
  ...FragmentWithDeferArgumentsWithoutLabel__DeferredFragment @defer
}

fragment FragmentWithDeferArgumentsWithoutLabel__DeferredFragment on User
  @argumentDefinitions(scale: {type: "Float"}) {
  id
  name
  profile_picture(scale: $scale) {
    uri
  }
}

query ComplexArgumentsWithMutlipleVariables__TestQueryWithLiteral(
  $latArg: String
  $lonArg: String
) {
  route(
    waypoints: [
      {lat: $latArg, lon: $lonArg}
      {lat: null, lon: $latArg}
      {lat: $lonArg, lon: "1234"}
    ]
  ) {
    __typename
  }
}

query QueryWithMatchDirectiveWithTypename__NameRendererQuery($id: ID!) {
  node(id: $id) {
    ...QueryWithMatchDirectiveWithTypename__NameRendererFragment
  }
}

fragment QueryWithMatchDirectiveWithTypename__NameRendererFragment on User {
  id
  nameRenderer @match {
    __typename
    ...QueryWithMatchDirectiveWithTypename__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...QueryWithMatchDirectiveWithTypename__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithMatchDirectiveWithTypename__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment QueryWithMatchDirectiveWithTypename__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query FragmentWithDeferArguments__QueryWithFragmentWithDefer {
  me {
    id
    ...FragmentWithDeferArguments__UserFragment
  }
}

fragment FragmentWithDeferArguments__UserFragment on User {
  id
  emailAddresses
  ...FragmentWithDeferArguments__DeferredFragment
    @defer(label: "DeferredFragmentLabel")
}

fragment FragmentWithDeferArguments__DeferredFragment on User
  @argumentDefinitions(scale: {type: "Float"}) {
  id
  name
  profile_picture(scale: $scale) {
    uri
  }
}

fragment InlineDataFragmentLocalArgs__ParentFragment on Query {
  usingLiteralPassedValue: me {
    ...InlineDataFragmentLocalArgs__Profile
  }
  usingGlobalPassedValue: me {
    ...InlineDataFragmentLocalArgs__Profile
  }
  usingDefaultValue: me {
    ...InlineDataFragmentLocalArgs__Profile
  }
}

fragment InlineDataFragmentLocalArgs__Profile on User
  @argumentDefinitions(sizeArg: {type: "[Int]", defaultValue: [50]})
  @inline {
  profilePicture(size: $sizeArg) {
    uri
  }
}

query MatchFieldOverlapAcrossDocuments__MultipleNameRendererQuery($id: ID!) {
  node(id: $id) {
    ...MatchFieldOverlapAcrossDocuments__FooNameRendererFragment
    ...MatchFieldOverlapAcrossDocuments__BarNameRendererFragment
  }
}

fragment MatchFieldOverlapAcrossDocuments__FooNameRendererFragment on User {
  id
  nameRenderer @match {
    ...MatchFieldOverlapAcrossDocuments__MarkdownUserNameRenderer_name
      @module(name: "FooMarkdownUserNameRenderer.react")
  }
}

fragment MatchFieldOverlapAcrossDocuments__BarNameRendererFragment on User {
  nameRenderer @match {
    ...MatchFieldOverlapAcrossDocuments__MarkdownUserNameRenderer_name
      @module(name: "BarMarkdownUserNameRenderer.react")
  }
}

fragment MatchFieldOverlapAcrossDocuments__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MatchFieldOverlapAcrossDocuments__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query QueryWithConditionalModule__NameRendererQuery(
  $id: ID!
  $fetchModule: Boolean!
) {
  node(id: $id) {
    ...QueryWithConditionalModule__NameRendererFragment
  }
}

fragment QueryWithConditionalModule__NameRendererFragment on User {
  id
  nameRenderer {
    ...QueryWithConditionalModule__MarkdownUserNameRenderer_name
      @include(if: $fetchModule)
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment QueryWithConditionalModule__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query StreamConnection__NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @stream_connection(
          key: "NodeQuery_comments"
          initial_count: 0
          label: "comments"
        ) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
}

query ConnectionWithDynamicKey__FeedbackQuery($id: ID!, $commentsKey: String) {
  node(id: $id) {
    ...ConnectionWithDynamicKey__FeedbackFragment
  }
}

query ConnectionWithDynamicKey__PaginationQuery(
  $id: ID!
  $commentsKey: String
  $count: Int!
  $cursor: ID!
) {
  node(id: $id) {
    ...ConnectionWithDynamicKey__FeedbackFragment
  }
}

fragment ConnectionWithDynamicKey__FeedbackFragment on Feedback
  @argumentDefinitions(
    count: {type: "Int", defaultValue: 2}
    cursor: {type: "ID"}
  ) {
  id
  comments(after: $cursor, first: $count, orderby: "date")
    @connection(
      key: "FeedbackFragment_comments"
      dynamicKey_UNSTABLE: $commentsKey
      filters: ["orderby"]
    ) {
    edges {
      node {
        id
      }
    }
  }
}

query FragmentWithStream__QueryWithFragmentWithStream($id: ID!) {
  node(id: $id) {
    id
    ...FragmentWithStream__FeedbackFragment
  }
}

fragment FragmentWithStream__FeedbackFragment on Feedback {
  id
  actors @stream(initial_count: 1, label: "StreamedActorsLabel") {
    name
  }
}

fragment FragmentWithMatchDirective__NameRendererFragment on User {
  id
  nameRenderer @match {
    ...FragmentWithMatchDirective__PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...FragmentWithMatchDirective__MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment FragmentWithMatchDirective__PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment FragmentWithMatchDirective__MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query ComplexArguments__TestQuery($date: String) {
  items(filter: {date: $date}) {
    date
  }
}

query ConnectionWithAliasedEdgesPageInfo__NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "NodeQuery_comments") {
        commentEdges: edges {
          node {
            actor {
              name
            }
          }
        }
        commentPageInfo: pageInfo {
          hasNextPage
        }
      }
    }
  }
}

fragment FragmentOnQuery__RefetchableFragment on Query
  @argumentDefinitions(id: {type: "ID!"})
  @refetchable(queryName: "RefetchableFragmentQuery") {
  node(id: $id) {
    ... on User {
      id
      name
      ...FragmentOnQuery__ProfilePicture
    }
  }
}

fragment FragmentOnQuery__ProfilePicture on User {
  profilePicture(size: $size) {
    uri
  }
}

fragment RefetchableFragmentWithConnection__PaginationFragment on Node
  @argumentDefinitions(
    count: {type: "Int", defaultValue: 10}
    cursor: {type: "ID"}
  )
  @refetchable(queryName: "RefetchableFragmentQuery") {
  id
  ... on User {
    name
    friends(after: $cursor, first: $count)
      @connection(key: "PaginationFragment_friends") {
      edges {
        node {
          id
        }
      }
    }
  }
}

query FooQuery($id: ID!) {
  client_root_field

  node(id: $id) {
    id
  }
}

mutation FooMutation($input: UnfriendInput) {
  client_root_field
  unfriend(input: $input) {
    clientMutationId
  }
}

subscription FooSubscription($input: FeedbackLikeInput) {
  client_root_field
  feedbackLikeSubscribe(input: $input) {
    clientSubscriptionId
  }
}

fragment Foo_user on User {
  id
  client_friends {
    edges {
      client_friend_edge_field # nested client field, should not create new ClientExtension node
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment Foo_user2 on User {
  id
  client_nickname # client field
  friends {
    count
    client_friends_connection_field # nested client field
  }
}

# %extensions%

extend type Query {
  client_root_field: String
}

extend type Mutation {
  client_root_field: String
}

extend type Subscription {
  client_root_field: String
}

extend type User {
  client_friends: FriendsConnection
  client_nickname: String
}

extend type FriendsEdge {
  client_friend_edge_field: String
}

extend type FriendsConnection {
  client_friends_connection_field: String
}
