==================================== INPUT ====================================
fragment TypenameInside on Actor {
  ... on User {
    __typename
    firstName
  }
  ... on Page {
    __typename
    username
  }
}

fragment TypenameOutside on Actor {
  __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameOutsideWithAbstractType on Node {
  __typename
  ... on User {
    firstName
    address {
      street # only here
      city # common
    }
  }
  ... on Actor {
    username
    address {
      city # common
      country # only here
    }
  }
}

fragment TypenameWithoutSpreads on User {
  __typename
  firstName
}

fragment TypenameWithoutSpreadsAbstractType on Node {
  __typename
  id
}

fragment TypenameWithCommonSelections on Actor {
  __typename
  name
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAlias on Actor {
  _typeAlias: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAliases on Actor {
  _typeAlias1: __typename
  _typeAlias2: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameOnUnionWithFragmentsOnConcreteType on UserNameRenderer {
  __typename
  ...MarkdownUserNameRenderer
  ...PlainUserNameRenderer
}

fragment TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment on UserNameRenderer {
  __typename
  ... on MarkdownUserNameRenderer {
    markdown
  }
  ...PlainUserNameRenderer
}

fragment MarkdownUserNameRenderer on MarkdownUserNameRenderer {
  markdown
}

fragment PlainUserNameRenderer on PlainUserNameRenderer {
  plaintext
}

fragment TypenameOnInterfaceWithFragmentsOnConcreteType on Actor {
  __typename
  ...User
  ...Page
}

fragment TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType on Actor {
  __typename
  address {
    city
  }
  ...User
  ...Page
}

fragment TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment on Actor {
  __typename
  ... on User {
    firstName
  }
  ...Page
}

fragment TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment on Actor {
  __typename
  address {
    city
  }
  ... on User {
    firstName
  }
  ...Page
}

fragment User on User {
  firstName
}

fragment Page on Page {
  username
}
==================================== OUTPUT ===================================
import type { FragmentType } from "relay-runtime";
declare export opaque type MarkdownUserNameRenderer$fragmentType: FragmentType;
export type MarkdownUserNameRenderer$data = {|
  +markdown: ?string,
  +$fragmentType: MarkdownUserNameRenderer$fragmentType,
|};
export type MarkdownUserNameRenderer$key = {
  +$data?: MarkdownUserNameRenderer$data,
  +$fragmentSpreads: MarkdownUserNameRenderer$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type Page$fragmentType: FragmentType;
export type Page$data = {|
  +username: ?string,
  +$fragmentType: Page$fragmentType,
|};
export type Page$key = {
  +$data?: Page$data,
  +$fragmentSpreads: Page$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type PlainUserNameRenderer$fragmentType: FragmentType;
export type PlainUserNameRenderer$data = {|
  +plaintext: ?string,
  +$fragmentType: PlainUserNameRenderer$fragmentType,
|};
export type PlainUserNameRenderer$key = {
  +$data?: PlainUserNameRenderer$data,
  +$fragmentSpreads: PlainUserNameRenderer$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameAlias$fragmentType: FragmentType;
export type TypenameAlias$data = {|
  +_typeAlias: "User",
  +firstName: ?string,
  +$fragmentType: TypenameAlias$fragmentType,
|} | {|
  +_typeAlias: "Page",
  +username: ?string,
  +$fragmentType: TypenameAlias$fragmentType,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias: "%other",
  +$fragmentType: TypenameAlias$fragmentType,
|};
export type TypenameAlias$key = {
  +$data?: TypenameAlias$data,
  +$fragmentSpreads: TypenameAlias$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameAliases$fragmentType: FragmentType;
export type TypenameAliases$data = {|
  +_typeAlias1: "User",
  +_typeAlias2: "User",
  +firstName: ?string,
  +$fragmentType: TypenameAliases$fragmentType,
|} | {|
  +_typeAlias1: "Page",
  +_typeAlias2: "Page",
  +username: ?string,
  +$fragmentType: TypenameAliases$fragmentType,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias1: "%other",
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias2: "%other",
  +$fragmentType: TypenameAliases$fragmentType,
|};
export type TypenameAliases$key = {
  +$data?: TypenameAliases$data,
  +$fragmentSpreads: TypenameAliases$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameInside$fragmentType: FragmentType;
export type TypenameInside$data = {|
  +__typename: "Page",
  +username: ?string,
  +$fragmentType: TypenameInside$fragmentType,
|} | {|
  +__typename: "User",
  +firstName: ?string,
  +$fragmentType: TypenameInside$fragmentType,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
  +$fragmentType: TypenameInside$fragmentType,
|};
export type TypenameInside$key = {
  +$data?: TypenameInside$data,
  +$fragmentSpreads: TypenameInside$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { Page$fragmentType } from "Page.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$fragmentType: FragmentType;
export type TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$data = {|
  +__typename: string,
  +firstName?: ?string,
  +$fragmentSpreads: Page$fragmentType,
  +$fragmentType: TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$fragmentType,
|};
export type TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$key = {
  +$data?: TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$data,
  +$fragmentSpreads: TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { Page$fragmentType } from "Page.graphql";
import type { User$fragmentType } from "User.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnInterfaceWithFragmentsOnConcreteType$fragmentType: FragmentType;
export type TypenameOnInterfaceWithFragmentsOnConcreteType$data = {|
  +__typename: string,
  +$fragmentSpreads: Page$fragmentType & User$fragmentType,
  +$fragmentType: TypenameOnInterfaceWithFragmentsOnConcreteType$fragmentType,
|};
export type TypenameOnInterfaceWithFragmentsOnConcreteType$key = {
  +$data?: TypenameOnInterfaceWithFragmentsOnConcreteType$data,
  +$fragmentSpreads: TypenameOnInterfaceWithFragmentsOnConcreteType$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { Page$fragmentType } from "Page.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$fragmentType: FragmentType;
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$data = {|
  +__typename: string,
  +address: ?{|
    +city: ?string,
  |},
  +firstName?: ?string,
  +$fragmentSpreads: Page$fragmentType,
  +$fragmentType: TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$fragmentType,
|};
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$key = {
  +$data?: TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$data,
  +$fragmentSpreads: TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { Page$fragmentType } from "Page.graphql";
import type { User$fragmentType } from "User.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$fragmentType: FragmentType;
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$data = {|
  +__typename: string,
  +address: ?{|
    +city: ?string,
  |},
  +$fragmentSpreads: Page$fragmentType & User$fragmentType,
  +$fragmentType: TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$fragmentType,
|};
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$key = {
  +$data?: TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$data,
  +$fragmentSpreads: TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { PlainUserNameRenderer$fragmentType } from "PlainUserNameRenderer.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$fragmentType: FragmentType;
export type TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$data = {|
  +__typename: string,
  +markdown?: ?string,
  +$fragmentSpreads: PlainUserNameRenderer$fragmentType,
  +$fragmentType: TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$fragmentType,
|};
export type TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$key = {
  +$data?: TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$data,
  +$fragmentSpreads: TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer$fragmentType } from "MarkdownUserNameRenderer.graphql";
import type { PlainUserNameRenderer$fragmentType } from "PlainUserNameRenderer.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOnUnionWithFragmentsOnConcreteType$fragmentType: FragmentType;
export type TypenameOnUnionWithFragmentsOnConcreteType$data = {|
  +__typename: string,
  +$fragmentSpreads: MarkdownUserNameRenderer$fragmentType & PlainUserNameRenderer$fragmentType,
  +$fragmentType: TypenameOnUnionWithFragmentsOnConcreteType$fragmentType,
|};
export type TypenameOnUnionWithFragmentsOnConcreteType$key = {
  +$data?: TypenameOnUnionWithFragmentsOnConcreteType$data,
  +$fragmentSpreads: TypenameOnUnionWithFragmentsOnConcreteType$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOutside$fragmentType: FragmentType;
export type TypenameOutside$data = {|
  +__typename: "Page",
  +username: ?string,
  +$fragmentType: TypenameOutside$fragmentType,
|} | {|
  +__typename: "User",
  +firstName: ?string,
  +$fragmentType: TypenameOutside$fragmentType,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
  +$fragmentType: TypenameOutside$fragmentType,
|};
export type TypenameOutside$key = {
  +$data?: TypenameOutside$data,
  +$fragmentSpreads: TypenameOutside$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameOutsideWithAbstractType$fragmentType: FragmentType;
export type TypenameOutsideWithAbstractType$data = {|
  +__typename: string,
  +address?: ?{|
    +city: ?string,
    +country: ?string,
    +street?: ?string,
  |},
  +firstName?: ?string,
  +username?: ?string,
  +$fragmentType: TypenameOutsideWithAbstractType$fragmentType,
|};
export type TypenameOutsideWithAbstractType$key = {
  +$data?: TypenameOutsideWithAbstractType$data,
  +$fragmentSpreads: TypenameOutsideWithAbstractType$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameWithCommonSelections$fragmentType: FragmentType;
export type TypenameWithCommonSelections$data = {|
  +__typename: string,
  +firstName?: ?string,
  +name: ?string,
  +username?: ?string,
  +$fragmentType: TypenameWithCommonSelections$fragmentType,
|};
export type TypenameWithCommonSelections$key = {
  +$data?: TypenameWithCommonSelections$data,
  +$fragmentSpreads: TypenameWithCommonSelections$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameWithoutSpreads$fragmentType: FragmentType;
export type TypenameWithoutSpreads$data = {|
  +__typename: "User",
  +firstName: ?string,
  +$fragmentType: TypenameWithoutSpreads$fragmentType,
|};
export type TypenameWithoutSpreads$key = {
  +$data?: TypenameWithoutSpreads$data,
  +$fragmentSpreads: TypenameWithoutSpreads$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type TypenameWithoutSpreadsAbstractType$fragmentType: FragmentType;
export type TypenameWithoutSpreadsAbstractType$data = {|
  +__typename: string,
  +id: string,
  +$fragmentType: TypenameWithoutSpreadsAbstractType$fragmentType,
|};
export type TypenameWithoutSpreadsAbstractType$key = {
  +$data?: TypenameWithoutSpreadsAbstractType$data,
  +$fragmentSpreads: TypenameWithoutSpreadsAbstractType$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type User$fragmentType: FragmentType;
export type User$data = {|
  +firstName: ?string,
  +$fragmentType: User$fragmentType,
|};
export type User$key = {
  +$data?: User$data,
  +$fragmentSpreads: User$fragmentType,
  ...
};
