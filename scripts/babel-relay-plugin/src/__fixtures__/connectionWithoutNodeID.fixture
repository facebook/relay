Input:
var Relay = require('react-relay');
var x = Relay.QL`
  query {
    node(id: 123) {
      ... on User {
        friends(first: 3) @relay(isConnectionWithoutNodeID: true) {
          edges {
            cursor,
          },
        },
      },
    },
  }
`;

Output:
var Relay = require('react-relay');
var x = (function () {
  return {
    calls: [{
      kind: 'Call',
      metadata: {},
      name: 'id',
      value: {
        kind: 'CallValue',
        callValue: 123
      }
    }],
    children: [{
      fieldName: 'id',
      kind: 'Field',
      metadata: {
        isGenerated: true,
        isRequisite: true
      },
      type: 'String'
    }, {
      fieldName: '__typename',
      kind: 'Field',
      metadata: {
        isGenerated: true,
        isRequisite: true
      },
      type: 'String'
    }, {
      children: [{
        calls: [{
          kind: 'Call',
          metadata: {},
          name: 'first',
          value: {
            kind: 'CallValue',
            callValue: 3
          }
        }],
        children: [{
          children: [{
            fieldName: 'cursor',
            kind: 'Field',
            metadata: {
              isRequisite: true
            },
            type: 'String'
          }, {
            children: [{
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }],
            fieldName: 'node',
            kind: 'Field',
            metadata: {
              canHaveSubselections: true,
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isGenerated: true,
              isRequisite: true
            },
            type: 'User'
          }],
          fieldName: 'edges',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            isPlural: true
          },
          type: 'UserConnectionEdge'
        }, {
          children: [{
            fieldName: 'hasNextPage',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'Boolean'
          }, {
            fieldName: 'hasPreviousPage',
            kind: 'Field',
            metadata: {
              isGenerated: true,
              isRequisite: true
            },
            type: 'Boolean'
          }],
          fieldName: 'pageInfo',
          kind: 'Field',
          metadata: {
            canHaveSubselections: true,
            isGenerated: true,
            isRequisite: true
          },
          type: 'PageInfo'
        }],
        fieldName: 'friends',
        kind: 'Field',
        metadata: {
          isConnectionWithoutNodeID: true,
          canHaveSubselections: true,
          isConnection: true,
          isFindable: true
        },
        type: 'UserConnection'
      }, {
        fieldName: 'id',
        kind: 'Field',
        metadata: {
          isGenerated: true,
          isRequisite: true
        },
        type: 'String'
      }],
      id: '3D6pywLnanwh:5',
      kind: 'Fragment',
      metadata: {},
      name: 'User',
      type: 'User'
    }],
    fieldName: 'node',
    kind: 'Query',
    metadata: {
      isAbstract: true,
      identifyingArgName: 'id'
    },
    name: 'ConnectionWithoutNodeID',
    type: 'Node'
  };
})();
