==================================== INPUT ====================================
query Test @raw_response_type {
  node(id: "1") {
    ... on User {
      username
      ...NameRendererFragment
    }
  }
  viewer {
    actor {
      ... on User {
        name
        ...AnotherNameRendererFragment
      }
    }
  }
}

fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment AnotherNameRendererFragment on User {
  name
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}
==================================== OUTPUT ===================================
import type { Local3DPayload } from "relay-runtime";
import type { AnotherNameRendererFragment$fragmentType } from "AnotherNameRendererFragment.graphql";
import type { NameRendererFragment$fragmentType } from "NameRendererFragment.graphql";
import type { MarkdownUserNameRenderer_name$normalization } from "MarkdownUserNameRenderer_name$normalization.graphql";
import type { PlainUserNameRenderer_name$normalization } from "PlainUserNameRenderer_name$normalization.graphql";
export type Test$variables = {||};
export type Test$data = {|
  +node: ?{|
    +username?: ?string,
    +$fragmentSpreads: NameRendererFragment$fragmentType,
  |},
  +viewer: ?{|
    +actor: ?{|
      +name?: ?string,
      +$fragmentSpreads: AnotherNameRendererFragment$fragmentType,
    |},
  |},
|};
export type PlainUserNameRenderer_name = {|
  ...PlainUserNameRenderer_name$normalization,
|};
export type MarkdownUserNameRenderer_name = {|
  ...MarkdownUserNameRenderer_name$normalization,
|};
export type Test$rawResponse = {|
  +node: ?({|
    +__typename: "User",
    +id: string,
    +username: ?string,
    +nameRenderer: ?({|
      +__typename: "PlainUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...PlainUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "PlainUserNameRenderer",
      ...PlainUserNameRenderer_name,
    |}> | {|
      +__typename: "MarkdownUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...MarkdownUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "MarkdownUserNameRenderer",
      ...MarkdownUserNameRenderer_name,
    |}> | {|
      +__typename: string,
    |}),
  |} | {|
    +__typename: string,
    +id: string,
  |}),
  +viewer: ?{|
    +actor: ?({|
      +__typename: "User",
      +id: string,
      +name: ?string,
      +nameRenderer: ?({|
        +__typename: "PlainUserNameRenderer",
        +__module_operation_AnotherNameRendererFragment: ?any,
        +__module_component_AnotherNameRendererFragment: ?any,
        ...PlainUserNameRenderer_name,
      |} | Local3DPayload<"AnotherNameRendererFragment", {|
        +__typename: "PlainUserNameRenderer",
        ...PlainUserNameRenderer_name,
      |}> | {|
        +__typename: "MarkdownUserNameRenderer",
        +__module_operation_AnotherNameRendererFragment: ?any,
        +__module_component_AnotherNameRendererFragment: ?any,
        ...MarkdownUserNameRenderer_name,
      |} | Local3DPayload<"AnotherNameRendererFragment", {|
        +__typename: "MarkdownUserNameRenderer",
        ...MarkdownUserNameRenderer_name,
      |}> | {|
        +__typename: string,
      |}),
    |} | {|
      +__typename: string,
      +id: string,
    |}),
  |},
|};
export type Test = {|
  variables: Test$variables,
  response: Test$data,
  rawResponse: Test$rawResponse,
|};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer_name$fragmentType } from "MarkdownUserNameRenderer_name.graphql";
import type { PlainUserNameRenderer_name$fragmentType } from "PlainUserNameRenderer_name.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type AnotherNameRendererFragment$fragmentType: FragmentType;
export type AnotherNameRendererFragment$data = {|
  +name: ?string,
  +nameRenderer: ?{|
    +__fragmentPropName?: ?string,
    +__module_component?: ?string,
    +$fragmentSpreads: PlainUserNameRenderer_name$fragmentType & MarkdownUserNameRenderer_name$fragmentType,
  |},
  +$fragmentType: AnotherNameRendererFragment$fragmentType,
|};
export type AnotherNameRendererFragment$key = {
  +$data?: AnotherNameRendererFragment$data,
  +$fragmentSpreads: AnotherNameRendererFragment$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type MarkdownUserNameRenderer_name$fragmentType: FragmentType;
export type MarkdownUserNameRenderer_name$data = {|
  +markdown: ?string,
  +data: ?{|
    +markup: ?string,
  |},
  +$fragmentType: MarkdownUserNameRenderer_name$fragmentType,
|};
export type MarkdownUserNameRenderer_name$key = {
  +$data?: MarkdownUserNameRenderer_name$data,
  +$fragmentSpreads: MarkdownUserNameRenderer_name$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer_name$fragmentType } from "MarkdownUserNameRenderer_name.graphql";
import type { PlainUserNameRenderer_name$fragmentType } from "PlainUserNameRenderer_name.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type NameRendererFragment$fragmentType: FragmentType;
export type NameRendererFragment$data = {|
  +id: string,
  +nameRenderer: ?{|
    +__fragmentPropName?: ?string,
    +__module_component?: ?string,
    +$fragmentSpreads: PlainUserNameRenderer_name$fragmentType & MarkdownUserNameRenderer_name$fragmentType,
  |},
  +$fragmentType: NameRendererFragment$fragmentType,
|};
export type NameRendererFragment$key = {
  +$data?: NameRendererFragment$data,
  +$fragmentSpreads: NameRendererFragment$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type PlainUserNameRenderer_name$fragmentType: FragmentType;
export type PlainUserNameRenderer_name$data = {|
  +plaintext: ?string,
  +data: ?{|
    +text: ?string,
  |},
  +$fragmentType: PlainUserNameRenderer_name$fragmentType,
|};
export type PlainUserNameRenderer_name$key = {
  +$data?: PlainUserNameRenderer_name$data,
  +$fragmentSpreads: PlainUserNameRenderer_name$fragmentType,
  ...
};
