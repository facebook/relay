{
  "$schema": "http://json-schema.org/draft-07/schema",
  "description": "Relay.js configuration",
  "oneOf": [
    {
      "$ref": "#/definitions/SingleProject"
    },
    {
      "$ref": "#/definitions/MultiProject"
    }
  ],
  "definitions": {
    "SingleProject": {
      "type": "object",
      "title": "Single project configuration",
      "required": ["src", "schema", "language"],
      "properties": {
        "src": {
          "type": "string",
          "description": "Root directory of application code"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "language": {
          "$ref": "#/definitions/TypegenLanguage"
        },
        "artifactDirectory": {
          "type": "string",
          "description": "A directory to output all artifacts to"
        },
        "excludes": {
          "$ref": "#/definitions/Excludes"
        },
        "schemaExtensions": {
          "$ref": "#/definitions/SchemaExtensions"
        },
        "schemaConfig": {
          "$ref": "#/definitions/SchemaConfig"
        },
        "noFutureProofEnums": {
          "$ref": "#/definitions/NoFutureProofEnums"
        },
        "customScalars": {
          "$ref": "#/definitions/CustomScalarTypes"
        },
        "eagerEsModules": {
          "$ref": "#/definitions/EagerEsModules"
        },
        "persistConfig": {
          "$ref": "#/definitions/PersistConfig"
        },
        "codegenCommand": {
          "$ref": "#/definitions/CodegenCommand"
        },
        "isDevVariableName": {
          "$ref": "#/definitions/DevVariableName"
        },
        "jsModuleFormat": {
          "$ref": "#/definitions/JsModuleFormat"
        },
        "moduleImportConfig": {
          "$ref": "#/definitions/ModuleImportConfig"
        },
        "featureFlags": {
          "$ref": "#/definitions/FeatureFlags"
        }
      }
    },
    "MultiProject": {
      "type": "object",
      "title": "Multi project configuration",
      "required": ["sources", "projects"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name of this configuration"
        },
        "root": {
          "type": "string",
          "description": "Root directory relative to the config file. Defaults to the directory where the config is located."
        },
        "header": {
          "type": "array",
          "description": "A header to be prepended to each generated artifact",
          "items": {
            "type": "string",
            "description": "A line of text in the header"
          }
        },
        "sources": {
          "type": "object",
          "description": "A mapping from directory paths (relative to the root) to a project. If a path is a subdirectory of another path, the more specific path wins.",
          "additionalProperties": {
            "type": "string",
            "description": "The name of a project"
          }
        },
        "codegenCommand": {
          "$ref": "#/definitions/CodegenCommand"
        },
        "excludes": {
          "$ref": "#/definitions/Excludes"
        },
        "projects": {
          "type": "object",
          "description": "Configuration of projects to compile",
          "additionalProperties": {
            "$ref": "#/definitions/MultiProject_ProjectConfig"
          }
        },
        "featureFlags": {
          "$ref": "#/definitions/FeatureFlags"
        },
        "savedStateConfig": {
          "type": "object",
          "properties": {
            "mergebase": {
              "type": "string"
            },
            "mergebase-with": {
              "type": "string"
            },
            "saved-state": {
              "type": "object",
              "properties": {
                "storage": {
                  "type": "string"
                },
                "commit-id": {
                  "type": "string"
                },
                "config": {}
              }
            }
          }
        },
        "isDevVariableName": {
          "$ref": "#/definitions/DevVariableName"
        }
      }
    },
    "MultiProject_ProjectConfig": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TypegenConfig"
        }
      ],
      "oneOf": [
        {
          "required": ["schema"]
        },
        {
          "required": ["schemaDir"]
        }
      ],
      "properties": {
        "base": {
          "type": "string",
          "description": "The name of the base project. If a base project is set, the documents of that project can be referenced, but won't produce output artifacts. Extensions from the base project will be added as well and the schema of the base project should be a subset of the schema of this project."
        },
        "output": {
          "type": "string",
          "description": "A directory to output all artifacts to"
        },
        "extraArtifactsOutput": {
          "type": "string",
          "description": "Some projects may need to generate extra artifacts. For those, we may need to provide an additional directory to put them. By default they will use `output`."
        },
        "shardOutput": {
          "type": "boolean",
          "description": "If `output` is provided and `shard_output` is `true`, shard the files by putting them under `{output_dir}/{source_relative_path}`"
        },
        "shardStripRegex": {
          "type": "string",
          "description": "Regex to match and strip parts of the `source_relative_path`"
        },
        "schemaExtensions": {
          "$ref": "#/definitions/SchemaExtensions"
        },
        "schema": {
          "$ref": "#/definitions/Schema"
        },
        "schemaDir": {
          "type": "string",
          "description": "A directory containing a schema broken up in multiple `*.graphql` files."
        },
        "persist": {
          "$ref": "#/definitions/PersistConfig"
        },
        "testPathRegex": {
          "type": "string",
          "description": "Restrict @relay_test_operation to directories matching this regex"
        },
        "variableNamesComment": {
          "type": "boolean",
          "description": "Generates a `// @relayVariables name1 name2` header in generated operation files"
        },
        "featureFlags": {
          "$ref": "#/definitions/FeatureFlags"
        },
        "rollout": {
          "$ref": "#/definitions/Rollout"
        },
        "jsModuleFormat": {
          "$ref": "#/definitions/JsModuleFormat"
        },
        "schemaConfig": {
          "$ref": "#/definitions/SchemaConfig"
        },
        "moduleImportConfig": {
          "$ref": "#/definitions/ModuleImportConfig"
        },
        "diagnosticReportConfig": {
          "$ref": "#/definitions/DiagnosticReportConfig"
        }
      },
      "additionalProperties": true
    },
    "Schema": {
      "type": "string",
      "description": "Path to a GraphQL schema file"
    },
    "CodegenCommand": {
      "type": "string"
      // todo: add descriptions
    },
    "JsModuleFormat": {
      "type": "string",
      "description": "Formatting style for generated files",
      "enum": ["commonjs", "haste"]
    },
    "SchemaExtensions": {
      "type": "array",
      "description": "List of directories with `*.graphql` files containing schema extensions",
      "items": {
        "type": "string",
        "description": "A directory path"
      }
    },
    "Excludes": {
      "type": "array",
      "description": "List of directory glob patterns to ignore",
      "examples": [
        ["**/node_modules/**", "**/__mocks__/**", "**/__generated__/**"]
      ],
      "items": {
        "type": "string",
        "description": "A directory glob pattern"
      }
    },
    "ModuleImportConfig": {
      "type": "object"
      // todo: add
    },
    "TypegenConfig": {
      "type": "object",
      "required": ["language"],
      "properties": {
        "language": {
          "$ref": "#/definitions/TypegenLanguage"
        },
        "enumModuleSuffix": {
          "type": "string"
          // todo: add descriptions
        },
        "optionalInputFields": {
          "type": "array",
          // todo: add descriptions
          "items": {
            "type": "string"
          }
        },
        "useImportTypeSyntax": {
          "type": "boolean"
          // todo: add descriptions
        },
        "customScalarTypes": {
          "$ref": "#/definitions/CustomScalarTypes"
        },
        "requireCustomScalarTypes": {
          "type": "boolean"
          // todo: add descriptions
        },
        "flowTypegen": {
          "type": "object",
          // todo: add descriptions
          "properties": {
            "noFutureProofEnums": {
              "$ref": "#/definitions/NoFutureProofEnums"
            }
          }
        },
        "eagerEsModules": {
          "$ref": "#/definitions/EagerEsModules"
        }
      }
    },
    "NoFutureProofEnums": {
      "type": "boolean",
      "description": "For flow only. This option controls whether or not a catch-all entry is added to enum type definitions values that may be added in the future. Enabling this means you will have to update your application whenever the GraphQL server schema adds new enum values to prevent it from breaking"
    },
    "CustomScalarTypes": {
      "type": "object",
      "description": "Mappings from custom scalars in your schema to built-in GraphQL types, for type emission purposes",
      // todo: this can be both
      // { "Url": "String" }
      // { "Url": {"name:: "MyURL", "path": "../src/MyUrlTypes"} }
      "examples": [{"MyCustomScalar": "String"}],
      "additionalProperties": {
        "type": "string",
        "minLength": 1
      }
    },
    "TypegenLanguage": {
      "type": "string",
      "description": "The language used for input files and generated artifacts",
      "enum": ["javascript", "typescript", "flow"]
    },
    "EagerEsModules": {
      "type": "boolean",
      "description": "Emit ES module artifacts"
    },
    "DiagnosticReportConfig": {
      "type": "object",
      "description": "Configuration for all diagnostic reporting in the compiler",
      "required": ["criticalLevel"],
      "properties": {
        "criticalLevel": {
          "type": "string",
          "description": "Threshold for diagnostics to be critical to the compiler's execution. All diagnostic with severities at and below this level will cause the compiler to fatally exit.",
          "enum": ["error", "warning", "info", "hint"]
        }
      }
    },
    "PersistConfig": {
      "oneOf": [
        {
          "type": "object",
          "title": "Remote Persisting",
          "required": ["url"],
          "properties": {
            "url": {
              "type": "string",
              "description": "URL to send a POST request to to persist."
            },
            "params": {
              "type": "object",
              "description": "The document will be in a POST parameter text. This map can contain additional parameters to send",
              "additionalProperties": {
                "type": "string"
              }
            },
            "concurrency": {
              "type": "integer",
              "description": "The maximum number concurrent requests that will be made to `url`",
              "minimum": 1
            }
          }
        },
        {
          "type": "object",
          "title": "Local Persisting",
          "required": ["file"],
          "properties": {
            "file": {
              "type": "string",
              "description": "Path to the JSON file that will contain operations map"
            }
          }
        }
      ]
    },
    "SchemaConfig": {
      "type": "object",
      // todo: add descriptions
      "properties": {
        "connectionInterface": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string"
            },
            "edges": {
              "type": "string"
            },
            "endCursor": {
              "type": "string"
            },
            "hasNextPage": {
              "type": "string"
            },
            "hasPreviousPage": {
              "type": "string"
            },
            "node": {
              "type": "string"
            },
            "pageInfo": {
              "type": "string"
            },
            "startCursor": {
              "type": "string"
            }
          }
        },
        "nodeInterfaceIdField": {
          "type": "string",
          "description": "Configure the name of the globally unique ID field on the Node interface",
          "default": "id"
        },
        "nonNodeIdFields": {
          "type": "object",
          "required": ["allowedIdTypes"],
          "properties": {
            "allowedIdTypes": {
              "type": "object",
              "description": "Mappings from types in your schema to allowed types for their fields named `id`",
              "examples": [{"ObjectType": "CustomIdType"}],
              "additionalProperties": {
                "description": "The type of the `id` field of this type",
                "type": "string",
                "minLength": 1
              }
            }
          }
        },
        "unselectableDirectiveName": {
          "type": "string"
          // todo: add descriptions
        }
      }
    },
    "DevVariableName": {
      "type": "string",
      "description": "Name of the global variable for dev mode",
      "default": "__DEV__"
    },
    "FeatureFlags": {
      "type": "object",
      "properties": {
        "enable_flight_transform": {
          "type": "boolean"
        },
        "enable_relay_resolver_transform": {
          "type": "boolean"
        },
        "use_named_imports_for_relay_resolvers": {
          "type": "boolean",
          "default": true
        },
        "relay_resolver_model_syntax_enabled": {
          "type": "boolean"
        },
        "relay_resolver_enable_terse_syntax": {
          "type": "boolean"
        },
        "hash_supported_argument": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "no_inline": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "enable_3d_branch_arg_generation": {
          "type": "boolean"
        },
        "actor_change_support": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "text_artifacts": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "enable_client_edges": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "skip_printing_nulls": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "enable_fragment_aliases": {
          "$ref": "#/definitions/FeatureFlag"
        },
        "compact_query_text": {
          "$ref": "#/definitions/FeatureFlag"
        }
      }
    },
    "FeatureFlag": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": ["disabled"]
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": ["enabled"]
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": ["limited"]
            },
            "allowlist": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "enum": ["rollout"]
            },
            "rollout": {
              "$ref": "#/definitions/Rollout"
            }
          }
        }
      ],
      "examples": [{"kind": "disabled"}]
    },
    "Rollout": {
      "type": "integer",
      "minimum": 0,
      "maximum": 100
    }
  }
}
