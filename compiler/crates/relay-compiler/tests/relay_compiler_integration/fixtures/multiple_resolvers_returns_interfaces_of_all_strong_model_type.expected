==================================== INPUT ====================================
//- PersonComponent.js
graphql`query PersonComponentQuery {
  person {
    name
  }
  actor {
    description
  }
}`

//- UserTypeResolvers.js
/**
 * @RelayResolver User implements IPerson & IActor
 */

/**
 * @RelayResolver User.name: String
 */

/**
 * @RelayResolver User.description: String
 */

//- AdminTypeResolvers.js
/**
 * @RelayResolver Admin implements IPerson & IActor
 */

/**
 * @RelayResolver Admin.name: String
 */

/**
 * @RelayResolver Admin.description: String
 */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "featureFlags": {
    "enable_relay_resolver_transform": true,
    "enable_resolver_normalization_ast": true,
    "relay_resolver_enable_interface_output_type": { "kind": "enabled" }
  }
}

//- schema.graphql

type Query {
  person: IPerson
  actor: IActor
}

//- schema-extensions/extension.graphql

interface IPerson {
  id: ID!
  name: String
}

interface IActor {
  id: ID!
  description: String
}
==================================== OUTPUT ===================================
//- __generated__/Admin____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<7fbe3989595c55397f4bcc5c81ec30b2>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin__id$data } from "Admin__id.graphql";
import type { FragmentType } from "relay-runtime";
import {Admin as adminRelayModelInstanceResolverType} from "AdminTypeResolvers";
// Type assertion validating that `adminRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(adminRelayModelInstanceResolverType: (
  id: Admin__id$data['id'],
) => mixed);
declare export opaque type Admin____relay_model_instance$fragmentType: FragmentType;
export type Admin____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof adminRelayModelInstanceResolverType>>,
  +$fragmentType: Admin____relay_model_instance$fragmentType,
|};
export type Admin____relay_model_instance$key = {
  +$data?: Admin____relay_model_instance$data,
  +$fragmentSpreads: Admin____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "Admin__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin__id.graphql'), require('AdminTypeResolvers').Admin, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin____relay_model_instance$fragmentType,
  Admin____relay_model_instance$data,
>*/);

//- __generated__/Admin__id.graphql.js
/**
 * <auto-generated> SignedSource<<29acfbf1d6f559b8b77e9cd1f35218c0>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type Admin__id$fragmentType: FragmentType;
export type Admin__id$data = {|
  +id: string,
  +$fragmentType: Admin__id$fragmentType,
|};
export type Admin__id$key = {
  +$data?: Admin__id$data,
  +$fragmentSpreads: Admin__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin__id$fragmentType,
  Admin__id$data,
>*/);

//- __generated__/PersonComponentQuery.graphql.js
/**
 * <auto-generated> SignedSource<<b5eab70e39aae5fccf8c40cb5d1abccd>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, ClientQuery } from 'relay-runtime';
export type PersonComponentQuery$variables = {||};
export type PersonComponentQuery$data = {|
  +actor: ?{|
    +description: ?string,
  |},
  +person: ?{|
    +name: ?string,
  |},
|};
export type PersonComponentQuery = {|
  response: PersonComponentQuery$data,
  variables: PersonComponentQuery$variables,
|};
*/

var node/*: ClientRequest*/ = (function(){
var v0 = {
  "args": null,
  "kind": "FragmentSpread",
  "name": "Admin____relay_model_instance"
},
v1 = {
  "args": null,
  "kind": "FragmentSpread",
  "name": "User____relay_model_instance"
},
v2 = {
  "alias": null,
  "args": null,
  "kind": "ScalarField",
  "name": "__typename",
  "storageKey": null
},
v3 = {
  "alias": null,
  "args": null,
  "kind": "ScalarField",
  "name": "id",
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "PersonComponentQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": null,
        "kind": "LinkedField",
        "name": "person",
        "plural": false,
        "selections": [
          {
            "kind": "ClientExtension",
            "selections": [
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "fragment": (v0/*: any*/),
                    "kind": "RelayResolver",
                    "name": "name",
                    "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin____relay_model_instance.graphql'), require('AdminTypeResolvers').name, '__relay_model_instance', true),
                    "path": "person.name"
                  }
                ],
                "type": "Admin",
                "abstractKey": null
              },
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "fragment": (v1/*: any*/),
                    "kind": "RelayResolver",
                    "name": "name",
                    "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User____relay_model_instance.graphql'), require('UserTypeResolvers').name, '__relay_model_instance', true),
                    "path": "person.name"
                  }
                ],
                "type": "User",
                "abstractKey": null
              }
            ]
          }
        ],
        "storageKey": null
      },
      {
        "alias": null,
        "args": null,
        "concreteType": null,
        "kind": "LinkedField",
        "name": "actor",
        "plural": false,
        "selections": [
          {
            "kind": "ClientExtension",
            "selections": [
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "fragment": (v0/*: any*/),
                    "kind": "RelayResolver",
                    "name": "description",
                    "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin____relay_model_instance.graphql'), require('AdminTypeResolvers').description, '__relay_model_instance', true),
                    "path": "actor.description"
                  }
                ],
                "type": "Admin",
                "abstractKey": null
              },
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "fragment": (v1/*: any*/),
                    "kind": "RelayResolver",
                    "name": "description",
                    "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User____relay_model_instance.graphql'), require('UserTypeResolvers').description, '__relay_model_instance', true),
                    "path": "actor.description"
                  }
                ],
                "type": "User",
                "abstractKey": null
              }
            ]
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "PersonComponentQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": null,
        "kind": "LinkedField",
        "name": "person",
        "plural": false,
        "selections": [
          (v2/*: any*/),
          {
            "kind": "ClientExtension",
            "selections": [
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "name": "name",
                    "args": null,
                    "kind": "RelayResolver",
                    "storageKey": null,
                    "isOutputType": true,
                    "resolverInfo": {
                      "resolverFunction": require('AdminTypeResolvers').name,
                      "rootFragment": null
                    }
                  }
                ],
                "type": "Admin",
                "abstractKey": null
              },
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "name": "name",
                    "args": null,
                    "kind": "RelayResolver",
                    "storageKey": null,
                    "isOutputType": true,
                    "resolverInfo": {
                      "resolverFunction": require('UserTypeResolvers').name,
                      "rootFragment": null
                    }
                  }
                ],
                "type": "User",
                "abstractKey": null
              },
              (v3/*: any*/)
            ]
          }
        ],
        "storageKey": null
      },
      {
        "alias": null,
        "args": null,
        "concreteType": null,
        "kind": "LinkedField",
        "name": "actor",
        "plural": false,
        "selections": [
          (v2/*: any*/),
          {
            "kind": "ClientExtension",
            "selections": [
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "name": "description",
                    "args": null,
                    "kind": "RelayResolver",
                    "storageKey": null,
                    "isOutputType": true,
                    "resolverInfo": {
                      "resolverFunction": require('AdminTypeResolvers').description,
                      "rootFragment": null
                    }
                  }
                ],
                "type": "Admin",
                "abstractKey": null
              },
              {
                "kind": "InlineFragment",
                "selections": [
                  {
                    "name": "description",
                    "args": null,
                    "kind": "RelayResolver",
                    "storageKey": null,
                    "isOutputType": true,
                    "resolverInfo": {
                      "resolverFunction": require('UserTypeResolvers').description,
                      "rootFragment": null
                    }
                  }
                ],
                "type": "User",
                "abstractKey": null
              },
              (v3/*: any*/)
            ]
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "cacheID": "0deed3d106ca29ad927a703c08de07e0",
    "id": null,
    "metadata": {},
    "name": "PersonComponentQuery",
    "operationKind": "query",
    "text": null
  }
};
})();

(node/*: any*/).hash = "0ed0cac8f6cfaba728cb6608b7840d57";

module.exports = ((node/*: any*/)/*: ClientQuery<
  PersonComponentQuery$variables,
  PersonComponentQuery$data,
>*/);

//- __generated__/User____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<7ffabc2a97c3589cbfd20a23b3b608ca>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { User__id$data } from "User__id.graphql";
import type { FragmentType } from "relay-runtime";
import {User as userRelayModelInstanceResolverType} from "UserTypeResolvers";
// Type assertion validating that `userRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userRelayModelInstanceResolverType: (
  id: User__id$data['id'],
) => mixed);
declare export opaque type User____relay_model_instance$fragmentType: FragmentType;
export type User____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof userRelayModelInstanceResolverType>>,
  +$fragmentType: User____relay_model_instance$fragmentType,
|};
export type User____relay_model_instance$key = {
  +$data?: User____relay_model_instance$data,
  +$fragmentSpreads: User____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "User__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User__id.graphql'), require('UserTypeResolvers').User, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "User",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  User____relay_model_instance$fragmentType,
  User____relay_model_instance$data,
>*/);

//- __generated__/User__id.graphql.js
/**
 * <auto-generated> SignedSource<<0a0f39eb34bfc882d28378a0b05b3c17>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type User__id$fragmentType: FragmentType;
export type User__id$data = {|
  +id: string,
  +$fragmentType: User__id$fragmentType,
|};
export type User__id$key = {
  +$data?: User__id$data,
  +$fragmentSpreads: User__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  User__id$fragmentType,
  User__id$data,
>*/);
