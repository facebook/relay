// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SkipUnreachableNodeTransform matches expected output: keeps-other-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($cond: Boolean!) {
  viewer {
    actor {
      id @skip(if: $cond)
      ... on User @include(if: $cond) {
        name @include(if: true) @skip(if: false)
        firstName @include(if: true) @skip(if: false)
      }
      ...UserFragment @include(if: $cond)
    }
  }
}

fragment UserFragment on User {
  name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $cond: Boolean!
) {
  viewer {
    actor {
      id @skip(if: $cond)
      ... on User @include(if: $cond) {
        name
        firstName
      }
      ...UserFragment @include(if: $cond)
    }
  }
}

fragment UserFragment on User {
  name
}

`;

exports[`SkipUnreachableNodeTransform matches expected output: removes-include-false.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query EmptyQuery($id: ID!) {
  node(id: $id) {
    id @include(if: false)
    ... on User @include(if: false) {
      id
    }
    ...SkippedFragment
    ...EmptyFragment
  }
}

fragment SkippedFragment on User
  @argumentDefinitions(cond: {type: "Boolean!", defaultValue: false}) {
  id @include(if: $cond)
}

fragment EmptyFragment on User {
  id @include(if: false)
}

query TestQuery {
  viewer {
    actor {
      name
      id @include(if: false)
      ... on User @include(if: false) {
        id
      }
      ...SkippedFragment
      ...EmptyFragment
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query EmptyQuery(
  $id: ID!
) {
  node(id: $id) {
    ...SkippedFragment
  }
}

query TestQuery {
  viewer {
    actor {
      name
      ...SkippedFragment
    }
  }
}

fragment SkippedFragment on User @argumentDefinitions(
  cond: {type: "Boolean!", defaultValue: false}
) {
  id @include(if: $cond)
}

`;

exports[`SkipUnreachableNodeTransform matches expected output: removes-skip-true.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query EmptyQuery($id: ID!) {
  node(id: $id) {
    id @skip(if: true)
    ... on User @skip(if: true) {
      id
    }
    ...SkippedFragment
    ...EmptyFragment
  }
}

fragment SkippedFragment on User
  @argumentDefinitions(cond: {type: "Boolean!", defaultValue: true}) {
  id @skip(if: $cond)
}

fragment EmptyFragment on User {
  id @skip(if: true)
}

query TestQuery {
  viewer {
    actor {
      name
      id @skip(if: true)
      ... on User @skip(if: true) {
        id
      }
      ...SkippedFragment
      ...EmptyFragment
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query EmptyQuery(
  $id: ID!
) {
  node(id: $id) {
    ...SkippedFragment
  }
}

query TestQuery {
  viewer {
    actor {
      name
      ...SkippedFragment
    }
  }
}

fragment SkippedFragment on User @argumentDefinitions(
  cond: {type: "Boolean!", defaultValue: true}
) {
  id @skip(if: $cond)
}

`;
