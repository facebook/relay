{"version":3,"names":["declare","api","opts","assertVersion","FLOW_DIRECTIVE","skipStrip","requireDirective","allowDeclareFields","name","inherits","syntaxFlow","visitor","Program","path","file","ast","comments","directiveFound","comment","test","value","replace","trim","ignore","ImportDeclaration","node","specifiers","length","typeCount","forEach","importKind","remove","Flow","buildCodeFrameError","ClassPrivateProperty","typeAnnotation","Class","implements","get","child","isClassProperty","decorators","variance","AssignmentPattern","left","optional","Function","params","type","shift","i","param","t","isMethod","predicate","TypeCastExpression","expression","isTypeCastExpression","replaceWith","CallExpression","typeArguments","OptionalCallExpression","NewExpression"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxFlow from \"@babel/plugin-syntax-flow\";\nimport { types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\n\nexport interface Options {\n  requireDirective?: boolean;\n  allowDeclareFields?: boolean;\n}\n\nexport default declare((api, opts: Options) => {\n  api.assertVersion(7);\n\n  const FLOW_DIRECTIVE = /(@flow(\\s+(strict(-local)?|weak))?|@noflow)/;\n\n  let skipStrip = false;\n\n  const { requireDirective = false } = opts;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var { allowDeclareFields = false } = opts;\n  }\n\n  return {\n    name: \"transform-flow-strip-types\",\n    inherits: syntaxFlow,\n\n    visitor: {\n      Program(\n        path,\n        {\n          file: {\n            ast: { comments },\n          },\n        },\n      ) {\n        skipStrip = false;\n        let directiveFound = false;\n\n        if (comments) {\n          for (const comment of comments) {\n            if (FLOW_DIRECTIVE.test(comment.value)) {\n              directiveFound = true;\n\n              // remove flow directive\n              comment.value = comment.value.replace(FLOW_DIRECTIVE, \"\");\n\n              // remove the comment completely if it only consists of whitespace and/or stars\n              if (!comment.value.replace(/\\*/g, \"\").trim()) {\n                comment.ignore = true;\n              }\n            }\n          }\n        }\n\n        if (!directiveFound && requireDirective) {\n          skipStrip = true;\n        }\n      },\n      ImportDeclaration(path) {\n        if (skipStrip) return;\n        if (!path.node.specifiers.length) return;\n\n        let typeCount = 0;\n\n        // @ts-expect-error importKind is only in importSpecifier\n        path.node.specifiers.forEach(({ importKind }) => {\n          if (importKind === \"type\" || importKind === \"typeof\") {\n            typeCount++;\n          }\n        });\n\n        if (typeCount === path.node.specifiers.length) {\n          path.remove();\n        }\n      },\n\n      Flow(\n        path: NodePath<\n          t.Flow | t.ImportDeclaration | t.ExportDeclaration | t.ImportSpecifier\n        >,\n      ) {\n        if (skipStrip) {\n          throw path.buildCodeFrameError(\n            \"A @flow directive is required when using Flow annotations with \" +\n              \"the `requireDirective` option.\",\n          );\n        }\n\n        path.remove();\n      },\n\n      ClassPrivateProperty(path) {\n        if (skipStrip) return;\n        path.node.typeAnnotation = null;\n      },\n\n      Class(path) {\n        if (skipStrip) return;\n        path.node.implements = null;\n\n        // We do this here instead of in a `ClassProperty` visitor because the class transform\n        // would transform the class before we reached the class property.\n        path.get(\"body.body\").forEach(child => {\n          if (child.isClassProperty()) {\n            const { node } = child;\n\n            if (!process.env.BABEL_8_BREAKING) {\n              if (!allowDeclareFields && node.declare) {\n                throw child.buildCodeFrameError(\n                  `The 'declare' modifier is only allowed when the ` +\n                    `'allowDeclareFields' option of ` +\n                    `@babel/plugin-transform-flow-strip-types or ` +\n                    `@babel/preset-flow is enabled.`,\n                );\n              }\n            }\n\n            if (node.declare) {\n              child.remove();\n            } else {\n              if (!process.env.BABEL_8_BREAKING) {\n                if (!allowDeclareFields && !node.value && !node.decorators) {\n                  child.remove();\n                  return;\n                }\n              }\n\n              node.variance = null;\n              node.typeAnnotation = null;\n            }\n          }\n        });\n      },\n\n      AssignmentPattern({ node }) {\n        if (skipStrip) return;\n        // @ts-expect-error optional is not in ObjectPattern\n        if (node.left.optional) {\n          // @ts-expect-error optional is not in ObjectPattern\n          node.left.optional = false;\n        }\n      },\n\n      Function({ node }) {\n        if (skipStrip) return;\n        if (\n          node.params.length > 0 &&\n          node.params[0].type === \"Identifier\" &&\n          node.params[0].name === \"this\"\n        ) {\n          node.params.shift();\n        }\n        for (let i = 0; i < node.params.length; i++) {\n          let param = node.params[i];\n          if (param.type === \"AssignmentPattern\") {\n            // @ts-expect-error: refine AST types, the left of an assignment pattern as a binding\n            // must not be a MemberExpression\n            param = param.left;\n          }\n          // @ts-expect-error optional is not in ObjectPattern\n          if (param.optional) {\n            // @ts-expect-error optional is not in ObjectPattern\n            param.optional = false;\n          }\n        }\n\n        if (!t.isMethod(node)) {\n          node.predicate = null;\n        }\n      },\n\n      TypeCastExpression(path) {\n        if (skipStrip) return;\n        let { node } = path;\n        do {\n          // @ts-expect-error node is a search pointer\n          node = node.expression;\n        } while (t.isTypeCastExpression(node));\n        path.replaceWith(node);\n      },\n\n      CallExpression({ node }) {\n        if (skipStrip) return;\n        node.typeArguments = null;\n      },\n\n      OptionalCallExpression({ node }) {\n        if (skipStrip) return;\n        node.typeArguments = null;\n      },\n\n      NewExpression({ node }) {\n        if (skipStrip) return;\n        node.typeArguments = null;\n      },\n    },\n  };\n});\n"],"mappings":"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"}