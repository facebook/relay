// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayConnectionTransform matches expected output: connection.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
              friends(first: 10) @connection(key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @__clientField(handle: "connection", key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
              friends(first: 10) @__clientField(handle: "connection", key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                  ... on FriendsEdge {
                    cursor
                    node {
                      __typename
                    }
                  }
                }
                pageInfo {
                  ... on PageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": null
    },
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-directions.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!, $last: Int, $first: Int) {
  node(id: $id) {
    id
    ... on Story {
      forwardComments: comments(first: 1)
        @connection(key: "NodeQuery_forwardComments") {
        edges {
          node {
            id
          }
        }
      }
      backwardComments: comments(last: 2)
        @connection(key: "NodeQuery_backwardComments") {
        edges {
          node {
            id
          }
        }
      }
      mixedDirectionComments: comments(last: $last, first: $first)
        @connection(key: "NodeQuery_mixedDirectionComments") {
        edges {
          node {
            id
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $last: Int
  $first: Int
) {
  node(id: $id) {
    id
    ... on Story {
      forwardComments: comments(first: 1) @__clientField(handle: "connection", key: "NodeQuery_forwardComments") {
        edges {
          node {
            id
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
      backwardComments: comments(last: 2) @__clientField(handle: "connection", key: "NodeQuery_backwardComments") {
        edges {
          node {
            id
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            hasPreviousPage
            startCursor
          }
        }
      }
      mixedDirectionComments: comments(last: $last, first: $first) @__clientField(handle: "connection", key: "NodeQuery_mixedDirectionComments") {
        edges {
          node {
            id
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
            hasPreviousPage
            startCursor
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "forwardComments"
      ]
    },
    {
      "count": null,
      "cursor": null,
      "direction": "backward",
      "path": [
        "node",
        "backwardComments"
      ]
    },
    {
      "count": null,
      "cursor": null,
      "direction": "bidirectional",
      "path": [
        "node",
        "mixedDirectionComments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-empty-filters.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!, $orderBy: String) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy)
        @connection(key: "NodeQuery_comments", filters: []) {
        edges {
          node {
            actor {
              name
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $orderBy: String
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy) @__clientField(handle: "connection", key: "NodeQuery_comments", filters: []) {
        edges {
          node {
            actor {
              name
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-filters.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!, $orderBy: String) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy)
        @connection(key: "NodeQuery_comments", filters: ["orderby", "first"]) {
        edges {
          node {
            actor {
              name
              friends(first: 10) @connection(key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $orderBy: String
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy) @__clientField(handle: "connection", key: "NodeQuery_comments", filters: ["first","orderby"]) {
        edges {
          node {
            actor {
              name
              friends(first: 10) @__clientField(handle: "connection", key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                  ... on FriendsEdge {
                    cursor
                    node {
                      __typename
                    }
                  }
                }
                pageInfo {
                  ... on PageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": null
    },
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-generate-filters.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!, $orderBy: String, $traits: [PersonalityTraits]) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy)
        @connection(key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
              friends(first: 10, isViewerFriend: true, traits: $traits)
                @connection(key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $orderBy: String
  $traits: [PersonalityTraits]
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10, orderby: $orderBy) @__clientField(handle: "connection", key: "NodeQuery_comments", filters: ["orderby"]) {
        edges {
          node {
            actor {
              name
              friends(first: 10, isViewerFriend: true, traits: $traits) @__clientField(handle: "connection", key: "NodeQuery_friends", filters: ["isViewerFriend","traits"]) {
                edges {
                  node {
                    name
                  }
                  ... on FriendsEdge {
                    cursor
                    node {
                      __typename
                    }
                  }
                }
                pageInfo {
                  ... on PageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": null
    },
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-missing-first-arg.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments @connection(key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Expected field 'comments' to have a 'first' or 'last' argument.
  
  Source: GraphQL request (6:7)
  5:     ... on Story {
  6:       comments @connection(key: "NodeQuery_comments") {
           ^
  7:         edges {
  
`;

exports[`RelayConnectionTransform matches expected output: connection-with-aliased-edges-pageInfo.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "NodeQuery_comments") {
        commentEdges: edges {
          node {
            actor {
              name
            }
          }
        }
        commentPageInfo: pageInfo {
          hasNextPage
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @__clientField(handle: "connection", key: "NodeQuery_comments") {
        commentEdges: edges {
          node {
            actor {
              name
            }
          }
        }
        commentPageInfo: pageInfo {
          hasNextPage
        }
        edges {
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-with-custom-handler.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @connection(key: "NodeQuery_comments", handler: "my_comments_handler") {
        edges {
          node {
            actor {
              name
              friends(first: 10)
                @connection(
                  key: "NodeQuery_friends"
                  handler: "my_friends_handler"
                ) {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @__clientField(handle: "my_comments_handler", key: "NodeQuery_comments") {
        edges {
          node {
            actor {
              name
              friends(first: 10) @__clientField(handle: "my_friends_handler", key: "NodeQuery_friends") {
                edges {
                  node {
                    name
                  }
                  ... on FriendsEdge {
                    cursor
                    node {
                      __typename
                    }
                  }
                }
                pageInfo {
                  ... on PageInfo {
                    endCursor
                    hasNextPage
                  }
                }
              }
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        pageInfo {
          ... on PageInfo {
            endCursor
            hasNextPage
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": null
    },
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-with-page-info.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Example on User {
  friends(first: $friendsFirst, after: $friendsAfter)
    @connection(key: "Example_friends") {
    edges {
      node {
        profilePicture(preset: $preset) {
          uri
        }
      }
    }
    pageInfo {
      endCursor
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Example on User {
  friends(first: $friendsFirst, after: $friendsAfter) @__clientField(handle: "connection", key: "Example_friends") {
    edges {
      node {
        profilePicture(preset: $preset) {
          uri
        }
      }
      ... on FriendsEdge {
        cursor
        node {
          __typename
        }
      }
    }
    pageInfo {
      endCursor
      ... on PageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": "friendsFirst",
      "cursor": "friendsAfter",
      "direction": "forward",
      "path": [
        "friends"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: connection-with-variables.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Example on User {
  friends(first: $friendsFirst, after: $friendsAfter)
    @connection(key: "Example_friends") {
    edges {
      node {
        profilePicture(preset: $preset) {
          uri
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Example on User {
  friends(first: $friendsFirst, after: $friendsAfter) @__clientField(handle: "connection", key: "Example_friends") {
    edges {
      node {
        profilePicture(preset: $preset) {
          uri
        }
      }
      ... on FriendsEdge {
        cursor
        node {
          __typename
        }
      }
    }
    pageInfo {
      ... on PageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": "friendsFirst",
      "cursor": "friendsAfter",
      "direction": "forward",
      "path": [
        "friends"
      ]
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: invalid-connection-key-name.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "invalid") {
        edges {
          node {
            id
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Expected the key argument to @connection to be of form <SomeName>_comments, got 'invalid'. For a detailed explanation, check out https://relay.dev/docs/en/pagination-container#connection
  
  Source: GraphQL request (6:44)
  5:     ... on Story {
  6:       comments(first: 10) @connection(key: "invalid") {
                                                ^
  7:         edges {
  
`;

exports[`RelayConnectionTransform matches expected output: invalid-connection-key-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: 10) {
        edges {
          node {
            id
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: RelayParser: Encountered 1 error(s):
- Expected a value matching type 'String!'.
  
  GraphQL request (6:44)
  5:     ... on Story {
  6:       comments(first: 10) @connection(key: 10) {
                                                ^
  7:         edges {
  
`;

exports[`RelayConnectionTransform matches expected output: invalid-connection-with-custom-handler.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @connection(key: "NodeQuery_comments", handler: 10) {
        edges {
          node {
            actor {
              name
              friends(first: 10)
                @connection(key: "NodeQuery_friends", handler: false) {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: RelayParser: Encountered 1 error(s):
- Expected a value matching type 'String'.
  
  GraphQL request (6:75)
  5:     ... on Story {
  6:       comments(first: 10) @connection(key: "NodeQuery_comments", handler: 10) {
                                                                               ^
  7:         edges {
  
`;

exports[`RelayConnectionTransform matches expected output: invalid-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      actors @connection {
        name
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- @connection used on invalid field 'actors'. Expected the return type to be a non-plural interface or object, got '[Actor]'.
  
  Source: GraphQL request (6:7)
  5:     ... on Story {
  6:       actors @connection {
           ^
  7:         name
  
`;

exports[`RelayConnectionTransform matches expected output: stream-connection.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @stream_connection(
          key: "NodeQuery_comments"
          initial_count: 0
          label: "comments"
        ) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @__clientField(handle: "connection", key: "NodeQuery_comments") {
        edges @stream(initial_count: 0, label: "comments") {
          node {
            actor {
              name
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        ... on CommentsConnection @defer(label: "comments$pageInfo") {
          pageInfo {
            endCursor
            hasNextPage
            ... on PageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ],
      "stream": true
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: stream-connection-no-label.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @stream_connection(key: "NodeQuery_comments", initial_count: 0) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10) @__clientField(handle: "connection", key: "NodeQuery_comments") {
        edges @stream(initial_count: 0, label: "NodeQuery_comments") {
          node {
            actor {
              name
            }
          }
          ... on CommentsEdge {
            cursor
            node {
              __typename
            }
          }
        }
        ... on CommentsConnection @defer(label: "NodeQuery_comments$pageInfo") {
          pageInfo {
            endCursor
            hasNextPage
            ... on PageInfo {
              endCursor
              hasNextPage
            }
          }
        }
      }
    }
  }
}
# Metadata:
{
  "connection": [
    {
      "count": null,
      "cursor": null,
      "direction": "forward",
      "path": [
        "node",
        "comments"
      ],
      "stream": true
    }
  ]
}
`;

exports[`RelayConnectionTransform matches expected output: stream-connection-with-aliased-edges.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @stream_connection(
          key: "NodeQuery_comments"
          initial_count: 0
          label: "comments"
        ) {
        commentEdges: edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          hasNextPage
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- @stream_connection does not support aliasing the 'edges' field.
  
  Source: GraphQL request (12:9)
  11:         ) {
  12:         commentEdges: edges {
              ^
  13:           node {
  
`;

exports[`RelayConnectionTransform matches expected output: stream-connection-with-aliased-pageInfo.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      comments(first: 10)
        @stream_connection(
          key: "NodeQuery_comments"
          initial_count: 0
          label: "comments"
        ) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        commentPageInfo: pageInfo {
          hasNextPage
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- @stream_connection does not support aliasing the 'pageInfo' field.
  
  Source: GraphQL request (19:9)
  18:         }
  19:         commentPageInfo: pageInfo {
              ^
  20:           hasNextPage
  
`;
