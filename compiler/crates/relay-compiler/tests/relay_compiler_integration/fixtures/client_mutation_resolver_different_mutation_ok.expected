==================================== INPUT ====================================
//- foo.js
/**
 * @RelayResolver Mutation.foo_mutation: Person
 */

/**
 * @RelayResolver NotCalledMutation.baz_mutation: Boolean
 */

//- bar.js
graphql`mutation barMutation {
   baz_mutation
}`

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql",
   "eagerEsModules": true,
   "featureFlags": {
      "enable_relay_resolver_transform": true,
      "enable_relay_resolver_mutations": true
   },
   "schemaExtensions": [
      "./extensions.graphql"
   ]
}

//- schema.graphql

type Mutation

type NotCalledMutation

type Query

schema {
   query: Query,
   mutation: NotCalledMutation,
}

//- extensions.graphql

type Person {
   name: String!
   age: Int!
}
==================================== OUTPUT ===================================
//- __generated__/Mutation__foo_mutation$normalization.graphql.js
/**
 * <auto-generated> SignedSource<<87fb321a30684890a8b77e1bdb2cf79a>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { NormalizationSplitOperation } from 'relay-runtime';

export type Mutation__foo_mutation$normalization = {|
  +age: number,
  +name: string,
|};

*/

var node/*: NormalizationSplitOperation*/ = {
  "kind": "SplitOperation",
  "metadata": {},
  "name": "Mutation__foo_mutation$normalization",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "name",
          "storageKey": null
        },
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "age",
          "storageKey": null
        }
      ]
    }
  ]
};

export default node;

//- __generated__/barMutation.graphql.js
/**
 * <auto-generated> SignedSource<<6f79ca8d7718498c480388c5b22a5130>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, Mutation } from 'relay-runtime';
import {baz_mutation as notCalledMutationBazMutationResolverType} from "../foo.js";
// Type assertion validating that `notCalledMutationBazMutationResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(notCalledMutationBazMutationResolverType: () => ?boolean);
export type barMutation$variables = {||};
export type barMutation$data = {|
  +baz_mutation: ?boolean,
|};
export type barMutation = {|
  response: barMutation$data,
  variables: barMutation$variables,
|};
*/

import {baz_mutation as notCalledMutationBazMutationResolver} from './../foo';

var node/*: ClientRequest*/ = {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "barMutation",
    "selections": [
      {
        "kind": "ClientExtension",
        "selections": [
          {
            "alias": null,
            "args": null,
            "fragment": null,
            "kind": "RelayResolver",
            "name": "baz_mutation",
            "resolverModule": notCalledMutationBazMutationResolver,
            "path": "baz_mutation"
          }
        ]
      }
    ],
    "type": "NotCalledMutation",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "barMutation",
    "selections": [
      {
        "kind": "ClientExtension",
        "selections": [
          {
            "name": "baz_mutation",
            "args": null,
            "fragment": null,
            "kind": "RelayResolver",
            "storageKey": null,
            "isOutputType": true
          }
        ]
      }
    ]
  },
  "params": {
    "cacheID": "b7409af7b3a13247f776ad3f9192c84b",
    "id": null,
    "metadata": {},
    "name": "barMutation",
    "operationKind": "mutation",
    "text": null
  }
};

(node/*: any*/).hash = "bbe24bc0c4cab0597abfafef11f07b88";

export default ((node/*: any*/)/*: Mutation<
  barMutation$variables,
  barMutation$data,
>*/);
