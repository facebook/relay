Input:
var foo = Relay.QL`
  query CallValues {
    node(id: 123) {
      friends(
        first: 10,
        orderby: "Name",
        find: "cursor1",
        isViewerFriend: true,
        gender: MALE,
      ) {
        edges {
          node {
            id,
            firstName(if: true, unless: false),
          },
        },
      },
    },
  }
`;

Output:
var foo = (function () {
  var GraphQL = Relay.QL.__GraphQL;
  return new GraphQL.Query("node", new GraphQL.CallValue(123), [new GraphQL.Field("friends", [new GraphQL.Field("edges", [new GraphQL.Field("node", [new GraphQL.Field("id", null, null, null, null, null, {
    parentType: "User",
    requisite: true
  }), new GraphQL.Field("firstName", null, null, [new GraphQL.Callv("if", new GraphQL.CallValue(true)), new GraphQL.Callv("unless", new GraphQL.CallValue(false))], null, null, {
    parentType: "User"
  })], null, null, null, null, {
    parentType: "UserConnectionEdge",
    rootCall: "node",
    pk: "id",
    requisite: true
  }), new GraphQL.Field("cursor", null, null, null, null, null, {
    parentType: "UserConnectionEdge",
    generated: true,
    requisite: true
  })], null, null, null, null, {
    parentType: "UserConnection",
    plural: true
  }), new GraphQL.Field("pageInfo", [new GraphQL.Field("hasNextPage", null, null, null, null, null, {
    parentType: "PageInfo",
    generated: true,
    requisite: true
  }), new GraphQL.Field("hasPreviousPage", null, null, null, null, null, {
    parentType: "PageInfo",
    generated: true,
    requisite: true
  })], null, null, null, null, {
    parentType: "UserConnection",
    generated: true,
    requisite: true
  })], null, [new GraphQL.Callv("first", new GraphQL.CallValue(10)), new GraphQL.Callv("orderby", new GraphQL.CallValue("Name")), new GraphQL.Callv("find", new GraphQL.CallValue("cursor1")), new GraphQL.Callv("isViewerFriend", new GraphQL.CallValue(true)), new GraphQL.Callv("gender", new GraphQL.CallValue("MALE"), {
    type: "Gender"
  })], null, null, {
    parentType: "Node",
    connection: true
  }), new GraphQL.Field("id", null, null, null, null, null, {
    parentType: "Node",
    generated: true,
    requisite: true
  })], null, {
    rootArg: "id"
  }, "CallValues");
})();