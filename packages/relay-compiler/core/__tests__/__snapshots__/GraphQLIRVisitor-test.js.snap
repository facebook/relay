// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphQLIRVisitor matches expected output: mutate-nodes.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $cond: Boolean!
  $size: [Int]
) {
  node(id: $id) {
    id
    ... on Node @include(if: $cond) {
      ... on User {
        name
      }
    }
    ... on Node {
      ...UserFragment @arguments(size: $size)
    }
  }
}

fragment UserFragment on User @argumentDefinitions(
  after: {type: "ID"}
  cond: {type: "Boolean!", defaultValue: false}
  first: {type: "Int", defaultValue: 5}
  size: {type: "[Int]"}
) {
  ... on User @skip(if: $cond) {
    id
    __typename
    checkins(environments: [WEB]) {
      __typename
    }
    friends(after: $after, first: $first, traits: [HELPFUL]) {
      count
    }
    ... on User @include(if: $cond) {
      name
    }
    thumbnail: profilePicture(size: 32) {
      height
      width
      src: uri
    }
    profilePicture(size: $size) {
      height
      width
      src: uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery_mutated(
  $id_mutated: ID!
  $cond_mutated: Boolean!
  $size_mutated: [Int]
) {
  node_mutated(id_mutated: $id_mutated) {
    id_mutated
    ... on Mutated @skip(if: $cond_mutated) {
      ... on Mutated {
        name_mutated
      }
    }
    ... on Mutated {
      ...UserFragment_mutated @arguments(size_mutated: $size_mutated)
    }
  }
}

fragment UserFragment_mutated on User @argumentDefinitions(
  after_mutated: {type: "ID"}
  cond_mutated: {type: "Boolean!", defaultValue: false}
  first_mutated: {type: "Int", defaultValue: 5}
  size_mutated: {type: "[Int]"}
) {
  ... on Mutated @include(if: $cond_mutated) {
    id_mutated
    __typename_mutated
    checkins_mutated(environments_mutated: [MOBILE]) {
      __typename_mutated
    }
    friends_mutated(after_mutated: $after_mutated, first_mutated: $first_mutated, traits_mutated: [DERISIVE]) {
      count_mutated
    }
    ... on Mutated @skip(if: $cond_mutated) {
      name_mutated
    }
    thumbnail: profilePicture_mutated(size_mutated: 42) {
      height_mutated
      width_mutated
      src: uri_mutated
    }
    profilePicture_mutated(size_mutated: $size_mutated) {
      height_mutated
      width_mutated
      src: uri_mutated
    }
  }
}

`;

exports[`GraphQLIRVisitor matches expected output: no-op.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $cond: Boolean!
  $size: [Int]
) {
  node(id: $id) {
    id
    ... on Node @include(if: $cond) {
      ... on User {
        name
      }
    }
    ... on Node {
      ...UserFragment @arguments(size: $size)
    }
  }
}

fragment UserFragment on User @argumentDefinitions(
  after: {type: "ID"}
  cond: {type: "Boolean!", defaultValue: false}
  first: {type: "Int", defaultValue: 5}
  size: {type: "[Int]"}
) {
  ... on User @skip(if: $cond) {
    id
    __typename
    checkins(environments: [WEB]) {
      __typename
    }
    friends(after: $after, first: $first, traits: [HELPFUL]) {
      count
    }
    ... on User @include(if: $cond) {
      name
    }
    thumbnail: profilePicture(size: 32) {
      height
      width
      src: uri
    }
    profilePicture(size: $size) {
      height
      width
      src: uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
  $cond: Boolean!
  $size: [Int]
) {
  node(id: $id) {
    id
    ... on Node @include(if: $cond) {
      ... on User {
        name
      }
    }
    ... on Node {
      ...UserFragment @arguments(size: $size)
    }
  }
}

fragment UserFragment on User @argumentDefinitions(
  after: {type: "ID"}
  cond: {type: "Boolean!", defaultValue: false}
  first: {type: "Int", defaultValue: 5}
  size: {type: "[Int]"}
) {
  ... on User @skip(if: $cond) {
    id
    __typename
    checkins(environments: [WEB]) {
      __typename
    }
    friends(after: $after, first: $first, traits: [HELPFUL]) {
      count
    }
    ... on User @include(if: $cond) {
      name
    }
    thumbnail: profilePicture(size: 32) {
      height
      width
      src: uri
    }
    profilePicture(size: $size) {
      height
      width
      src: uri
    }
  }
}

`;
