type OtherFragment$ref = any;
type PictureFragment$ref = any;
type UserFrag1$ref = any;
type UserFrag2$ref = any;
import type { FragmentReference } from 'relay-runtime';
export opaque type FragmentSpread$ref: FragmentReference = FragmentReference;
export type FragmentSpread = {|
  +id: string,
  +justFrag: ?{|
    +__fragments: PictureFragment$ref,
  |},
  +fragAndField: ?{|
    +uri: ?string,
    +__fragments: PictureFragment$ref,
  |},
  +__fragments: (OtherFragment$ref & UserFrag1$ref & UserFrag2$ref),
  +$refType: FragmentSpread$ref,
|};

type PageFragment$ref = any;
import type { FragmentReference } from 'relay-runtime';
export opaque type ConcreateTypes$ref: FragmentReference = FragmentReference;
export type ConcreateTypes = {|
  +actor: ?({|
    +__typename: 'Page',
    +id: string,
    +__fragments: PageFragment$ref,
  |} | {|
    +__typename: 'User',
    +name: ?string,
  |} | {|
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    +__typename: '%other',
  |}),
  +$refType: ConcreateTypes$ref,
|};
