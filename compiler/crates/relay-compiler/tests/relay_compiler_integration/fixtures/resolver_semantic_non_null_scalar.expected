==================================== INPUT ====================================
//- User_foo.js
/**
 * @RelayResolver User.foo: String @semanticNonNull
 * @rootFragment UserFooFragment
 */
graphql`fragment UserFooFragment on User {
  bar
}`

//- User_bar.js
/**
 * @RelayResolver User.bar: String @semanticNonNull
 */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "featureFlags": {
    "enable_relay_resolver_transform": true,
    "enable_resolver_normalization_ast": true,
    "allow_resolver_non_nullable_return_type": { "kind": "enabled" }
  },
  "resolversSchemaModule": {
    "path": "__generated__/ResolversSchemaModule.js"
  },
  "experimentalEmitSemanticNullabilityTypes": true
}

//- schema.graphql
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/ResolversSchemaModule.js
/**
 * <auto-generated> SignedSource<<54ce4cdfe6beee06440d7f443e785e6b>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { SchemaResolvers } from 'ReactiveQueryExecutor';
import type { ResolverFunction, NormalizationSplitOperation } from 'relay-runtime';

*/

var schema_resolvers/*: SchemaResolvers*/ = {
  "User": {
    "bar": {
      "isNullable": false,
      "resolverFunction": require('User_bar').bar,
      "rootFragment": null
    },
    "foo": {
      "isNullable": false,
      "resolverFunction": require('User_foo').foo,
      "rootFragment": require('UserFooFragment$normalization.graphql')
    }
  }
};

module.exports = schema_resolvers;

//- __generated__/UserFooFragment$normalization.graphql.js
/**
 * <auto-generated> SignedSource<<adb51263ba225b9fd58941e22617c63b>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { NormalizationSplitOperation } from 'relay-runtime';

*/

var node/*: NormalizationSplitOperation*/ = {
  "kind": "SplitOperation",
  "metadata": {},
  "name": "UserFooFragment$normalization",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "name": "bar",
          "args": null,
          "kind": "RelayResolver",
          "storageKey": null,
          "isOutputType": true,
          "resolverInfo": {
            "isNullable": false,
            "resolverFunction": require('User_bar').bar,
            "rootFragment": null
          }
        }
      ]
    }
  ]
};

(node/*: any*/).hash = "285ee53d00b8def775c9e1ed756743bf";

module.exports = node;

//- __generated__/UserFooFragment.graphql.js
/**
 * <auto-generated> SignedSource<<acc03d9ca3ff5baca43d59fbddc1f6fe>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
import {bar as userBarResolverType} from "User_bar";
// Type assertion validating that `userBarResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userBarResolverType: () => string);
declare export opaque type UserFooFragment$fragmentType: FragmentType;
export type UserFooFragment$data = {|
  +bar: string,
  +$fragmentType: UserFooFragment$fragmentType,
|};
export type UserFooFragment$key = {
  +$data?: UserFooFragment$data,
  +$fragmentSpreads: UserFooFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "UserFooFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "bar",
          "resolverModule": require('User_bar').bar,
          "path": "bar"
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "285ee53d00b8def775c9e1ed756743bf";

module.exports = ((node/*: any*/)/*: Fragment<
  UserFooFragment$fragmentType,
  UserFooFragment$data,
>*/);
