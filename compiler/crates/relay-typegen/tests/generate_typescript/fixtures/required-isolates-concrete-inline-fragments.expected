==================================== INPUT ====================================
fragment Bar on Node {
  # Since __typename is omitted here, we will end up with a single object type
  # rather than a union type. Even though `name` is @required, it will still be
  # nullable in the collapsed object's type since the object may not match `User`.
  ... on User {
    name @required(action: LOG)
  }
  ... on Comment {
    body {
      text
    }
  }
}

fragment Foo on Node {
  __typename
  ... on User {
    # Ideally this would only cause the `__typename == 'User'` case to become
    # nullable, but currently it just makes the entire union type nullable. Not
    # ideal, but tollerable.
    name @required(action: LOG)
  }
  ... on Comment {
    body {
      text
    }
  }
}
==================================== OUTPUT ===================================
import { FragmentReference } from "relay-runtime";
export type Bar$ref = FragmentReference & { _: "Bar$ref" };
export type Bar$fragmentType = Bar$ref & { _: "Bar$fragmentType" };
export type Bar = {
  readonly name?: string,
  readonly body?: {
    readonly text?: string
  },
  readonly $refType: Bar$ref,
} | null;
export type Bar$data = Bar;
export type Bar$key = {
  readonly $data?: Bar$data,
  readonly $fragmentRefs: Bar$ref,
};
-------------------------------------------------------------------------------
import { FragmentReference } from "relay-runtime";
export type Foo$ref = FragmentReference & { _: "Foo$ref" };
export type Foo$fragmentType = Foo$ref & { _: "Foo$fragmentType" };
export type Foo = {
  readonly __typename: "User",
  readonly name: string,
  readonly $refType: Foo$ref,
} | {
  readonly __typename: "Comment",
  readonly body?: {
    readonly text?: string
  },
  readonly $refType: Foo$ref,
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other",
  readonly $refType: Foo$ref,
} | null;
export type Foo$data = Foo;
export type Foo$key = {
  readonly $data?: Foo$data,
  readonly $fragmentRefs: Foo$ref,
};
