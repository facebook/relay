// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayGenerateIDFieldTransform matches expected output: abstract-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query CommentQuery {
  node(id: "comment") {
    ... on Comment {
      actors {
        id
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query CommentQuery {
  node(id: "comment") {
    ... on Comment {
      actors {
        id
      }
    }
    id
  }
}

`;

exports[`RelayGenerateIDFieldTransform matches expected output: node-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query UnionQuery {
  maybeNode {
    # ... on Node { id } is autogenerated here because Node is a possible type
    ... on NonNode {
      name
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query UnionQuery {
  maybeNode {
    ... on NonNode {
      name
    }
    ... on Node {
      id
    }
    ... on FakeNode {
      id
    }
  }
}

`;

exports[`RelayGenerateIDFieldTransform matches expected output: non-node-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query UnionQuery {
  neverNode {
    # ... on Node { id } is not autogenerated here since no concrete type
    # implements Node
    ... on NonNode {
      name
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query UnionQuery {
  neverNode {
    ... on NonNode {
      name
    }
    ... on FakeNode {
      id
    }
  }
}

`;

exports[`RelayGenerateIDFieldTransform matches expected output: query-with-fragment-variables.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery($id: ID!) {
  node(id: $id) {
    ... on FeedUnit {
      actor {
        ...ActorFragment
      }
    }
  }
}

query ViewerQuery {
  viewer {
    actor {
      ...ActorFragment
    }
  }
}

fragment ActorFragment on Actor {
  name
  ... on User {
    birthdate {
      day
      month
    }
  }
}

query UnaliasedIDQuery {
  viewer {
    actor {
      id
    }
  }
}

query AliasedIDQuery {
  viewer {
    actor {
      _id: id
    }
  }
}

query ConditionalIDQuery($cond: Boolean!) {
  viewer {
    actor {
      id @include(if: $cond)
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    ... on FeedUnit {
      actor {
        ...ActorFragment
        id
      }
    }
    id
  }
}

query ViewerQuery {
  viewer {
    actor {
      ...ActorFragment
      id
    }
  }
}

fragment ActorFragment on Actor {
  name
  ... on User {
    birthdate {
      day
      month
    }
  }
}

query UnaliasedIDQuery {
  viewer {
    actor {
      id
    }
  }
}

query AliasedIDQuery {
  viewer {
    actor {
      _id: id
      id
    }
  }
}

query ConditionalIDQuery(
  $cond: Boolean!
) {
  viewer {
    actor {
      id @include(if: $cond)
      id
    }
  }
}

`;
