==================================== INPUT ====================================
fragment Bar on Node {
  # Since __typename is omitted here, we will end up with a single object type
  # rather than a union type. Even though `name` is @required, it will still be
  # nullable in the collapsed object's type since the object may not match `User`.
  ... on User {
    name @required(action: LOG)
  }
  ... on Comment {
    body {
      text
    }
  }
}

fragment Foo on Node {
  __typename
  ... on User {
    # Ideally this would only cause the `__typename == 'User'` case to become
    # nullable, but currently it just makes the entire union type nullable. Not
    # ideal, but tollerable.
    name @required(action: LOG)
  }
  ... on Comment {
    body {
      text
    }
  }
}
==================================== OUTPUT ===================================
import { FragmentRefs } from "relay-runtime";
export type Bar$data = {
  readonly body?: {
    readonly text: string | null | undefined;
  } | null | undefined;
  readonly name?: string;
  readonly " $fragmentType": "Bar";
} | null | undefined;
export type Bar$key = {
  readonly " $data"?: Bar$data;
  readonly " $fragmentSpreads": FragmentRefs<"Bar">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type Foo$data = {
  readonly __typename: "Comment";
  readonly body: {
    readonly text: string | null | undefined;
  } | null | undefined;
  readonly " $fragmentType": "Foo";
} | {
  readonly __typename: "User";
  readonly name: string;
  readonly " $fragmentType": "Foo";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "Foo";
} | null | undefined;
export type Foo$key = {
  readonly " $data"?: Foo$data;
  readonly " $fragmentSpreads": FragmentRefs<"Foo">;
};
