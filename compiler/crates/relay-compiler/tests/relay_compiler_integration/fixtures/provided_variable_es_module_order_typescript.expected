==================================== INPUT ====================================
//- foo.ts
graphql`
  fragment fooFragment on User
  @argumentDefinitions(
    include_name: { type: "Boolean!", provider: "file_provider.relayprovider" }
  ) {
    name @include(if: $include_name)
  }
`;

graphql`
  query fooQuery {
    me {
      ...fooFragment
    }
  }
`;

//- relay.config.json
{
  "language": "typescript",
  "schema": "./schema.graphql",
  "persistConfig": {
    "file": "./operations.json"
  }
}

//- operations.json
{}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/fooFragment.graphql.ts
/**
 * <auto-generated> SignedSource<<65acba0c4ce4788898e168e734785f31>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { ReaderFragment } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type fooFragment$data = {
  readonly name?: string | null | undefined;
  readonly " $fragmentType": "fooFragment";
};
export type fooFragment$key = {
  readonly " $data"?: fooFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"fooFragment">;
};

const node: ReaderFragment = {
  "argumentDefinitions": [
    {
      "kind": "RootArgument",
      "name": "__relay_internal__pv__file_providerrelayprovider"
    }
  ],
  "kind": "Fragment",
  "metadata": null,
  "name": "fooFragment",
  "selections": [
    {
      "condition": "__relay_internal__pv__file_providerrelayprovider",
      "kind": "Condition",
      "passingValue": true,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "name",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node as any).hash = "dd53189c36479d06985d3563c2d63f01";

export default node;

//- __generated__/fooQuery.graphql.ts
/**
 * <auto-generated> SignedSource<<d81688281fdb38917a30559903c1525c>>
 * @relayHash 2b03c747123dea92f442dface0a8a0ce
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

// @relayRequestID 2b03c747123dea92f442dface0a8a0ce

import include_name_provider from 'file_provider.relayprovider';

import { ConcreteRequest } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type fooQuery$variables = Record<PropertyKey, never>;
export type fooQuery$data = {
  readonly me: {
    readonly " $fragmentSpreads": FragmentRefs<"fooFragment">;
  } | null | undefined;
};
export type fooQuery = {
  response: fooQuery$data;
  variables: fooQuery$variables;
};
({
  "__relay_internal__pv__file_providerrelayprovider": include_name_provider
} as {
  readonly __relay_internal__pv__file_providerrelayprovider: {
    readonly get: () => boolean;
  };
});

const node: ConcreteRequest = {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "fooFragment"
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "__relay_internal__pv__file_providerrelayprovider"
      }
    ],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "condition": "__relay_internal__pv__file_providerrelayprovider",
            "kind": "Condition",
            "passingValue": true,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "name",
                "storageKey": null
              }
            ]
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "id": "2b03c747123dea92f442dface0a8a0ce",
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": null,
    "providedVariables": {
      "__relay_internal__pv__file_providerrelayprovider": include_name_provider
    }
  }
};

(node as any).hash = "e71174c8b12bceec3303388425129efc";

export default node;
