==================================== INPUT ====================================
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

//- module.js

import type CatFlowType from 'Cat';

/**
 * @RelayResolver
 */
export function Cat(id: DataID): CatFlowType {
  return {};
}


/**
 * @RelayResolver
 */
export function name(id: CatFlowType | DogFlowType): boolean {
  return {};
}
==================================== OUTPUT ===================================
Type(
    StrongObjectResolver(
        StrongObjectIr {
            type_name: Identifier {
                span: 272:275,
                token: Token {
                    span: 272:275,
                    kind: Identifier,
                },
                value: "Cat",
            },
            rhs_location: module.js:272:275,
            root_fragment: WithLocation {
                location: module.js:272:275,
                item: FragmentDefinitionName(
                    "Cat__id",
                ),
            },
            description: None,
            deprecated: None,
            live: None,
            semantic_non_null: None,
            location: module.js:272:275,
            implements_interfaces: [],
            source_hash: ResolverSourceHash(
                "dbaa81766321d75c0da7fa6c70895562",
            ),
        },
    ),
)
type Cat @__RelayResolverModel {
  id: ID!
  __relay_model_instance: RelayResolverValue! @relay_resolver(generated_fragment: true, fragment_name: "Cat__id", import_name: "Cat", import_path: "module.js", inject_fragment_data: "id") @resolver_source_hash(value: "dbaa81766321d75c0da7fa6c70895562") @unselectable(reason: "This field is intended only for Relay's internal use")
}


✖︎ UnionTypeAnnotation is not supported

  module.js:22:26
   21 │  */
   22 │ export function name(id: CatFlowType | DogFlowType): boolean {
      │                          ^^^^^^^^^^^^^^^^^^^^^^^^^
   23 │   return {};
