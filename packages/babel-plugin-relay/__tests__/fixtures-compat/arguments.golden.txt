/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule CompatProfile
 */

'use strict';

const RelayCompatContainer = require('RelayCompatContainer');
const graphql = require('graphql');

const CompatProfilePic = () => null;

module.exports = RelayCompatContainer.createContainer(CompatProfilePic, {
  passing: {
    modern: function () {
      return require('./__generated__/CompatProfile_passing.graphql');
    },
    classic: function (RelayQL_GENERATED) {
      const ProfilePic_user_args1 = ProfilePic.getFragment('user', {
        size: 40,
        scale: 1.5,
        title: 'Photo'
      }),
            ProfilePic_user_args2 = ProfilePic.getFragment('user', {
        size: {
          kind: 'CallVariable',
          callVariableName: 'pictureSize'
        }
      });
      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [{
          kind: 'RootArgument',
          name: 'pictureSize'
        }],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }, RelayQL_GENERATED.__frag(ProfilePic_user_args1), RelayQL_GENERATED.__frag(ProfilePic_user_args2)]),
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'CompatProfile_passing',
            type: 'User'
          };
        }()
      };
    }
  },
  receiving: {
    modern: function () {
      return require('./__generated__/CompatProfile_receiving.graphql');
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [{
          defaultValue: 5,
          kind: 'LocalArgument',
          name: 'first'
        }, {
          defaultValue: 'john',
          kind: 'LocalArgument',
          name: 'named'
        }, {
          defaultValue: 1.5,
          kind: 'LocalArgument',
          name: 'scale'
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: 'Call',
                metadata: {
                  type: 'Int'
                },
                name: 'first',
                value: {
                  kind: 'CallVariable',
                  callVariableName: 'first'
                }
              }, {
                kind: 'Call',
                metadata: {},
                name: 'named',
                value: {
                  kind: 'CallVariable',
                  callVariableName: 'named'
                }
              }, {
                kind: 'Call',
                metadata: {
                  type: 'Float'
                },
                name: 'scale',
                value: {
                  kind: 'CallVariable',
                  callVariableName: 'scale'
                }
              }],
              children: [{
                fieldName: 'count',
                kind: 'Field',
                metadata: {},
                type: 'Int'
              }],
              fieldName: 'friends',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                isConnection: true,
                isFindable: true
              },
              type: 'FriendsConnection'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'CompatProfile_receiving',
            type: 'User'
          };
        }()
      };
    }
  },
  passingWithDefault: {
    modern: function () {
      return require('./__generated__/CompatProfile_passingWithDefault.graphql');
    },
    classic: function (RelayQL_GENERATED) {
      const ProfilePic_user_args1 = ProfilePic.getFragment('user', {
        size: {
          kind: 'CallVariable',
          callVariableName: 'withDefault'
        },
        scale: {
          kind: 'CallVariable',
          callVariableName: 'noDefault'
        }
      });
      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [{
          defaultValue: 100,
          kind: 'LocalArgument',
          name: 'withDefault'
        }, {
          defaultValue: null,
          kind: 'LocalArgument',
          name: 'noDefault'
        }],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }, RelayQL_GENERATED.__frag(ProfilePic_user_args1)]),
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'CompatProfile_passingWithDefault',
            type: 'User'
          };
        }()
      };
    }
  },
  receivingGlobals: {
    modern: function () {
      return require('./__generated__/CompatProfile_receivingGlobals.graphql');
    },
    classic: function (RelayQL_GENERATED) {
      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [{
          kind: 'RootArgument',
          name: 'friendsCount'
        }],
        node: function () {
          return {
            children: [{
              calls: [{
                kind: 'Call',
                metadata: {
                  type: 'Int'
                },
                name: 'first',
                value: {
                  kind: 'CallVariable',
                  callVariableName: 'friendsCount'
                }
              }],
              children: [{
                fieldName: 'count',
                kind: 'Field',
                metadata: {},
                type: 'Int'
              }],
              fieldName: 'friends',
              kind: 'Field',
              metadata: {
                canHaveSubselections: true,
                isConnection: true,
                isFindable: true
              },
              type: 'FriendsConnection'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }],
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {},
            name: 'CompatProfile_receivingGlobals',
            type: 'User'
          };
        }()
      };
    }
  }
});
