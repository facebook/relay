// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-client-fileds-inside-valid-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment @defer(label: "DeferredFragmentLabel")
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...DeferredFragment
}

fragment DeferredFragment on ClientUser {
  clientname
}

interface ClientUser {
  id: String
  clientname: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-defer-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...DeferredFragment @defer(label: "DeferredFragmentLabel")
}

fragment DeferredFragment on ClientUser {
  clientname
}

interface ClientUser {
  id: String
  clientname: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @defer. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (12:23)
  11:   emailAddresses
  12:   ...DeferredFragment @defer(label: "DeferredFragmentLabel")
                            ^
  13: }
  
  Source (derived): GraphQL request (12:3)
  11:   emailAddresses
  12:   ...DeferredFragment @defer(label: "DeferredFragmentLabel")
        ^
  13: }
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-defer-on-fragment-with-only-client-fields.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment @defer(label: "DeferredFragmentLabel")
  }
}

fragment UserFragment on User {
  clientField
}

extend type User {
  clientField: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @defer. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (5:21)
  4:     id
  5:     ...UserFragment @defer(label: "DeferredFragmentLabel")
                         ^
  6:   }
  
  Source: GraphQL request (10:3)
   9: fragment UserFragment on User {
  10:   clientField
        ^
  11: }
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-stream-child-of-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithStream($id: ID!) {
  node(id: $id) {
    id
    ...FeedbackFragment
  }
}

fragment FeedbackFragment on Feedback {
  id
  foo {
    bar {
      users @stream(initial_count: 1, label: "StreamedActorsLabel") {
        id
        name
      }
    }
  }
}

extend type Feedback {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  users: [User]
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (13:13)
  12:     bar {
  13:       users @stream(initial_count: 1, label: "StreamedActorsLabel") {
                  ^
  14:         id
  
  Source: GraphQL request (11:3)
  10:   id
  11:   foo {
        ^
  12:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-stream-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithStream($id: ID!) {
  node(id: $id) {
    id
    ...FeedbackFragment
  }
}

fragment FeedbackFragment on Feedback {
  id
  foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
    bar
  }
}

extend type Feedback {
  foos: [Foo]
}

type Foo {
  bar: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (11:8)
  10:   id
  11:   foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
             ^
  12:     bar
  
  Source: GraphQL request (11:3)
  10:   id
  11:   foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
        ^
  12:     bar
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: match.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  client_text
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  client_text
  data {
    markup
  }
}

query TestQuery {
  node(id: "1") {
    ...ActorsRendererFragment
  }
}

extend type PlainUserNameRenderer {
  client_text: String
}

extend type MarkdownUserNameRenderer {
  client_text: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        nameRenderer @match {
          ...PlainUserNameRenderer_name
            @module(name: "PlainUserNameRenderer.react")
          ...MarkdownUserNameRenderer_name
            @module(name: "MarkdownUserNameRenderer.react")
        }
      }
    }
  }
}

extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query Test {
  me {
    ...NameRendererFragment
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client-in-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}

fragment SomeUser on User {
  nameRenderer {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        ...SomeUser
      }
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query TestQuery {
  ...NameRendererFragment
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: stream-connection-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery($id: ID!) {
  node(id: $id) {
    id
    ... on Story {
      clientComments(first: 10)
        @stream_connection(
          key: "NodeQuery_clientComments"
          initial_count: 0
          label: "comments"
        ) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
}

extend type Story {
  clientComments(first: Int, last: Int, orderby: String): CommentsConnection
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (7:9)
  6:       clientComments(first: 10)
  7:         @stream_connection(
             ^
  8:           key: "NodeQuery_clientComments"
  
  Source: GraphQL request (6:7)
  5:     ... on Story {
  6:       clientComments(first: 10)
           ^
  7:         @stream_connection(
  
`;
