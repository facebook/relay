==================================== INPUT ====================================
query abstractTypeRefinementDontFlattenTypeDiscriminatorInlineFragmentConditional_AbstractTypeRefinementQuery($shouldInclude: Boolean!) {
  node(id: "4") {
    ... @include(if: $shouldInclude) {
      #  - Printed query should select __isNode
      #  - Normalization ast should include inline fragment with abstractKey
      ... on Node {
        id
      }
    }
  }
}
==================================== OUTPUT ===================================
{
  "fragment": {
    "argumentDefinitions": [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "shouldInclude"
      }
    ],
    "kind": "Fragment",
    "metadata": null,
    "name": "abstractTypeRefinementDontFlattenTypeDiscriminatorInlineFragmentConditional_AbstractTypeRefinementQuery",
    "selections": [
      {
        "alias": null,
        "args": [
          {
            "kind": "Literal",
            "name": "id",
            "value": "4"
          }
        ],
        "concreteType": null,
        "kind": "LinkedField",
        "name": "node",
        "plural": false,
        "selections": [
          {
            "condition": "shouldInclude",
            "kind": "Condition",
            "passingValue": true,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "id",
                "storageKey": null
              }
            ]
          }
        ],
        "storageKey": "node(id:\"4\")"
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [
      {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "shouldInclude"
      }
    ],
    "kind": "Operation",
    "name": "abstractTypeRefinementDontFlattenTypeDiscriminatorInlineFragmentConditional_AbstractTypeRefinementQuery",
    "selections": [
      {
        "alias": null,
        "args": [
          {
            "kind": "Literal",
            "name": "id",
            "value": "4"
          }
        ],
        "concreteType": null,
        "kind": "LinkedField",
        "name": "node",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "__typename",
            "storageKey": null
          },
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "id",
            "storageKey": null
          },
          {
            "condition": "shouldInclude",
            "kind": "Condition",
            "passingValue": true,
            "selections": [
              {
                "kind": "TypeDiscriminator",
                "abstractKey": "__isNode"
              }
            ]
          }
        ],
        "storageKey": "node(id:\"4\")"
      }
    ]
  },
  "params": {
    "id": null,
    "metadata": {},
    "name": "abstractTypeRefinementDontFlattenTypeDiscriminatorInlineFragmentConditional_AbstractTypeRefinementQuery",
    "operationKind": "query",
    "text": null
  }
}

QUERY:

query abstractTypeRefinementDontFlattenTypeDiscriminatorInlineFragmentConditional_AbstractTypeRefinementQuery(
  $shouldInclude: Boolean!
) {
  node(id: "4") {
    __typename
    __isNode: __typename @include(if: $shouldInclude)
    id @include(if: $shouldInclude)
    id
  }
}
