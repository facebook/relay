==================================== INPUT ====================================
# relay:experimental_emit_semantic_nullability_types
fragment MyFragment on ClientUser @throwOnFieldError {
  nullable_name @required(action: LOG)
  resolver_name @required(action: LOG)
}

%extensions%

type ClientUser {
  nullable_name: String
  resolver_name: RelayResolverValue @relay_resolver(import_path: "CatResolver")
}
==================================== OUTPUT ===================================
import type { FragmentType } from "relay-runtime";
import clientUserResolverNameResolverType from "CatResolver";
// Type assertion validating that `clientUserResolverNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserResolverNameResolverType: () => ?mixed);
declare export opaque type MyFragment$fragmentType: FragmentType;
export type MyFragment$data = ?{|
  +nullable_name: string,
  +resolver_name: $NonMaybeType<ReturnType<typeof clientUserResolverNameResolverType>>,
  +$fragmentType: MyFragment$fragmentType,
|};
export type MyFragment$key = {
  +$data?: MyFragment$data,
  +$fragmentSpreads: MyFragment$fragmentType,
  ...
};
