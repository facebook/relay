==================================== INPUT ====================================
//- foo.js
graphql`query fooQuery @throwOnFieldError {
  # This does not need @catch because it is a resolver
  clientUser {
    # This does not need @catch because it was generated by
    # a strong resolver
    id
  }
}`

/**
 * @RelayResolver ClientUser
 * A strong type
 */

 /**
  * @RelayResolver Query.clientUser: ClientUser
  * Resolver that returns ClientUser
  */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ]
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql

extend type Query {
  client_field: String
}
==================================== OUTPUT ===================================
//- __generated__/ClientUser____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<5a5913417956881a9f1ba2e4920fbd92>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { ClientUser__id$data } from "ClientUser__id.graphql";
import type { FragmentType } from "relay-runtime";
import {ClientUser as clientUserRelayModelInstanceResolverType} from "foo";
// Type assertion validating that `clientUserRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserRelayModelInstanceResolverType: (
  id: ClientUser__id$data['id'],
) => mixed);
declare export opaque type ClientUser____relay_model_instance$fragmentType: FragmentType;
export type ClientUser____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof clientUserRelayModelInstanceResolverType>>,
  +$fragmentType: ClientUser____relay_model_instance$fragmentType,
|};
export type ClientUser____relay_model_instance$key = {
  +$data?: ClientUser____relay_model_instance$data,
  +$fragmentSpreads: ClientUser____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "ClientUser__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('ClientUser__id.graphql'), require('foo').ClientUser, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  ClientUser____relay_model_instance$fragmentType,
  ClientUser____relay_model_instance$data,
>*/);

//- __generated__/ClientUser__id.graphql.js
/**
 * <auto-generated> SignedSource<<aa138ff9a603134783b8fee0d63fe5d7>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type ClientUser__id$fragmentType: FragmentType;
export type ClientUser__id$data = {|
  +id: string,
  +$fragmentType: ClientUser__id$fragmentType,
|};
export type ClientUser__id$key = {
  +$data?: ClientUser__id$data,
  +$fragmentSpreads: ClientUser__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ClientUser__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "ClientUser",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  ClientUser__id$fragmentType,
  ClientUser__id$data,
>*/);

//- __generated__/fooQuery.graphql.js
/**
 * <auto-generated> SignedSource<<224699c54aa3794c393a7f5145c8f9a5>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, ClientQuery } from 'relay-runtime';
import type { DataID } from "relay-runtime";
import {clientUser as queryClientUserResolverType} from "foo";
// Type assertion validating that `queryClientUserResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(queryClientUserResolverType: () => ?{|
  +id: DataID,
|});
export type fooQuery$variables = {||};
export type fooQuery$data = {|
  +clientUser: ?{|
    +id: string,
  |},
|};
export type fooQuery = {|
  response: fooQuery$data,
  variables: fooQuery$variables,
|};
*/

var node/*: ClientRequest*/ = (function(){
var v0 = {
  "alias": null,
  "args": null,
  "concreteType": "ClientUser",
  "kind": "LinkedField",
  "name": "clientUser",
  "plural": false,
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "id",
      "storageKey": null
    }
  ],
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": {
      "hasClientEdges": true,
      "throwOnFieldError": true
    },
    "name": "fooQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "concreteType": "ClientUser",
        "modelResolvers": {
          "ClientUser": {
            "alias": null,
            "args": null,
            "fragment": {
              "args": null,
              "kind": "FragmentSpread",
              "name": "ClientUser__id"
            },
            "kind": "RelayResolver",
            "name": "clientUser",
            "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('ClientUser__id.graphql'), require('foo').ClientUser, 'id', true),
            "path": "clientUser.__relay_model_instance"
          }
        },
        "backingField": {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "clientUser",
          "resolverModule": require('foo').clientUser,
          "path": "clientUser"
        },
        "linkedField": (v0/*: any*/)
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "backingField": {
          "name": "clientUser",
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "storageKey": null,
          "isOutputType": false
        },
        "linkedField": (v0/*: any*/)
      }
    ]
  },
  "params": {
    "cacheID": "b4419e844fe6e6b6a0c48c1d2e9e7fc8",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": null
  }
};
})();

(node/*: any*/).hash = "a96f54d4f51f87ef55b7e2d6bc0c31be";

module.exports = ((node/*: any*/)/*: ClientQuery<
  fooQuery$variables,
  fooQuery$data,
>*/);
