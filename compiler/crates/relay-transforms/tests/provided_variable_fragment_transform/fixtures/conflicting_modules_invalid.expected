==================================== INPUT ====================================
# expected-to-throw
fragment TestFragmentA on User
  @argumentDefinitions(
    var1: {type: "[Int]", provider: "varProvider"}
    var2: {type: "[Int]", provider: "../varProvider"}
    var3: {type: "[Int]", provider: "var-Provider"}
    var4: {type: "[Int]", provider: "var+Provider"}
    var5: {type: "[Int]", provider: "var.Provider"}
    var6: {type: "[Int]", provider: "var(Provider"}
    var7: {type: "[Int]", provider: "var)Provider"}
    var8: {type: "[Int]", provider: "var,Provider"}
    var9: {type: "[Int]", provider: "var Provider"}
) {
    picture1: profilePicture(size: $var1) {
        uri
    }
    picture2: profilePicture(size: $var2) {
        uri
    }
    picture3: profilePicture(size: $var3) {
        uri
    }
    picture4: profilePicture(size: $var4) {
        uri
    }
    picture5: profilePicture(size: $var5) {
        uri
    }
    picture6: profilePicture(size: $var6) {
        uri
    }
    picture7: profilePicture(size: $var7) {
        uri
    }
    picture8: profilePicture(size: $var8) {
        uri
    }
    picture9: profilePicture(size: $var9) {
        uri
    }
}

fragment TestFragmentB on User
  @argumentDefinitions(
    var_other: {type: "[Int]", provider: "var  Provider"}
  ) {
    picture1: profilePicture(size: $var_other) {
        uri
    }
}
==================================== ERROR ====================================
[31mâœ–ï¸Ž Modules '../varProvider' and 'var  Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:45:5[0m
[1m   44 â”‚ [0m  @argumentDefinitions(
[1m   45 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m_[0m[31mo[0m[31mt[0m[31mh[0m[31me[0m[31mr[0m: {type: "[Int]", provider: "var  Provider"}
      â”‚ [31m    ^^^^^^^^^[0m
[1m   46 â”‚ [0m  ) {


[31mâœ–ï¸Ž Modules '../varProvider' and 'var Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:12:5[0m
[1m   11 â”‚ [0m    var8: {type: "[Int]", provider: "var,Provider"}
[1m   12 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m9[0m: {type: "[Int]", provider: "var Provider"}
      â”‚ [31m    ^^^^[0m
[1m   13 â”‚ [0m) {


[31mâœ–ï¸Ž Modules '../varProvider' and 'var(Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:9:5[0m
[1m    8 â”‚ [0m    var5: {type: "[Int]", provider: "var.Provider"}
[1m    9 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m6[0m: {type: "[Int]", provider: "var(Provider"}
      â”‚ [31m    ^^^^[0m
[1m   10 â”‚ [0m    var7: {type: "[Int]", provider: "var)Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'var)Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:10:5[0m
[1m    9 â”‚ [0m    var6: {type: "[Int]", provider: "var(Provider"}
[1m   10 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m7[0m: {type: "[Int]", provider: "var)Provider"}
      â”‚ [31m    ^^^^[0m
[1m   11 â”‚ [0m    var8: {type: "[Int]", provider: "var,Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'var+Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:7:5[0m
[1m    6 â”‚ [0m    var3: {type: "[Int]", provider: "var-Provider"}
[1m    7 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m4[0m: {type: "[Int]", provider: "var+Provider"}
      â”‚ [31m    ^^^^[0m
[1m    8 â”‚ [0m    var5: {type: "[Int]", provider: "var.Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'var,Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:11:5[0m
[1m   10 â”‚ [0m    var7: {type: "[Int]", provider: "var)Provider"}
[1m   11 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m8[0m: {type: "[Int]", provider: "var,Provider"}
      â”‚ [31m    ^^^^[0m
[1m   12 â”‚ [0m    var9: {type: "[Int]", provider: "var Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'var-Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:6:5[0m
[1m    5 â”‚ [0m    var2: {type: "[Int]", provider: "../varProvider"}
[1m    6 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m3[0m: {type: "[Int]", provider: "var-Provider"}
      â”‚ [31m    ^^^^[0m
[1m    7 â”‚ [0m    var4: {type: "[Int]", provider: "var+Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'var.Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:8:5[0m
[1m    7 â”‚ [0m    var4: {type: "[Int]", provider: "var+Provider"}
[1m    8 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m5[0m: {type: "[Int]", provider: "var.Provider"}
      â”‚ [31m    ^^^^[0m
[1m    9 â”‚ [0m    var6: {type: "[Int]", provider: "var(Provider"}


[31mâœ–ï¸Ž Modules '../varProvider' and 'varProvider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflicting_modules_invalid.graphql[0m[2m:4:5[0m
[1m    3 â”‚ [0m  @argumentDefinitions(
[1m    4 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]", provider: "varProvider"}
      â”‚ [31m    ^^^^[0m
[1m    5 â”‚ [0m    var2: {type: "[Int]", provider: "../varProvider"}
