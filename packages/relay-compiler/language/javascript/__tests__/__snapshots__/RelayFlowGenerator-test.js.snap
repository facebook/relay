// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayFlowGenerator matches expected output: conditional.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ConditionField on Node {
  id @include(if: $condition)
}

fragment NestedCondition on Node {
  ... @include(if: $condition) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type ConditionField$ref: FragmentReference;
declare export opaque type ConditionField$fragmentType: ConditionField$ref;
export type ConditionField = {|
  +id?: string,
  +$refType: ConditionField$ref,
|};
export type ConditionField$data = ConditionField;
export type ConditionField$key = {
  +$data?: ConditionField$data,
  +$fragmentRefs: ConditionField$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type NestedCondition$ref: FragmentReference;
declare export opaque type NestedCondition$fragmentType: NestedCondition$ref;
export type NestedCondition = {|
  +id?: string,
  +$refType: NestedCondition$ref,
|};
export type NestedCondition$data = NestedCondition;
export type NestedCondition$key = {
  +$data?: NestedCondition$data,
  +$fragmentRefs: NestedCondition$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: fragment-spread.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment FragmentSpread on Node {
  id
  ...OtherFragment
  justFrag: profilePicture {
    ...PictureFragment
  }
  fragAndField: profilePicture {
    uri
    ...PictureFragment
  }
  ... on User {
    ...UserFrag1
    ...UserFrag2
  }
}

fragment ConcreateTypes on Viewer {
  actor {
    __typename
    ... on Page {
      id
      ...PageFragment
    }
    ... on User {
      name
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
type OtherFragment$ref = any;
type PictureFragment$ref = any;
type UserFrag1$ref = any;
type UserFrag2$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +justFrag: ?{|
    +$fragmentRefs: PictureFragment$ref
  |},
  +fragAndField: ?{|
    +uri: ?string,
    +$fragmentRefs: PictureFragment$ref,
  |},
  +$fragmentRefs: OtherFragment$ref & UserFrag1$ref & UserFrag2$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
};

type PageFragment$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type ConcreateTypes$ref: FragmentReference;
declare export opaque type ConcreateTypes$fragmentType: ConcreateTypes$ref;
export type ConcreateTypes = {|
  +actor: ?({|
    +__typename: "Page",
    +id: string,
    +$fragmentRefs: PageFragment$ref,
  |} | {|
    +__typename: "User",
    +name: ?string,
  |} | {|
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    +__typename: "%other"
  |}),
  +$refType: ConcreateTypes$ref,
|};
export type ConcreateTypes$data = ConcreateTypes;
export type ConcreateTypes$key = {
  +$data?: ConcreateTypes$data,
  +$fragmentRefs: ConcreateTypes$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: inline-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment InlineFragment on Node {
  id
  ... on Actor {
    id
    name
  }
  ... on User {
    message {
      text
    }
  }
}

fragment InlineFragmentWithOverlappingFields on Actor {
  ... on User {
    hometown {
      id
      name
    }
  }
  ... on Page {
    name
    hometown {
      id
      message {
        text
      }
    }
  }
}

fragment InlineFragmentConditionalID on Node {
  ... on Actor {
    id # nullable since it's conditional
    name
  }
}

fragment InlineFragmentKitchenSink on Story {
  actor {
    id
    profilePicture {
      uri
    }
    ... on User {
      id
      name
      ...SomeFragment
      profilePicture {
        width
      }
    }
    ... on Page {
      profilePicture {
        uri
        height
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type InlineFragment$ref: FragmentReference;
declare export opaque type InlineFragment$fragmentType: InlineFragment$ref;
export type InlineFragment = {|
  +id: string,
  +name?: ?string,
  +message?: ?{|
    +text: ?string
  |},
  +$refType: InlineFragment$ref,
|};
export type InlineFragment$data = InlineFragment;
export type InlineFragment$key = {
  +$data?: InlineFragment$data,
  +$fragmentRefs: InlineFragment$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type InlineFragmentWithOverlappingFields$ref: FragmentReference;
declare export opaque type InlineFragmentWithOverlappingFields$fragmentType: InlineFragmentWithOverlappingFields$ref;
export type InlineFragmentWithOverlappingFields = {|
  +hometown?: ?{|
    +id: string,
    +name: ?string,
    +message?: ?{|
      +text: ?string
    |},
  |},
  +name?: ?string,
  +$refType: InlineFragmentWithOverlappingFields$ref,
|};
export type InlineFragmentWithOverlappingFields$data = InlineFragmentWithOverlappingFields;
export type InlineFragmentWithOverlappingFields$key = {
  +$data?: InlineFragmentWithOverlappingFields$data,
  +$fragmentRefs: InlineFragmentWithOverlappingFields$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type InlineFragmentConditionalID$ref: FragmentReference;
declare export opaque type InlineFragmentConditionalID$fragmentType: InlineFragmentConditionalID$ref;
export type InlineFragmentConditionalID = {|
  +id?: string,
  +name?: ?string,
  +$refType: InlineFragmentConditionalID$ref,
|};
export type InlineFragmentConditionalID$data = InlineFragmentConditionalID;
export type InlineFragmentConditionalID$key = {
  +$data?: InlineFragmentConditionalID$data,
  +$fragmentRefs: InlineFragmentConditionalID$ref,
};

type SomeFragment$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type InlineFragmentKitchenSink$ref: FragmentReference;
declare export opaque type InlineFragmentKitchenSink$fragmentType: InlineFragmentKitchenSink$ref;
export type InlineFragmentKitchenSink = {|
  +actor: ?{|
    +id: string,
    +profilePicture: ?{|
      +uri: ?string,
      +width?: ?number,
      +height?: ?number,
    |},
    +name?: ?string,
    +$fragmentRefs: SomeFragment$ref,
  |},
  +$refType: InlineFragmentKitchenSink$ref,
|};
export type InlineFragmentKitchenSink$data = InlineFragmentKitchenSink;
export type InlineFragmentKitchenSink$key = {
  +$data?: InlineFragmentKitchenSink$data,
  +$fragmentRefs: InlineFragmentKitchenSink$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: linked-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedField on User {
  profilePicture {
    uri
    width
    height
  }
  hometown {
    # object
    id
    profilePicture {
      uri
    }
  }
  actor {
    # interface
    id
  }
}

query UnionTypeTest {
  neverNode {
    __typename
    ... on FakeNode {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type LinkedField$ref: FragmentReference;
declare export opaque type LinkedField$fragmentType: LinkedField$ref;
export type LinkedField = {|
  +profilePicture: ?{|
    +uri: ?string,
    +width: ?number,
    +height: ?number,
  |},
  +hometown: ?{|
    +id: string,
    +profilePicture: ?{|
      +uri: ?string
    |},
  |},
  +actor: ?{|
    +id: string
  |},
  +$refType: LinkedField$ref,
|};
export type LinkedField$data = LinkedField;
export type LinkedField$key = {
  +$data?: LinkedField$data,
  +$fragmentRefs: LinkedField$ref,
};

export type UnionTypeTestVariables = {||};
export type UnionTypeTestResponse = {|
  +neverNode: ?({|
    +__typename: "FakeNode",
    +id: string,
  |} | {|
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    +__typename: "%other"
  |})
|};
export type UnionTypeTest = {|
  variables: UnionTypeTestVariables,
  response: UnionTypeTestResponse,
|};
`;

exports[`RelayFlowGenerator matches expected output: match-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
type MarkdownUserNameRenderer_name$ref = any;
type PlainUserNameRenderer_name$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type NameRendererFragment$ref: FragmentReference;
declare export opaque type NameRendererFragment$fragmentType: NameRendererFragment$ref;
export type NameRendererFragment = {|
  +id: string,
  +nameRenderer: ?{|
    +__fragmentPropName?: ?string,
    +__module_component?: ?string,
    +$fragmentRefs: PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  |},
  +$refType: NameRendererFragment$ref,
|};
export type NameRendererFragment$data = NameRendererFragment;
export type NameRendererFragment$key = {
  +$data?: NameRendererFragment$data,
  +$fragmentRefs: NameRendererFragment$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type PlainUserNameRenderer_name$ref: FragmentReference;
declare export opaque type PlainUserNameRenderer_name$fragmentType: PlainUserNameRenderer_name$ref;
export type PlainUserNameRenderer_name = {|
  +plaintext: ?string,
  +data: ?{|
    +text: ?string
  |},
  +$refType: PlainUserNameRenderer_name$ref,
|};
export type PlainUserNameRenderer_name$data = PlainUserNameRenderer_name;
export type PlainUserNameRenderer_name$key = {
  +$data?: PlainUserNameRenderer_name$data,
  +$fragmentRefs: PlainUserNameRenderer_name$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type MarkdownUserNameRenderer_name$ref: FragmentReference;
declare export opaque type MarkdownUserNameRenderer_name$fragmentType: MarkdownUserNameRenderer_name$ref;
export type MarkdownUserNameRenderer_name = {|
  +markdown: ?string,
  +data: ?{|
    +markup: ?string
  |},
  +$refType: MarkdownUserNameRenderer_name$ref,
|};
export type MarkdownUserNameRenderer_name$data = MarkdownUserNameRenderer_name;
export type MarkdownUserNameRenderer_name$key = {
  +$data?: MarkdownUserNameRenderer_name$data,
  +$fragmentRefs: MarkdownUserNameRenderer_name$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: match-field-in-query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NameRendererQuery {
  me {
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
type MarkdownUserNameRenderer_name$ref = any;
type PlainUserNameRenderer_name$ref = any;
export type NameRendererQueryVariables = {||};
export type NameRendererQueryResponse = {|
  +me: ?{|
    +nameRenderer: ?{|
      +__fragmentPropName?: ?string,
      +__module_component?: ?string,
      +$fragmentRefs: PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
    |}
  |}
|};
export type NameRendererQuery = {|
  variables: NameRendererQueryVariables,
  response: NameRendererQueryResponse,
|};

import type { FragmentReference } from "relay-runtime";
declare export opaque type PlainUserNameRenderer_name$ref: FragmentReference;
declare export opaque type PlainUserNameRenderer_name$fragmentType: PlainUserNameRenderer_name$ref;
export type PlainUserNameRenderer_name = {|
  +plaintext: ?string,
  +data: ?{|
    +text: ?string
  |},
  +$refType: PlainUserNameRenderer_name$ref,
|};
export type PlainUserNameRenderer_name$data = PlainUserNameRenderer_name;
export type PlainUserNameRenderer_name$key = {
  +$data?: PlainUserNameRenderer_name$data,
  +$fragmentRefs: PlainUserNameRenderer_name$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type MarkdownUserNameRenderer_name$ref: FragmentReference;
declare export opaque type MarkdownUserNameRenderer_name$fragmentType: MarkdownUserNameRenderer_name$ref;
export type MarkdownUserNameRenderer_name = {|
  +markdown: ?string,
  +data: ?{|
    +markup: ?string
  |},
  +$refType: MarkdownUserNameRenderer_name$ref,
|};
export type MarkdownUserNameRenderer_name$data = MarkdownUserNameRenderer_name;
export type MarkdownUserNameRenderer_name$key = {
  +$data?: MarkdownUserNameRenderer_name$data,
  +$fragmentRefs: MarkdownUserNameRenderer_name$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: mutation.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation CommentCreateMutation(
  $input: CommentCreateInput!
  $first: Int
  $orderBy: [String!]
) {
  commentCreate(input: $input) {
    comment {
      id
      name
      friends(first: $first, orderby: $orderBy) {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type CommentCreateInput = {|
  clientMutationId?: ?string,
  feedbackId?: ?string,
  feedback?: ?CommentfeedbackFeedback,
|};
export type CommentfeedbackFeedback = {|
  comment?: ?FeedbackcommentComment
|};
export type FeedbackcommentComment = {|
  feedback?: ?CommentfeedbackFeedback
|};
export type CommentCreateMutationVariables = {|
  input: CommentCreateInput,
  first?: ?number,
  orderBy?: ?$ReadOnlyArray<string>,
|};
export type CommentCreateMutationResponse = {|
  +commentCreate: ?{|
    +comment: ?{|
      +id: string,
      +name: ?string,
      +friends: ?{|
        +count: ?number
      |},
    |}
  |}
|};
export type CommentCreateMutation = {|
  variables: CommentCreateMutationVariables,
  response: CommentCreateMutationResponse,
|};
`;

exports[`RelayFlowGenerator matches expected output: mutation-input-has-array.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation InputHasArray($input: UpdateAllSeenStateInput) {
  viewerNotificationsUpdateAllSeenState(input: $input) {
    stories {
      actorCount
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type UpdateAllSeenStateInput = {|
  clientMutationId?: ?string,
  storyIds?: ?$ReadOnlyArray<?string>,
|};
export type InputHasArrayVariables = {|
  input?: ?UpdateAllSeenStateInput
|};
export type InputHasArrayResponse = {|
  +viewerNotificationsUpdateAllSeenState: ?{|
    +stories: ?$ReadOnlyArray<?{|
      +actorCount: ?number
    |}>
  |}
|};
export type InputHasArray = {|
  variables: InputHasArrayVariables,
  response: InputHasArrayResponse,
|};
`;

exports[`RelayFlowGenerator matches expected output: plural-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment PluralFragment on Node @relay(plural: true) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type PluralFragment$ref: FragmentReference;
declare export opaque type PluralFragment$fragmentType: PluralFragment$ref;
export type PluralFragment = $ReadOnlyArray<{|
  +id: string,
  +$refType: PluralFragment$ref,
|}>;
export type PluralFragment$data = PluralFragment;
export type PluralFragment$key = {
  +$data?: PluralFragment$data,
  +$fragmentRefs: PluralFragment$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: recursive-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment FragmentSpread on Node {
  id
  ... @include(if: $condition) {
    ...FragmentSpread
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type FragmentSpread$ref: FragmentReference;
declare export opaque type FragmentSpread$fragmentType: FragmentSpread$ref;
export type FragmentSpread = {|
  +id: string,
  +$fragmentRefs: FragmentSpread$ref,
  +$refType: FragmentSpread$ref,
|};
export type FragmentSpread$data = FragmentSpread;
export type FragmentSpread$key = {
  +$data?: FragmentSpread$data,
  +$fragmentRefs: FragmentSpread$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: roots.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ExampleQuery($id: ID!) {
  node(id: $id) {
    id
  }
}

fragment ExampleFragment on User {
  id
}

mutation TestMutation($input: CommentCreateInput!) {
  commentCreate(input: $input) {
    comment {
      id
    }
  }
}

subscription TestSubscription($input: FeedbackLikeInput) {
  feedbackLikeSubscribe(input: $input) {
    feedback {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type ExampleQueryVariables = {|
  id: string
|};
export type ExampleQueryResponse = {|
  +node: ?{|
    +id: string
  |}
|};
export type ExampleQuery = {|
  variables: ExampleQueryVariables,
  response: ExampleQueryResponse,
|};

import type { FragmentReference } from "relay-runtime";
declare export opaque type ExampleFragment$ref: FragmentReference;
declare export opaque type ExampleFragment$fragmentType: ExampleFragment$ref;
export type ExampleFragment = {|
  +id: string,
  +$refType: ExampleFragment$ref,
|};
export type ExampleFragment$data = ExampleFragment;
export type ExampleFragment$key = {
  +$data?: ExampleFragment$data,
  +$fragmentRefs: ExampleFragment$ref,
};

export type CommentCreateInput = {|
  clientMutationId?: ?string,
  feedbackId?: ?string,
  feedback?: ?CommentfeedbackFeedback,
|};
export type CommentfeedbackFeedback = {|
  comment?: ?FeedbackcommentComment
|};
export type FeedbackcommentComment = {|
  feedback?: ?CommentfeedbackFeedback
|};
export type TestMutationVariables = {|
  input: CommentCreateInput
|};
export type TestMutationResponse = {|
  +commentCreate: ?{|
    +comment: ?{|
      +id: string
    |}
  |}
|};
export type TestMutation = {|
  variables: TestMutationVariables,
  response: TestMutationResponse,
|};

export type FeedbackLikeInput = {|
  clientMutationId?: ?string,
  feedbackId?: ?string,
|};
export type TestSubscriptionVariables = {|
  input?: ?FeedbackLikeInput
|};
export type TestSubscriptionResponse = {|
  +feedbackLikeSubscribe: ?{|
    +feedback: ?{|
      +id: string
    |}
  |}
|};
export type TestSubscription = {|
  variables: TestSubscriptionVariables,
  response: TestSubscriptionResponse,
|};
`;

exports[`RelayFlowGenerator matches expected output: scalar-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ScalarField on User {
  id
  name
  websites
  traits
  aliasedLinkedField: birthdate {
    aliasedField: year
  }
  screennames {
    name
    service
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
export type PersonalityTraits = "CHEERFUL" | "DERISIVE" | "HELPFUL" | "SNARKY" | "%future added value";
import type { FragmentReference } from "relay-runtime";
declare export opaque type ScalarField$ref: FragmentReference;
declare export opaque type ScalarField$fragmentType: ScalarField$ref;
export type ScalarField = {|
  +id: string,
  +name: ?string,
  +websites: ?$ReadOnlyArray<?string>,
  +traits: ?$ReadOnlyArray<?PersonalityTraits>,
  +aliasedLinkedField: ?{|
    +aliasedField: ?number
  |},
  +screennames: ?$ReadOnlyArray<?{|
    +name: ?string,
    +service: ?string,
  |}>,
  +$refType: ScalarField$ref,
|};
export type ScalarField$data = ScalarField;
export type ScalarField$key = {
  +$data?: ScalarField$data,
  +$fragmentRefs: ScalarField$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: typename-inside-with-overlapping-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TypenameInsideWithOverlappingFields on Viewer {
  actor {
    __typename
    ... on Page {
      id
      name
    }
    ... on User {
      id
      name
      profile_picture {
        uri
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameInsideWithOverlappingFields$ref: FragmentReference;
declare export opaque type TypenameInsideWithOverlappingFields$fragmentType: TypenameInsideWithOverlappingFields$ref;
export type TypenameInsideWithOverlappingFields = {|
  +actor: ?({|
    +__typename: "Page",
    +id: string,
    +name: ?string,
  |} | {|
    +__typename: "User",
    +id: string,
    +name: ?string,
    +profile_picture: ?{|
      +uri: ?string
    |},
  |} | {|
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    +__typename: "%other"
  |}),
  +$refType: TypenameInsideWithOverlappingFields$ref,
|};
export type TypenameInsideWithOverlappingFields$data = TypenameInsideWithOverlappingFields;
export type TypenameInsideWithOverlappingFields$key = {
  +$data?: TypenameInsideWithOverlappingFields$data,
  +$fragmentRefs: TypenameInsideWithOverlappingFields$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: typename-on-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TypenameInside on Actor {
  ... on User {
    __typename
    firstName
  }
  ... on Page {
    __typename
    username
  }
}

fragment TypenameOutside on Actor {
  __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameOutsideWithAbstractType on Node {
  __typename
  ... on User {
    firstName
    address {
      street # only here
      city # common
    }
  }
  ... on Actor {
    username
    address {
      city # common
      country # only here
    }
  }
}

fragment TypenameWithoutSpreads on User {
  __typename
  firstName
}

fragment TypenameWithoutSpreadsAbstractType on Node {
  __typename
  id
}


fragment TypenameWithCommonSelections on Actor {
  __typename
  name
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAlias on Actor {
  _typeAlias: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAliases on Actor {
  _typeAlias1: __typename
  _typeAlias2: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameInside$ref: FragmentReference;
declare export opaque type TypenameInside$fragmentType: TypenameInside$ref;
export type TypenameInside = {|
  +__typename: "User",
  +firstName: ?string,
  +$refType: TypenameInside$ref,
|} | {|
  +__typename: "Page",
  +username: ?string,
  +$refType: TypenameInside$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
  +$refType: TypenameInside$ref,
|};
export type TypenameInside$data = TypenameInside;
export type TypenameInside$key = {
  +$data?: TypenameInside$data,
  +$fragmentRefs: TypenameInside$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameOutside$ref: FragmentReference;
declare export opaque type TypenameOutside$fragmentType: TypenameOutside$ref;
export type TypenameOutside = {|
  +__typename: "User",
  +firstName: ?string,
  +$refType: TypenameOutside$ref,
|} | {|
  +__typename: "Page",
  +username: ?string,
  +$refType: TypenameOutside$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
  +$refType: TypenameOutside$ref,
|};
export type TypenameOutside$data = TypenameOutside;
export type TypenameOutside$key = {
  +$data?: TypenameOutside$data,
  +$fragmentRefs: TypenameOutside$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameOutsideWithAbstractType$ref: FragmentReference;
declare export opaque type TypenameOutsideWithAbstractType$fragmentType: TypenameOutsideWithAbstractType$ref;
export type TypenameOutsideWithAbstractType = {|
  +__typename: string,
  +username?: ?string,
  +address?: ?{|
    +city: ?string,
    +country: ?string,
    +street?: ?string,
  |},
  +firstName?: ?string,
  +$refType: TypenameOutsideWithAbstractType$ref,
|};
export type TypenameOutsideWithAbstractType$data = TypenameOutsideWithAbstractType;
export type TypenameOutsideWithAbstractType$key = {
  +$data?: TypenameOutsideWithAbstractType$data,
  +$fragmentRefs: TypenameOutsideWithAbstractType$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameWithoutSpreads$ref: FragmentReference;
declare export opaque type TypenameWithoutSpreads$fragmentType: TypenameWithoutSpreads$ref;
export type TypenameWithoutSpreads = {|
  +firstName: ?string,
  +__typename: "User",
  +$refType: TypenameWithoutSpreads$ref,
|};
export type TypenameWithoutSpreads$data = TypenameWithoutSpreads;
export type TypenameWithoutSpreads$key = {
  +$data?: TypenameWithoutSpreads$data,
  +$fragmentRefs: TypenameWithoutSpreads$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameWithoutSpreadsAbstractType$ref: FragmentReference;
declare export opaque type TypenameWithoutSpreadsAbstractType$fragmentType: TypenameWithoutSpreadsAbstractType$ref;
export type TypenameWithoutSpreadsAbstractType = {|
  +__typename: string,
  +id: string,
  +$refType: TypenameWithoutSpreadsAbstractType$ref,
|};
export type TypenameWithoutSpreadsAbstractType$data = TypenameWithoutSpreadsAbstractType;
export type TypenameWithoutSpreadsAbstractType$key = {
  +$data?: TypenameWithoutSpreadsAbstractType$data,
  +$fragmentRefs: TypenameWithoutSpreadsAbstractType$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameWithCommonSelections$ref: FragmentReference;
declare export opaque type TypenameWithCommonSelections$fragmentType: TypenameWithCommonSelections$ref;
export type TypenameWithCommonSelections = {|
  +__typename: string,
  +name: ?string,
  +firstName?: ?string,
  +username?: ?string,
  +$refType: TypenameWithCommonSelections$ref,
|};
export type TypenameWithCommonSelections$data = TypenameWithCommonSelections;
export type TypenameWithCommonSelections$key = {
  +$data?: TypenameWithCommonSelections$data,
  +$fragmentRefs: TypenameWithCommonSelections$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameAlias$ref: FragmentReference;
declare export opaque type TypenameAlias$fragmentType: TypenameAlias$ref;
export type TypenameAlias = {|
  +_typeAlias: "User",
  +firstName: ?string,
  +$refType: TypenameAlias$ref,
|} | {|
  +_typeAlias: "Page",
  +username: ?string,
  +$refType: TypenameAlias$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias: "%other",
  +$refType: TypenameAlias$ref,
|};
export type TypenameAlias$data = TypenameAlias;
export type TypenameAlias$key = {
  +$data?: TypenameAlias$data,
  +$fragmentRefs: TypenameAlias$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type TypenameAliases$ref: FragmentReference;
declare export opaque type TypenameAliases$fragmentType: TypenameAliases$ref;
export type TypenameAliases = {|
  +_typeAlias1: "User",
  +_typeAlias2: "User",
  +firstName: ?string,
  +$refType: TypenameAliases$ref,
|} | {|
  +_typeAlias1: "Page",
  +_typeAlias2: "Page",
  +username: ?string,
  +$refType: TypenameAliases$ref,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias1: "%other",
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +_typeAlias2: "%other",
  +$refType: TypenameAliases$ref,
|};
export type TypenameAliases$data = TypenameAliases;
export type TypenameAliases$key = {
  +$data?: TypenameAliases$data,
  +$fragmentRefs: TypenameAliases$ref,
};
`;

exports[`RelayFlowGenerator matches expected output: unmasked-fragment-spreads.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserProfile on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    ...PhotoFragment @relay(mask: false)

    # duplicated field should be merged
    ...AnotherRecursiveFragment @relay(mask: false)

    # Compose child fragment
    ...PhotoFragment
  }
}

fragment PhotoFragment on Image {
  uri
  ...RecursiveFragment @relay(mask: false)
}

fragment RecursiveFragment on Image @relay(mask: false) {
  uri
  width
}

fragment AnotherRecursiveFragment on Image {
  uri
  height
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
import type { PhotoFragment$ref } from "PhotoFragment.graphql";
import type { FragmentReference } from "relay-runtime";
declare export opaque type UserProfile$ref: FragmentReference;
declare export opaque type UserProfile$fragmentType: UserProfile$ref;
export type UserProfile = {|
  +profilePicture: ?{|
    +uri: ?string,
    +width: ?number,
    +height: ?number,
    +$fragmentRefs: PhotoFragment$ref,
  |},
  +$refType: UserProfile$ref,
|};
export type UserProfile$data = UserProfile;
export type UserProfile$key = {
  +$data?: UserProfile$data,
  +$fragmentRefs: UserProfile$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type PhotoFragment$ref: FragmentReference;
declare export opaque type PhotoFragment$fragmentType: PhotoFragment$ref;
export type PhotoFragment = {|
  +uri: ?string,
  +width: ?number,
  +$refType: PhotoFragment$ref,
|};
export type PhotoFragment$data = PhotoFragment;
export type PhotoFragment$key = {
  +$data?: PhotoFragment$data,
  +$fragmentRefs: PhotoFragment$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type RecursiveFragment$ref: FragmentReference;
declare export opaque type RecursiveFragment$fragmentType: RecursiveFragment$ref;
export type RecursiveFragment = {
  +uri: ?string,
  +width: ?number,
};
export type RecursiveFragment$data = RecursiveFragment;
export type RecursiveFragment$key = {
  +$data?: RecursiveFragment$data,
  +$fragmentRefs: RecursiveFragment$ref,
};

import type { FragmentReference } from "relay-runtime";
declare export opaque type AnotherRecursiveFragment$ref: FragmentReference;
declare export opaque type AnotherRecursiveFragment$fragmentType: AnotherRecursiveFragment$ref;
export type AnotherRecursiveFragment = {|
  +uri: ?string,
  +height: ?number,
  +$refType: AnotherRecursiveFragment$ref,
|};
export type AnotherRecursiveFragment$data = AnotherRecursiveFragment;
export type AnotherRecursiveFragment$key = {
  +$data?: AnotherRecursiveFragment$data,
  +$fragmentRefs: AnotherRecursiveFragment$ref,
};
`;
