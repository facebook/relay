// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TestOperationTransform matches expected output: mutation.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation SimpleMutation @relay_test_operation {
  commentCreate(input: null) {
    feedback {
      id
      actor {
        ... on Actor {
          name
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "mutation",
  loc: Source {
    start: 0,
    end: 184,
    source: {
      "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "commentCreate": {
        "type": "CommentCreateResponsePayload",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreate.feedback": {
        "type": "Feedback",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreate.feedback.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "commentCreate.feedback.actor": {
        "type": "Actor",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreate.feedback.actor.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "SimpleMutation",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "commentCreate",
      args: [
        Argument {
          loc: Source {
            start: 64,
            end: 75,
            source: {
              "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "input",
          value: Literal {
            loc: Source {
              start: 71,
              end: 75,
              source: {
                "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: null,
          },
          type: "CommentCreateInput",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 50,
        end: 182,
        source: {
          "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "commentCreate",
      selections: [
        LinkedField {
          alias: "feedback",
          args: [],
          connection: false,
          directives: [],
          handles: null,
          loc: Source {
            start: 83,
            end: 178,
            source: {
              "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "feedback",
          selections: [
            ScalarField {
              alias: "id",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 100,
                end: 102,
                source: {
                  "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "id",
              type: "ID!",
            },
            LinkedField {
              alias: "actor",
              args: [],
              connection: false,
              directives: [],
              handles: null,
              loc: Source {
                start: 109,
                end: 172,
                source: {
                  "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "actor",
              selections: [
                InlineFragment {
                  directives: [],
                  loc: Source {
                    start: 125,
                    end: 164,
                    source: {
                      "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  metadata: null,
                  selections: [
                    ScalarField {
                      alias: "name",
                      args: [],
                      directives: [],
                      handles: null,
                      loc: Source {
                        start: 150,
                        end: 154,
                        source: {
                          "body": "mutation SimpleMutation @relay_test_operation {\\n  commentCreate(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                          "name": "GraphQL request",
                          "locationOffset": {
                            "line": 1,
                            "column": 1,
                          },
                        },
                      },
                      metadata: null,
                      name: "name",
                      type: "String",
                    },
                  ],
                  typeCondition: "Actor",
                },
              ],
              type: "Actor",
            },
          ],
          type: "Feedback",
        },
      ],
      type: "CommentCreateResponsePayload",
    },
  ],
  type: "Mutation",
}
`;

exports[`TestOperationTransform matches expected output: query-with-enums.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query QueryWitEnums @relay_test_operation {
  node(id: "test-id") {
    id
    ... on User {
      name
      environment
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "query",
  loc: Source {
    start: 0,
    end: 133,
    source: {
      "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "node": {
        "type": "Node",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "node.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.environment": {
        "type": "Environment",
        "enumValues": [
          "WEB",
          "MOBILE",
        ],
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "QueryWitEnums",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "node",
      args: [
        Argument {
          loc: Source {
            start: 51,
            end: 64,
            source: {
              "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "id",
          value: Literal {
            loc: Source {
              start: 55,
              end: 64,
              source: {
                "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: "test-id",
          },
          type: "ID",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 46,
        end: 131,
        source: {
          "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "node",
      selections: [
        ScalarField {
          alias: "id",
          args: [],
          directives: [],
          handles: null,
          loc: Source {
            start: 72,
            end: 74,
            source: {
              "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "id",
          type: "ID!",
        },
        InlineFragment {
          directives: [],
          loc: Source {
            start: 79,
            end: 127,
            source: {
              "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          selections: [
            ScalarField {
              alias: "name",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 99,
                end: 103,
                source: {
                  "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "name",
              type: "String",
            },
            ScalarField {
              alias: "environment",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 110,
                end: 121,
                source: {
                  "body": "query QueryWitEnums @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      environment\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "environment",
              type: "Environment",
            },
          ],
          typeCondition: "User",
        },
      ],
      type: "Node",
    },
  ],
  type: "Query",
}
`;

exports[`TestOperationTransform matches expected output: query-with-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query QueryWithFragment @relay_test_operation {
  me {
    id
    ...UserFragment
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...UserProfileFragment @arguments(scale: 1.5)
}

fragment UserProfileFragment on User
  @argumentDefinitions(scale: {type: "Float"}) {
  id
  name
  profile_picture(scale: $scale) {
    uri
  }
  myUserName: username
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "query",
  loc: Source {
    start: 0,
    end: 87,
    source: {
      "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "me": {
        "type": "User",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "me.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "me.emailAddresses": {
        "type": "String",
        "enumValues": null,
        "plural": true,
        "nullable": true,
      },
      "me.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "me.profile_picture": {
        "type": "Image",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "me.myUserName": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "me.profile_picture.uri": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "QueryWithFragment",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "me",
      args: [],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 50,
        end: 85,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "me",
      selections: [
        ScalarField {
          alias: "id",
          args: [],
          directives: [],
          handles: null,
          loc: Source {
            start: 59,
            end: 61,
            source: {
              "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "id",
          type: "ID!",
        },
        FragmentSpread {
          args: [],
          metadata: null,
          loc: Source {
            start: 66,
            end: 81,
            source: {
              "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "UserFragment",
          directives: [],
        },
      ],
      type: "User",
    },
  ],
  type: "Query",
}
Fragment {
  directives: [],
  loc: Source {
    start: 89,
    end: 192,
    source: {
      "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: null,
  name: "UserFragment",
  selections: [
    ScalarField {
      alias: "id",
      args: [],
      directives: [],
      handles: null,
      loc: Source {
        start: 123,
        end: 125,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "id",
      type: "ID!",
    },
    ScalarField {
      alias: "emailAddresses",
      args: [],
      directives: [],
      handles: null,
      loc: Source {
        start: 128,
        end: 142,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "emailAddresses",
      type: "[String]",
    },
    FragmentSpread {
      args: [
        Argument {
          loc: Source {
            start: 179,
            end: 189,
            source: {
              "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "scale",
          value: Literal {
            loc: Source {
              start: 186,
              end: 189,
              source: {
                "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: 1.5,
          },
          type: "Float",
        },
      ],
      metadata: null,
      loc: Source {
        start: 145,
        end: 190,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      name: "UserProfileFragment",
      directives: [],
    },
  ],
  type: "User",
  argumentDefinitions: [],
}
Fragment {
  directives: [],
  loc: Source {
    start: 194,
    end: 363,
    source: {
      "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: null,
  name: "UserProfileFragment",
  selections: [
    ScalarField {
      alias: "id",
      args: [],
      directives: [],
      handles: null,
      loc: Source {
        start: 282,
        end: 284,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "id",
      type: "ID!",
    },
    ScalarField {
      alias: "name",
      args: [],
      directives: [],
      handles: null,
      loc: Source {
        start: 287,
        end: 291,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "name",
      type: "String",
    },
    LinkedField {
      alias: "profile_picture",
      args: [
        Argument {
          loc: Source {
            start: 310,
            end: 323,
            source: {
              "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "scale",
          value: Variable {
            loc: Source {
              start: 317,
              end: 323,
              source: {
                "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            variableName: "scale",
            type: "Float",
          },
          type: "Float",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 294,
        end: 338,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "profile_picture",
      selections: [
        ScalarField {
          alias: "uri",
          args: [],
          directives: [],
          handles: null,
          loc: Source {
            start: 331,
            end: 334,
            source: {
              "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "uri",
          type: "String",
        },
      ],
      type: "Image",
    },
    ScalarField {
      alias: "myUserName",
      args: [],
      directives: [],
      handles: null,
      loc: Source {
        start: 341,
        end: 361,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "username",
      type: "String",
    },
  ],
  type: "User",
  argumentDefinitions: [
    LocalArgumentDefinition {
      loc: Source {
        start: 254,
        end: 276,
        source: {
          "body": "query QueryWithFragment @relay_test_operation {\\n  me {\\n    id\\n    ...UserFragment\\n  }\\n}\\n\\nfragment UserFragment on User {\\n  id\\n  emailAddresses\\n  ...UserProfileFragment @arguments(scale: 1.5)\\n}\\n\\nfragment UserProfileFragment on User\\n  @argumentDefinitions(scale: {type: \\"Float\\"}) {\\n  id\\n  name\\n  profile_picture(scale: $scale) {\\n    uri\\n  }\\n  myUserName: username\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      name: "scale",
      type: "Float",
      defaultValue: null,
    },
  ],
}
`;

exports[`TestOperationTransform matches expected output: simple-query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query SimpleQuery @relay_test_operation {
  node(id: "test-id") {
    id
    ... on User {
      name
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "query",
  loc: Source {
    start: 0,
    end: 113,
    source: {
      "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "node": {
        "type": "Node",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "node.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "SimpleQuery",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "node",
      args: [
        Argument {
          loc: Source {
            start: 49,
            end: 62,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "id",
          value: Literal {
            loc: Source {
              start: 53,
              end: 62,
              source: {
                "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: "test-id",
          },
          type: "ID",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 44,
        end: 111,
        source: {
          "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "node",
      selections: [
        ScalarField {
          alias: "id",
          args: [],
          directives: [],
          handles: null,
          loc: Source {
            start: 70,
            end: 72,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "id",
          type: "ID!",
        },
        InlineFragment {
          directives: [],
          loc: Source {
            start: 77,
            end: 107,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          selections: [
            ScalarField {
              alias: "name",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 97,
                end: 101,
                source: {
                  "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "name",
              type: "String",
            },
          ],
          typeCondition: "User",
        },
      ],
      type: "Node",
    },
  ],
  type: "Query",
}
`;

exports[`TestOperationTransform matches expected output: simple-query-with-condition.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query SimpleQuery @relay_test_operation {
  node(id: "test-id") {
    id
    ... on User {
      name
      profile_picture @include(if: true) {
        uri
        width
        height
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "query",
  loc: Source {
    start: 0,
    end: 205,
    source: {
      "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "node": {
        "type": "Node",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "node.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.profile_picture": {
        "type": "Image",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.profile_picture.uri": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.profile_picture.width": {
        "type": "Int",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "node.profile_picture.height": {
        "type": "Int",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "SimpleQuery",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "node",
      args: [
        Argument {
          loc: Source {
            start: 49,
            end: 62,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "id",
          value: Literal {
            loc: Source {
              start: 53,
              end: 62,
              source: {
                "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: "test-id",
          },
          type: "ID",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 44,
        end: 203,
        source: {
          "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "node",
      selections: [
        ScalarField {
          alias: "id",
          args: [],
          directives: [],
          handles: null,
          loc: Source {
            start: 70,
            end: 72,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "id",
          type: "ID!",
        },
        InlineFragment {
          directives: [],
          loc: Source {
            start: 77,
            end: 199,
            source: {
              "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          selections: [
            ScalarField {
              alias: "name",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 97,
                end: 101,
                source: {
                  "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "name",
              type: "String",
            },
            Condition {
              condition: Literal {
                loc: Source {
                  start: 137,
                  end: 141,
                  source: {
                    "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                value: true,
              },
              loc: Source {
                start: 124,
                end: 142,
                source: {
                  "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              passingValue: true,
              selections: [
                LinkedField {
                  alias: "profile_picture",
                  args: [],
                  connection: false,
                  directives: [],
                  handles: null,
                  loc: Source {
                    start: 108,
                    end: 193,
                    source: {
                      "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  metadata: null,
                  name: "profile_picture",
                  selections: [
                    ScalarField {
                      alias: "uri",
                      args: [],
                      directives: [],
                      handles: null,
                      loc: Source {
                        start: 153,
                        end: 156,
                        source: {
                          "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                          "name": "GraphQL request",
                          "locationOffset": {
                            "line": 1,
                            "column": 1,
                          },
                        },
                      },
                      metadata: null,
                      name: "uri",
                      type: "String",
                    },
                    ScalarField {
                      alias: "width",
                      args: [],
                      directives: [],
                      handles: null,
                      loc: Source {
                        start: 165,
                        end: 170,
                        source: {
                          "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                          "name": "GraphQL request",
                          "locationOffset": {
                            "line": 1,
                            "column": 1,
                          },
                        },
                      },
                      metadata: null,
                      name: "width",
                      type: "Int",
                    },
                    ScalarField {
                      alias: "height",
                      args: [],
                      directives: [],
                      handles: null,
                      loc: Source {
                        start: 179,
                        end: 185,
                        source: {
                          "body": "query SimpleQuery @relay_test_operation {\\n  node(id: \\"test-id\\") {\\n    id\\n    ... on User {\\n      name\\n      profile_picture @include(if: true) {\\n        uri\\n        width\\n        height\\n      }\\n    }\\n  }\\n}\\n",
                          "name": "GraphQL request",
                          "locationOffset": {
                            "line": 1,
                            "column": 1,
                          },
                        },
                      },
                      metadata: null,
                      name: "height",
                      type: "Int",
                    },
                  ],
                  type: "Image",
                },
              ],
            },
          ],
          typeCondition: "User",
        },
      ],
      type: "Node",
    },
  ],
  type: "Query",
}
`;

exports[`TestOperationTransform matches expected output: subscription.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
subscription SimpleMutation @relay_test_operation {
  commentCreateSubscribe(input: null) {
    feedback {
      id
      actor {
        ... on Actor {
          name
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
Root {
  operation: "subscription",
  loc: Source {
    start: 0,
    end: 197,
    source: {
      "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1,
      },
    },
  },
  metadata: {
    "relayTestingSelectionTypeInfo": {
      "commentCreateSubscribe": {
        "type": "CommentCreateResponsePayload",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreateSubscribe.feedback": {
        "type": "Feedback",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreateSubscribe.feedback.id": {
        "type": "ID",
        "enumValues": null,
        "plural": false,
        "nullable": false,
      },
      "commentCreateSubscribe.feedback.actor": {
        "type": "Actor",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
      "commentCreateSubscribe.feedback.actor.name": {
        "type": "String",
        "enumValues": null,
        "plural": false,
        "nullable": true,
      },
    },
  },
  name: "SimpleMutation",
  argumentDefinitions: [],
  directives: [],
  selections: [
    LinkedField {
      alias: "commentCreateSubscribe",
      args: [
        Argument {
          loc: Source {
            start: 77,
            end: 88,
            source: {
              "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          name: "input",
          value: Literal {
            loc: Source {
              start: 84,
              end: 88,
              source: {
                "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            value: null,
          },
          type: "CommentCreateSubscriptionInput",
        },
      ],
      connection: false,
      directives: [],
      handles: null,
      loc: Source {
        start: 54,
        end: 195,
        source: {
          "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
          "name": "GraphQL request",
          "locationOffset": {
            "line": 1,
            "column": 1,
          },
        },
      },
      metadata: null,
      name: "commentCreateSubscribe",
      selections: [
        LinkedField {
          alias: "feedback",
          args: [],
          connection: false,
          directives: [],
          handles: null,
          loc: Source {
            start: 96,
            end: 191,
            source: {
              "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          metadata: null,
          name: "feedback",
          selections: [
            ScalarField {
              alias: "id",
              args: [],
              directives: [],
              handles: null,
              loc: Source {
                start: 113,
                end: 115,
                source: {
                  "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "id",
              type: "ID!",
            },
            LinkedField {
              alias: "actor",
              args: [],
              connection: false,
              directives: [],
              handles: null,
              loc: Source {
                start: 122,
                end: 185,
                source: {
                  "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              metadata: null,
              name: "actor",
              selections: [
                InlineFragment {
                  directives: [],
                  loc: Source {
                    start: 138,
                    end: 177,
                    source: {
                      "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  metadata: null,
                  selections: [
                    ScalarField {
                      alias: "name",
                      args: [],
                      directives: [],
                      handles: null,
                      loc: Source {
                        start: 163,
                        end: 167,
                        source: {
                          "body": "subscription SimpleMutation @relay_test_operation {\\n  commentCreateSubscribe(input: null) {\\n    feedback {\\n      id\\n      actor {\\n        ... on Actor {\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n",
                          "name": "GraphQL request",
                          "locationOffset": {
                            "line": 1,
                            "column": 1,
                          },
                        },
                      },
                      metadata: null,
                      name: "name",
                      type: "String",
                    },
                  ],
                  typeCondition: "Actor",
                },
              ],
              type: "Actor",
            },
          ],
          type: "Feedback",
        },
      ],
      type: "CommentCreateResponsePayload",
    },
  ],
  type: "Subscription",
}
`;
