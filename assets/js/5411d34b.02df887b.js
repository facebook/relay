"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[55628],{3905:(e,r,a)=>{a.r(r),a.d(r,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>s,withMDXComponents:()=>m});var n=a(67294);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function d(){return d=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var a=arguments[r];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},d.apply(this,arguments)}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},d=Object.keys(e);for(n=0;n<d.length;n++)a=d[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(n=0;n<d.length;n++)a=d[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var c=n.createContext({}),m=function(e){return function(r){var a=s(r.components);return n.createElement(e,d({},r,{components:a}))}},s=function(e){var r=n.useContext(c),a=r;return e&&(a="function"==typeof e?e(r):i(i({},r),e)),a},p=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},x=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,d=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(a),p=t,x=m["".concat(o,".").concat(p)]||m[p]||u[p]||d;return a?n.createElement(x,i(i({ref:r},c),{},{components:a})):n.createElement(x,i({ref:r},c))}));function g(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var d=a.length,o=new Array(d);o[0]=x;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,o[1]=i;for(var c=2;c<d;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}x.displayName="MDXCreateElement"},68629:(e,r,a)=>{a.d(r,{Z:()=>u});var n=a(39960),t=a(86341),d=a(67294);function o(){var e=window.encodeURI(JSON.stringify({title:"Feedback about "+window.location.pathname,description:"**!!! Required !!!**\n\nPlease modify the task description to let us know how the docs can be improved.\n\n**Please do not ask support questions via this form! Instead, ask in fburl.com/relay_support**",tag_ids:{add:[0xac96423e5b680,0x64079768ac750]}}));window.open("https://www.internalfb.com/tasks/?n="+e)}function i(e){var r=e.children;return d.createElement("div",{className:"docsRating",id:"docsRating"},d.createElement("hr",null),r)}var l=function(){var e=d.useState(!1),r=e[0],a=e[1],n=function(e){a(!0),function(e){window.ga&&window.ga("send",{hitType:"event",eventCategory:"button",eventAction:"feedback",eventValue:e})}(e)};return r?"Thank you for letting us know!":d.createElement(d.Fragment,null,"Is this page useful?",d.createElement("svg",{className:"i_thumbsup",alt:"Like",id:"docsRating-like",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return n(1)}},d.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})),d.createElement("svg",{className:"i_thumbsdown",alt:"Dislike",id:"docsRating-dislike",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return n(0)}},d.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})))},c=function(){return d.createElement("p",null,"Let us know how these docs can be improved by",d.createElement("a",{className:"button",role:"button",tabIndex:0,onClick:o},"Filing a task"))},m=function(){return d.createElement("p",null,"Help us make the site even better by"," ",d.createElement(n.default,{to:"https://www.surveymonkey.com/r/FYC9TCJ"},"answering a few quick questions"),".")},s=function(){return d.createElement(i,null,d.createElement(c,null),d.createElement(l,null),d.createElement(m,null))},p=function(){return d.createElement(i,null,d.createElement(l,null),d.createElement(m,null))};const u=function(){return(0,t.fbContent)({internal:d.createElement(s,null),external:d.createElement(p,null)})}},37642:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>x,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var n=a(83117),t=a(80102),d=(a(67294),a(3905)),o=a(68629),i=(a(86341),["components"]),l={id:"store",title:"Store",slug:"/api-reference/store/",description:"API reference for the Relay store",keywords:["store"]},c=void 0,m={unversionedId:"api-reference/relay-runtime/store",id:"version-v19.0.0/api-reference/relay-runtime/store",title:"Store",description:"API reference for the Relay store",source:"@site/versioned_docs/version-v19.0.0/api-reference/relay-runtime/store.md",sourceDirName:"api-reference/relay-runtime",slug:"/api-reference/store/",permalink:"/docs/v19.0.0/api-reference/store/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v19.0.0/api-reference/relay-runtime/store.md",tags:[],version:"v19.0.0",frontMatter:{id:"store",title:"Store",slug:"/api-reference/store/",description:"API reference for the Relay store",keywords:["store"]},sidebar:"docs",previous:{title:"fetchQuery",permalink:"/docs/v19.0.0/api-reference/fetch-query/"},next:{title:"relayFieldLogger",permalink:"/docs/v19.0.0/api-reference/field-logger/"}},s={},p=[{value:"RecordSourceSelectorProxy",id:"recordsourceselectorproxy",level:2},{value:"<code>create(dataID: string, typeName: string): RecordProxy</code>",id:"createdataid-string-typename-string-recordproxy",level:3},{value:"Example",id:"example",level:4},{value:"<code>delete(dataID: string): void</code>",id:"deletedataid-string-void",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>get(dataID: string): ?RecordProxy</code>",id:"getdataid-string-recordproxy",level:3},{value:"Example",id:"example-2",level:4},{value:"<code>getRoot(): RecordProxy</code>",id:"getroot-recordproxy",level:3},{value:"Example",id:"example-3",level:4},{value:"<code>getRootField(fieldName: string): ?RecordProxy</code>",id:"getrootfieldfieldname-string-recordproxy",level:3},{value:"Example",id:"example-4",level:4},{value:"<code>getPluralRootField(fieldName: string): ?Array&lt;?RecordProxy&gt;</code>",id:"getpluralrootfieldfieldname-string-arrayrecordproxy",level:3},{value:"Example",id:"example-5",level:4},{value:"<code>invalidateStore(): void</code>",id:"invalidatestore-void",level:3},{value:"Example",id:"example-6",level:4},{value:"RecordProxy",id:"recordproxy",level:2},{value:"<code>getDataID(): string</code>",id:"getdataid-string",level:3},{value:"Example",id:"example-7",level:4},{value:"<code>getType(): string</code>",id:"gettype-string",level:3},{value:"Example",id:"example-8",level:4},{value:"<code>getValue(name: string, arguments?: ?Object): mixed</code>",id:"getvaluename-string-arguments-object-mixed",level:3},{value:"Example",id:"example-9",level:4},{value:"Example",id:"example-10",level:4},{value:"<code>getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy</code>",id:"getlinkedrecordname-string-arguments-object-recordproxy",level:3},{value:"Example",id:"example-11",level:4},{value:"Example",id:"example-12",level:4},{value:"<code>getLinkedRecords(name: string, arguments?: ?Object): ?Array&lt;?RecordProxy&gt;</code>",id:"getlinkedrecordsname-string-arguments-object-arrayrecordproxy",level:3},{value:"Example",id:"example-13",level:4},{value:"Example",id:"example-14",level:4},{value:"<code>getOrCreateLinkedRecord(name: string, typeName: string, arguments?: ?Object)</code>",id:"getorcreatelinkedrecordname-string-typename-string-arguments-object",level:3},{value:"Example",id:"example-15",level:4},{value:"<code>setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy</code>",id:"setvaluevalue-mixed-name-string-arguments-object-recordproxy",level:3},{value:"<code>copyFieldsFrom(sourceRecord: RecordProxy): void</code>",id:"copyfieldsfromsourcerecord-recordproxy-void",level:3},{value:"Example",id:"example-16",level:4},{value:"<code>setLinkedRecord(record: RecordProxy, name: string, arguments?: ?Object)</code>",id:"setlinkedrecordrecord-recordproxy-name-string-arguments-object",level:3},{value:"Example",id:"example-17",level:4},{value:"<code>setLinkedRecords(records: Array&lt;RecordProxy&gt;, name: string, variables?: ?Object)</code>",id:"setlinkedrecordsrecords-arrayrecordproxy-name-string-variables-object",level:3},{value:"Example",id:"example-18",level:4},{value:"<code>invalidateRecord(): void</code>",id:"invalidaterecord-void",level:3},{value:"Example",id:"example-19",level:4},{value:"RecordSourceProxy",id:"recordsourceproxy",level:2},{value:"<code>create(dataID: DataID, typeName: string): RecordProxy</code>",id:"createdataid-dataid-typename-string-recordproxy",level:3},{value:"Example",id:"example-20",level:4},{value:"<code>delete(dataID: DataID): void</code>",id:"deletedataid-dataid-void",level:3},{value:"Example",id:"example-21",level:4},{value:"<code>get(dataID: DataID): ?RecordProxy</code>",id:"getdataid-dataid-recordproxy",level:3},{value:"Example",id:"example-22",level:4},{value:"<code>getRoot(): RecordProxy</code>",id:"getroot-recordproxy-1",level:3},{value:"Example",id:"example-23",level:4},{value:"<code>invalidateStore(): void;</code>",id:"invalidatestore-void-1",level:3},{value:"Example",id:"example-24",level:4},{value:"<code>readUpdatableFragment(fragment: UpdatableFragment&lt;TFragmentType, TData&gt;,fragmentReference: HasUpdatableSpread&lt;TFragmentType&gt;): UpdatableData&lt;TData&gt;;</code>",id:"readupdatablefragmentfragment-updatablefragmenttfragmenttype-tdatafragmentreference-hasupdatablespreadtfragmenttype-updatabledatatdata",level:3},{value:"Example",id:"example-25",level:4},{value:"<code>readUpdatableQuery(query: UpdatableQuery&lt;TVariables, TData&gt;,variables: TVariables): UpdatableData&lt;TData&gt;</code>",id:"readupdatablequeryquery-updatablequerytvariables-tdatavariables-tvariables-updatabledatatdata",level:3},{value:"Example",id:"example-26",level:4},{value:"ConnectionHandler",id:"connectionhandler",level:2},{value:"<code>getConnection(record: RecordProxy, key: string, filters?: ?Object)</code>",id:"getconnectionrecord-recordproxy-key-string-filters-object",level:3},{value:"Edge creation and insertion",id:"edge-creation-and-insertion",level:3},{value:"<code>createEdge(store: RecordSourceProxy, connection: RecordProxy, node: RecordProxy, edgeType: string)</code>",id:"createedgestore-recordsourceproxy-connection-recordproxy-node-recordproxy-edgetype-string",level:4},{value:"<code>insertEdgeBefore(connection: RecordProxy, newEdge: RecordProxy, cursor?: ?string)</code>",id:"insertedgebeforeconnection-recordproxy-newedge-recordproxy-cursor-string",level:4},{value:"<code>insertEdgeAfter(connection: RecordProxy, newEdge: RecordProxy, cursor?: ?string)</code>",id:"insertedgeafterconnection-recordproxy-newedge-recordproxy-cursor-string",level:4},{value:"Example",id:"example-27",level:4},{value:"<code>deleteNode(connection: RecordProxy, nodeID: string): void</code>",id:"deletenodeconnection-recordproxy-nodeid-string-void",level:3},{value:"Example",id:"example-28",level:4}],u={toc:p};function x(e){var r=e.components,a=(0,t.Z)(e,i);return(0,d.mdx)("wrapper",(0,n.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,d.mdx)("p",null,"The Relay Store can be used to programmatically update client-side data inside ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/graphql-mutations/"},(0,d.mdx)("inlineCode",{parentName:"a"},"updater")," functions"),". The following is a reference of the Relay Store interface."),(0,d.mdx)("p",null,"Table of Contents:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"#recordsourceselectorproxy"},"RecordSourceSelectorProxy")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"#recordproxy"},"RecordProxy")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"#recordsourceproxy"},"RecordSourceProxy")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("a",{parentName:"li",href:"#connectionhandler"},"ConnectionHandler"))),(0,d.mdx)("h2",{id:"recordsourceselectorproxy"},"RecordSourceSelectorProxy"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordSourceSelectorProxy")," is the type of the ",(0,d.mdx)("inlineCode",{parentName:"p"},"store")," that ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/graphql-mutations/"},(0,d.mdx)("inlineCode",{parentName:"a"},"updater")," functions")," receive as an argument. The following is the ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordSourceSelectorProxy")," interface:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"interface RecordSourceSelectorProxy {\n  create(dataID: string, typeName: string): RecordProxy;\n  delete(dataID: string): void;\n  get(dataID: string): ?RecordProxy;\n  getRoot(): RecordProxy;\n  getRootField(fieldName: string): ?RecordProxy;\n  getPluralRootField(fieldName: string): ?Array<?RecordProxy>;\n  invalidateStore(): void;\n}\n")),(0,d.mdx)("h3",{id:"createdataid-string-typename-string-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"create(dataID: string, typeName: string): RecordProxy")),(0,d.mdx)("p",null,"Creates a new record in the store given a ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID")," and the ",(0,d.mdx)("inlineCode",{parentName:"p"},"typeName")," as defined by the GraphQL schema. Returns a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," which serves as an interface to mutate the newly created record."),(0,d.mdx)("h4",{id:"example"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.create(dataID, 'Todo');\n")),(0,d.mdx)("h3",{id:"deletedataid-string-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"delete(dataID: string): void")),(0,d.mdx)("p",null,"Deletes a record from the store given its ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID"),". For existing edges to the deleted record, ",(0,d.mdx)("inlineCode",{parentName:"p"},"undefined")," will be returned in the default case even when the value is typed as non-nullable. When ",(0,d.mdx)("a",{parentName:"p",href:"../../guides/throw-on-field-error-directive/"},(0,d.mdx)("inlineCode",{parentName:"a"},"@throwOnFieldError"))," is present, the missing data will throw an error."),(0,d.mdx)("h4",{id:"example-1"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"store.delete(dataID);\n")),(0,d.mdx)("h3",{id:"getdataid-string-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"get(dataID: string): ?RecordProxy")),(0,d.mdx)("p",null,"Retrieves a record from the store given its ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID"),". Returns a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," which serves as an interface to mutate the record."),(0,d.mdx)("h4",{id:"example-2"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.get(dataID);\n")),(0,d.mdx)("h3",{id:"getroot-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getRoot(): RecordProxy")),(0,d.mdx)("p",null,"Returns the ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," representing the root of the GraphQL document."),(0,d.mdx)("h4",{id:"example-3"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Represents root query\nconst root = store.getRoot();\n// Get the viewer linked record\nconst viewer = root.getLinkedRecord('viewer');\n")),(0,d.mdx)("h3",{id:"getrootfieldfieldname-string-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getRootField(fieldName: string): ?RecordProxy")),(0,d.mdx)("p",null,"Retrieves a root field from the store given the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fieldName"),", as defined by the GraphQL document. Returns a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," which serves as an interface to mutate the record."),(0,d.mdx)("h4",{id:"example-4"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const viewer = store.getRootField('viewer');\n")),(0,d.mdx)("h3",{id:"getpluralrootfieldfieldname-string-arrayrecordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getPluralRootField(fieldName: string): ?Array<?RecordProxy>")),(0,d.mdx)("p",null,"Retrieves a root field that represents a collection from the store given the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fieldName"),", as defined by the GraphQL document. Returns an array of ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxies")),"."),(0,d.mdx)("h4",{id:"example-5"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"nodes(first: 10) {\n  # ...\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const nodes = store.getPluralRootField('nodes');\n")),(0,d.mdx)("h3",{id:"invalidatestore-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"invalidateStore(): void")),(0,d.mdx)("p",null,"Globally invalidates the Relay store. This will cause any data that was written to the store before invalidation occurred to be considered stale, and will be considered to require refetch the next time a query is checked with ",(0,d.mdx)("inlineCode",{parentName:"p"},"environment.check()"),"."),(0,d.mdx)("h4",{id:"example-6"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"store.invalidateStore();\n")),(0,d.mdx)("p",null,"After global invalidation, any query that is checked before refetching it will be considered stale:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"environment.check(query) === 'stale'\n")),(0,d.mdx)("h2",{id:"recordproxy"},"RecordProxy"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordProxy")," serves as an interface to mutate records:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"interface RecordProxy {\n  copyFieldsFrom(sourceRecord: RecordProxy): void;\n  getDataID(): string;\n  getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy;\n  getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>;\n  getOrCreateLinkedRecord(\n    name: string,\n    typeName: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  getType(): string;\n  getValue(name: string, arguments?: ?Object): mixed;\n  setLinkedRecord(\n    record: RecordProxy,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setLinkedRecords(\n    records: Array<?RecordProxy>,\n    name: string,\n    arguments?: ?Object,\n  ): RecordProxy;\n  setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy;\n  invalidateRecord(): void;\n}\n")),(0,d.mdx)("h3",{id:"getdataid-string"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getDataID(): string")),(0,d.mdx)("p",null,"Returns the ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID")," of the current record."),(0,d.mdx)("h4",{id:"example-7"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const id = record.getDataID();\n")),(0,d.mdx)("h3",{id:"gettype-string"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getType(): string")),(0,d.mdx)("p",null,"Gets the type of the current record, as defined by the GraphQL schema."),(0,d.mdx)("h4",{id:"example-8"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const type = user.getType();  // User\n")),(0,d.mdx)("h3",{id:"getvaluename-string-arguments-object-mixed"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getValue(name: string, arguments?: ?Object): mixed")),(0,d.mdx)("p",null,"Gets the value of a field in the current record given the field name."),(0,d.mdx)("h4",{id:"example-9"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n  name\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const name = viewer.getValue('name');\n")),(0,d.mdx)("p",null,"Optionally, if the field takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables"),"."),(0,d.mdx)("h4",{id:"example-10"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n  name(arg: $arg)\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const name = viewer.getValue('name', {arg: 'value'});\n")),(0,d.mdx)("h3",{id:"getlinkedrecordname-string-arguments-object-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getLinkedRecord(name: string, arguments?: ?Object): ?RecordProxy")),(0,d.mdx)("p",null,"Retrieves a record associated with the current record given the field name, as defined by the GraphQL document. Returns a ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordProxy"),"."),(0,d.mdx)("h4",{id:"example-11"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  viewer {\n    id\n    name\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer');\n")),(0,d.mdx)("p",null,"Optionally, if the linked record takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables")," as well."),(0,d.mdx)("h4",{id:"example-12"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  viewer(arg: $arg) {\n    id\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst viewer = rootField.getLinkedRecord('viewer', {arg: 'value'});\n")),(0,d.mdx)("h3",{id:"getlinkedrecordsname-string-arguments-object-arrayrecordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getLinkedRecords(name: string, arguments?: ?Object): ?Array<?RecordProxy>")),(0,d.mdx)("p",null,"Retrieves the set of records associated with the current record given the field name, as defined by the GraphQL document. Returns an array of ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordProxies"),"."),(0,d.mdx)("h4",{id:"example-13"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  nodes {\n    # ...\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes');\n")),(0,d.mdx)("p",null,"Optionally, if the linked record takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables")," as well."),(0,d.mdx)("h4",{id:"example-14"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  nodes(first: $count) {\n    # ...\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst nodes = rootField.getLinkedRecords('nodes', {count: 10});\n")),(0,d.mdx)("h3",{id:"getorcreatelinkedrecordname-string-typename-string-arguments-object"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getOrCreateLinkedRecord(name: string, typeName: string, arguments?: ?Object)")),(0,d.mdx)("p",null,"Retrieves a record associated with the current record given the field name, as defined by the GraphQL document. If the linked record does not exist, it will be created given the type name. Returns a ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordProxy"),"."),(0,d.mdx)("h4",{id:"example-15"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  viewer {\n    id\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst newViewer = rootField.getOrCreateLinkedRecord('viewer', 'User'); // Will create if it doesn't exist\n")),(0,d.mdx)("p",null,"Optionally, if the linked record takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables")," as well."),(0,d.mdx)("h3",{id:"setvaluevalue-mixed-name-string-arguments-object-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"setValue(value: mixed, name: string, arguments?: ?Object): RecordProxy")),(0,d.mdx)("p",null,"Mutates the current record by setting a new value on the specified field. Returns the mutated record."),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n  name\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"viewer.setValue('New Name', 'name');\n")),(0,d.mdx)("p",null,"Optionally, if the field takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"viewer.setValue('New Name', 'name', {arg: 'value'});\n")),(0,d.mdx)("h3",{id:"copyfieldsfromsourcerecord-recordproxy-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"copyFieldsFrom(sourceRecord: RecordProxy): void")),(0,d.mdx)("p",null,"Mutates the current record by copying the fields over from the passed in record ",(0,d.mdx)("inlineCode",{parentName:"p"},"sourceRecord"),"."),(0,d.mdx)("h4",{id:"example-16"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.get(id1);\nconst otherRecord = store.get(id2);\nrecord.copyFieldsFrom(otherRecord); // Mutates `record`\n")),(0,d.mdx)("h3",{id:"setlinkedrecordrecord-recordproxy-name-string-arguments-object"},(0,d.mdx)("inlineCode",{parentName:"h3"},"setLinkedRecord(record: RecordProxy, name: string, arguments?: ?Object)")),(0,d.mdx)("p",null,"Mutates the current record by setting a new linked record on the given field name."),(0,d.mdx)("h4",{id:"example-17"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  viewer {\n    id\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst newViewer = store.create(/* ... */);\nrootField.setLinkedRecord(newViewer, 'viewer');\n")),(0,d.mdx)("p",null,"Optionally, if the linked record takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables")," as well."),(0,d.mdx)("h3",{id:"setlinkedrecordsrecords-arrayrecordproxy-name-string-variables-object"},(0,d.mdx)("inlineCode",{parentName:"h3"},"setLinkedRecords(records: Array<RecordProxy>, name: string, variables?: ?Object)")),(0,d.mdx)("p",null,"Mutates the current record by setting a new set of linked records on the given field name."),(0,d.mdx)("h4",{id:"example-18"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"rootField {\n  nodes {\n    # ...\n  }\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const rootField = store.getRootField('rootField');\nconst newNode = store.create(/* ... */);\nconst newNodes = [...rootField.getLinkedRecords('nodes'), newNode];\nrootField.setLinkedRecords(newNodes, 'nodes');\n")),(0,d.mdx)("p",null,"Optionally, if the linked record takes arguments, you can pass a bag of ",(0,d.mdx)("inlineCode",{parentName:"p"},"variables")," as well."),(0,d.mdx)("h3",{id:"invalidaterecord-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"invalidateRecord(): void")),(0,d.mdx)("p",null,"Invalidates the record. This will cause any query that references this record to be considered stale until the next time it is refetched, and will be considered to require a refetch the next time such a query is checked with ",(0,d.mdx)("inlineCode",{parentName:"p"},"environment.check()"),"."),(0,d.mdx)("h4",{id:"example-19"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.get('4');\nrecord.invalidateRecord();\n")),(0,d.mdx)("p",null,"After invalidating a record, any query that references the invalidated record and that is checked before refetching it will be considered stale:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"environment.check(query) === 'stale'\n")),(0,d.mdx)("h2",{id:"recordsourceproxy"},"RecordSourceProxy"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"RecordSourceProxy")," serves as an interface to mutate record."),(0,d.mdx)("admonition",{type:"danger"},(0,d.mdx)("p",{parentName:"admonition"},(0,d.mdx)("inlineCode",{parentName:"p"},"RecordSourceProxy")," exposes many low level APIs that are not typesafe. Users should consider using ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/typesafe-updaters-faq/"},"typesafe updaters"),", ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/graphql-mutations/#optimistic-updates"},"optimistic updates"),", and ",(0,d.mdx)("a",{parentName:"p",href:"../../guides/relay-resolvers/introduction/"},"relay resolvers")," instead if their use case can be covered by these alternatives.")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"interface RecordSourceProxy {\n  create(dataID: DataID, typeName: string): RecordProxy;\n  delete(dataID: DataID): void;\n  get(dataID: DataID): ?RecordProxy;\n  getRoot(): RecordProxy;\n  invalidateStore(): void;\n  readUpdatableFragment<TFragmentType: FragmentType, TData>(\n    fragment: UpdatableFragment<TFragmentType, TData>,\n    fragmentReference: HasUpdatableSpread<TFragmentType>,\n  ): UpdatableData<TData>;\n  readUpdatableQuery<TVariables: Variables, TData>(\n    query: UpdatableQuery<TVariables, TData>,\n    variables: TVariables,\n  ): UpdatableData<TData>;\n}\n")),(0,d.mdx)("h3",{id:"createdataid-dataid-typename-string-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"create(dataID: DataID, typeName: string): RecordProxy")),(0,d.mdx)("p",null,"Creates a new record in the store given a ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID")," and the ",(0,d.mdx)("inlineCode",{parentName:"p"},"typeName")," as defined by the GraphQL schema. Returns a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," which serves as an interface to mutate the newly created record."),(0,d.mdx)("h4",{id:"example-20"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.create(dataID, 'Todo');\n")),(0,d.mdx)("h3",{id:"deletedataid-dataid-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"delete(dataID: DataID): void")),(0,d.mdx)("p",null,"Deletes a record from the store given its ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID"),". For existing edges to the deleted record, ",(0,d.mdx)("inlineCode",{parentName:"p"},"undefined")," will be returned in the default case even when the value is typed as non-nullable. When ",(0,d.mdx)("a",{parentName:"p",href:"../../guides/throw-on-field-error-directive/"},(0,d.mdx)("inlineCode",{parentName:"a"},"@throwOnFieldError"))," is present, the missing data will throw an error."),(0,d.mdx)("h4",{id:"example-21"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"store.delete(dataID);\n")),(0,d.mdx)("h3",{id:"getdataid-dataid-recordproxy"},(0,d.mdx)("inlineCode",{parentName:"h3"},"get(dataID: DataID): ?RecordProxy")),(0,d.mdx)("p",null,"Retrieves a record from the store given its ",(0,d.mdx)("inlineCode",{parentName:"p"},"dataID"),". Returns a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," which serves as an interface to read/mutate the record."),(0,d.mdx)("h4",{id:"example-22"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const record = store.get(dataID);\n")),(0,d.mdx)("h3",{id:"getroot-recordproxy-1"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getRoot(): RecordProxy")),(0,d.mdx)("p",null,"Returns the ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," representing the root of the GraphQL document."),(0,d.mdx)("h4",{id:"example-23"},"Example"),(0,d.mdx)("p",null,"Given the GraphQL document:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"viewer {\n  id\n}\n")),(0,d.mdx)("p",null,"Usage:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Represents root query\nconst root = store.getRoot();\n// Get the viewer linked record\nconst viewer = root.getLinkedRecord('viewer');\n")),(0,d.mdx)("h3",{id:"invalidatestore-void-1"},(0,d.mdx)("inlineCode",{parentName:"h3"},"invalidateStore(): void;")),(0,d.mdx)("p",null,"Globally invalidates the Relay store. This will cause any data that was written to the store before invalidation occurred to be considered stale, and will be considered to require refetch the next time a query is checked with ",(0,d.mdx)("inlineCode",{parentName:"p"},"environment.check()")," or is fetched with a ",(0,d.mdx)("inlineCode",{parentName:"p"},"store-or-network")," ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/reusing-cached-data/fetch-policies/"},"fetch policy"),"."),(0,d.mdx)("h4",{id:"example-24"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"store.invalidateStore();\n")),(0,d.mdx)("p",null,"After global invalidation, any query that is checked before refetching it will be considered stale:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"environment.check(query) === 'stale'\n")),(0,d.mdx)("h3",{id:"readupdatablefragmentfragment-updatablefragmenttfragmenttype-tdatafragmentreference-hasupdatablespreadtfragmenttype-updatabledatatdata"},(0,d.mdx)("inlineCode",{parentName:"h3"},"readUpdatableFragment(fragment: UpdatableFragment<TFragmentType, TData>,fragmentReference: HasUpdatableSpread<TFragmentType>): UpdatableData<TData>;")),(0,d.mdx)("p",null,"Fetches an updatable fragment from the store. This updatable fragment's fields can then be imperatively modified to update data in the store."),(0,d.mdx)("p",null,"For more information on updating the store imperatively, see this ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/imperatively-modifying-store-data/"},"section")," of the guided tour."),(0,d.mdx)("h4",{id:"example-25"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const fragment = graphql`\n  fragment StoryLikeButton_updatable on Story @updatable {\n    likeCount\n    doesViewerLike\n  }\n`;\nconst {\n  updatableData\n} = store.readUpdatableFragment(\n  fragment,\n  story\n);\nupdatableData.likeCount = updatableData.likeCount + 1\n")),(0,d.mdx)("h3",{id:"readupdatablequeryquery-updatablequerytvariables-tdatavariables-tvariables-updatabledatatdata"},(0,d.mdx)("inlineCode",{parentName:"h3"},"readUpdatableQuery(query: UpdatableQuery<TVariables, TData>,variables: TVariables): UpdatableData<TData>")),(0,d.mdx)("p",null,"Reads an updatable query from the store. This updatable query's fields can be imperatively modified to update data in the store. Unlike ",(0,d.mdx)("inlineCode",{parentName:"p"},"readUpdatableFragment"),", you do not need to pass in a ",(0,d.mdx)("inlineCode",{parentName:"p"},"fragmentReference")," as an input argument."),(0,d.mdx)("p",null,"For more information on updating the store imperatively, see this ",(0,d.mdx)("a",{parentName:"p",href:"../../guided-tour/updating-data/imperatively-modifying-store-data/"},"section")," of the guided tour."),(0,d.mdx)("h4",{id:"example-26"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const {updatableData} = store.readUpdatableQuery(\n  graphql`\n    query NameUpdaterUpdateQuery @updatable {\n      viewer {\n        name\n      }\n    }\n  `,\n  {}\n);\nconst viewer = updatableData.viewer;\nviewer.name = newName;\n")),(0,d.mdx)("h2",{id:"connectionhandler"},"ConnectionHandler"),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"ConnectionHandler")," is a utility module exposed by ",(0,d.mdx)("inlineCode",{parentName:"p"},"relay-runtime")," that aids in the manipulation of connections. ",(0,d.mdx)("inlineCode",{parentName:"p"},"ConnectionHandler")," exposes the following interface:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"interface ConnectionHandler {\n  getConnection(\n    record: RecordProxy,\n    key: string,\n    filters?: ?Object,\n  ): ?RecordProxy,\n  createEdge(\n    store: RecordSourceProxy,\n    connection: RecordProxy,\n    node: RecordProxy,\n    edgeType: string,\n  ): RecordProxy,\n  insertEdgeBefore(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  insertEdgeAfter(\n    connection: RecordProxy,\n    newEdge: RecordProxy,\n    cursor?: ?string,\n  ): void,\n  deleteNode(connection: RecordProxy, nodeID: string): void\n}\n")),(0,d.mdx)("h3",{id:"getconnectionrecord-recordproxy-key-string-filters-object"},(0,d.mdx)("inlineCode",{parentName:"h3"},"getConnection(record: RecordProxy, key: string, filters?: ?Object)")),(0,d.mdx)("p",null,"Given a record and a connection key, and optionally a set of filters, ",(0,d.mdx)("inlineCode",{parentName:"p"},"getConnection")," retrieves a ",(0,d.mdx)("a",{parentName:"p",href:"#recordproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"RecordProxy"))," that represents a connection that was annotated with a ",(0,d.mdx)("inlineCode",{parentName:"p"},"@connection")," directive."),(0,d.mdx)("p",null,"First, let's take a look at a plain connection:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},"fragment FriendsFragment on User {\n  friends(first: 10) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n")),(0,d.mdx)("p",null,"Accessing a plain connection field like this is the same as other regular fields:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = user && user.getLinkedRecord('friends');\n\n// Access fields on the connection:\nconst edges = friends && friends.getLinkedRecords('edges');\n")),(0,d.mdx)("p",null,"When using ",(0,d.mdx)("a",{parentName:"p",href:"../use-pagination-fragment/"},"usePaginationFragment"),", we usually annotate the actual connection field with ",(0,d.mdx)("inlineCode",{parentName:"p"},"@connection")," to tell Relay which part needs to be paginated:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-graphql"},'fragment FriendsFragment on User {\n  friends(first: 10, orderby: "firstname") @connection(\n    key: "FriendsFragment_friends",\n  ) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n')),(0,d.mdx)("p",null,"For connections like the above, ",(0,d.mdx)("inlineCode",{parentName:"p"},"ConnectionHandler")," helps us find the record:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"import {ConnectionHandler} from 'relay-runtime';\n\n// The `friends` connection record can be accessed with:\nconst user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(\n user,                        // parent record\n 'FriendsFragment_friends',   // connection key\n {orderby: 'firstname'}       // 'filters' that is used to identify the connection\n);\n// Access fields on the connection:\nconst edges = friends.getLinkedRecords('edges');\n")),(0,d.mdx)("h3",{id:"edge-creation-and-insertion"},"Edge creation and insertion"),(0,d.mdx)("h4",{id:"createedgestore-recordsourceproxy-connection-recordproxy-node-recordproxy-edgetype-string"},(0,d.mdx)("inlineCode",{parentName:"h4"},"createEdge(store: RecordSourceProxy, connection: RecordProxy, node: RecordProxy, edgeType: string)")),(0,d.mdx)("p",null,"Creates an edge given a ",(0,d.mdx)("a",{parentName:"p",href:"#recordsourceselectorproxy"},(0,d.mdx)("inlineCode",{parentName:"a"},"store")),", a connection, the edge node, and the edge type."),(0,d.mdx)("h4",{id:"insertedgebeforeconnection-recordproxy-newedge-recordproxy-cursor-string"},(0,d.mdx)("inlineCode",{parentName:"h4"},"insertEdgeBefore(connection: RecordProxy, newEdge: RecordProxy, cursor?: ?string)")),(0,d.mdx)("p",null,"Given a connection, inserts the edge at the beginning of the connection, or before the specified ",(0,d.mdx)("inlineCode",{parentName:"p"},"cursor"),"."),(0,d.mdx)("h4",{id:"insertedgeafterconnection-recordproxy-newedge-recordproxy-cursor-string"},(0,d.mdx)("inlineCode",{parentName:"h4"},"insertEdgeAfter(connection: RecordProxy, newEdge: RecordProxy, cursor?: ?string)")),(0,d.mdx)("p",null,"Given a connection, inserts the edge at the end of the connection, or after the specified ",(0,d.mdx)("inlineCode",{parentName:"p"},"cursor"),"."),(0,d.mdx)("h4",{id:"example-27"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nconst newFriend = store.get(newFriendId);\nconst edge = ConnectionHandler.createEdge(store, friends, newFriend, 'UserEdge');\n\n// No cursor provided, append the edge at the end.\nConnectionHandler.insertEdgeAfter(friends, edge);\n\n// No cursor provided, insert the edge at the front:\nConnectionHandler.insertEdgeBefore(friends, edge);\n")),(0,d.mdx)("h3",{id:"deletenodeconnection-recordproxy-nodeid-string-void"},(0,d.mdx)("inlineCode",{parentName:"h3"},"deleteNode(connection: RecordProxy, nodeID: string): void")),(0,d.mdx)("p",null,"Given a connection, deletes any edges whose node id matches the given id."),(0,d.mdx)("h4",{id:"example-28"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"const user = store.get(userID);\nconst friends = ConnectionHandler.getConnection(user, 'FriendsFragment_friends');\nConnectionHandler.deleteNode(friends, idToDelete);\n")),(0,d.mdx)(o.Z,{mdxType:"DocsRating"}))}x.isMDXComponent=!0}}]);