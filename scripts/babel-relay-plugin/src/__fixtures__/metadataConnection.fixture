Input:
var Relay = require('react-relay');
var x = Relay.QL`
  query {
    node(id: 123) {
      friends(first: 3) {
        edges {
          node {
            name
          }
        }
      }
    }
  }
`;

Output:
var Relay = require('react-relay');
var x = (function () {
  var GraphQL = Relay.QL.__GraphQL;
  return new GraphQL.Query('node', new GraphQL.CallValue(123), [new GraphQL.Field('friends', [new GraphQL.Field('edges', [new GraphQL.Field('node', [new GraphQL.Field('name', null, null, null, null, null, {
    parentType: 'User'
  }), new GraphQL.Field('id', null, null, null, null, null, {
    parentType: 'User',
    generated: true,
    requisite: true
  })], null, null, null, null, {
    parentType: 'UserConnectionEdge',
    rootCall: 'node',
    pk: 'id',
    requisite: true
  }), new GraphQL.Field('cursor', null, null, null, null, null, {
    parentType: 'UserConnectionEdge',
    generated: true,
    requisite: true
  })], null, null, null, null, {
    parentType: 'UserConnection',
    plural: true
  }), new GraphQL.Field('pageInfo', [new GraphQL.Field('hasNextPage', null, null, null, null, null, {
    parentType: 'PageInfo',
    generated: true,
    requisite: true
  }), new GraphQL.Field('hasPreviousPage', null, null, null, null, null, {
    parentType: 'PageInfo',
    generated: true,
    requisite: true
  })], null, null, null, null, {
    parentType: 'UserConnection',
    generated: true,
    requisite: true
  })], null, [new GraphQL.Callv('first', new GraphQL.CallValue(3))], null, null, {
    parentType: 'Node',
    connection: true
  }), new GraphQL.Field('id', null, null, null, null, null, {
    parentType: 'Node',
    generated: true,
    requisite: true
  })], null, {
    rootArg: 'id'
  }, 'MetadataConnection');
})();