==================================== INPUT ====================================
//- PersonComponent.js
graphql`fragment PersonComponentFragment on IPerson {
  name
}`


//- UserTypeResolvers.js
/**
 * @RelayResolver User implements IPerson
 * @weak
 */

//- AdminTypeResolvers.js
/**
 * @RelayResolver Admin implements IPerson
 * @weak
 */

//- IPersonResolvers.js
/**
 * @RelayResolver IPerson.name: String
 */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "featureFlags": {
    "enable_resolver_normalization_ast": true,
    "relay_resolver_enable_interface_output_type": { "kind": "enabled" }
  }
}

//- schema.graphql

//- schema-extensions/extension.graphql
type Query { me: IPerson }

# Fields to be added later by resolvers
interface IPerson
==================================== OUTPUT ===================================
//- __generated__/Admin____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<b457b45ee604c49c16efd4c07b88b2aa>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin } from "AdminTypeResolvers";
import type { FragmentType } from "relay-runtime";
declare export opaque type Admin____relay_model_instance$fragmentType: FragmentType;
export type Admin____relay_model_instance$data = {|
  +__relay_model_instance: Admin,
  +$fragmentType: Admin____relay_model_instance$fragmentType,
|};
export type Admin____relay_model_instance$key = {
  +$data?: Admin____relay_model_instance$data,
  +$fragmentSpreads: Admin____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin____relay_model_instance",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "__relay_model_instance",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  Admin____relay_model_instance$fragmentType,
  Admin____relay_model_instance$data,
>*/);

//- __generated__/PersonComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<6ae25904008fca5dd338ee1e53ed18d2>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin____relay_model_instance$data } from "Admin____relay_model_instance.graphql";
import type { User____relay_model_instance$data } from "User____relay_model_instance.graphql";
import type { FragmentType } from "relay-runtime";
import {name as iPersonNameResolverType} from "IPersonResolvers";
// Type assertion validating that `iPersonNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(iPersonNameResolverType: (
  model: Admin____relay_model_instance$data['__relay_model_instance'] | User____relay_model_instance$data['__relay_model_instance'],
) => string | null);
declare export opaque type PersonComponentFragment$fragmentType: FragmentType;
export type PersonComponentFragment$data = {|
  +name: ?string,
  +$fragmentType: PersonComponentFragment$fragmentType,
|};
export type PersonComponentFragment$key = {
  +$data?: PersonComponentFragment$data,
  +$fragmentSpreads: PersonComponentFragment$fragmentType,
  ...
};
*/

import Admin____relay_model_instance_graphql from 'Admin____relay_model_instance.graphql';
import {name as adminNameResolver} from 'IPersonResolvers';
import {name as userNameResolver} from 'IPersonResolvers';
import User____relay_model_instance_graphql from 'User____relay_model_instance.graphql';
import {resolverDataInjector} from 'relay-runtime/experimental';

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "PersonComponentFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "Admin____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "name",
              "resolverModule": resolverDataInjector(Admin____relay_model_instance_graphql, adminNameResolver, '__relay_model_instance', true),
              "path": "name"
            }
          ],
          "type": "Admin",
          "abstractKey": null
        },
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "User____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "name",
              "resolverModule": resolverDataInjector(User____relay_model_instance_graphql, userNameResolver, '__relay_model_instance', true),
              "path": "name"
            }
          ],
          "type": "User",
          "abstractKey": null
        }
      ]
    }
  ],
  "type": "IPerson",
  "abstractKey": "__isIPerson"
};

(node/*: any*/).hash = "a57dd30bd59412781e9566e1553e2d70";

export default ((node/*: any*/)/*: Fragment<
  PersonComponentFragment$fragmentType,
  PersonComponentFragment$data,
>*/);

//- __generated__/User____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<b17234ca9b27c75103e192a46bcaef9f>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { User } from "UserTypeResolvers";
import type { FragmentType } from "relay-runtime";
declare export opaque type User____relay_model_instance$fragmentType: FragmentType;
export type User____relay_model_instance$data = {|
  +__relay_model_instance: User,
  +$fragmentType: User____relay_model_instance$fragmentType,
|};
export type User____relay_model_instance$key = {
  +$data?: User____relay_model_instance$data,
  +$fragmentSpreads: User____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User____relay_model_instance",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "__relay_model_instance",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

export default ((node/*: any*/)/*: Fragment<
  User____relay_model_instance$fragmentType,
  User____relay_model_instance$data,
>*/);
