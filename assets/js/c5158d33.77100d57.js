"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[92064],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>s,mdx:()=>y,useMDXComponents:()=>m,withMDXComponents:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){return function(t){var n=m(t.components);return r.createElement(e,a({},t,{components:n}))}},m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=m(n),s=o,g=d["".concat(i,".").concat(s)]||d[s]||u[s]||a;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},38285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),i=["components"],l={id:"compiler",title:"Relay Compiler",slug:"/guides/compiler/",description:"Relay guide to the compiler",keywords:["compiler"]},p=void 0,c={unversionedId:"getting-started/compiler",id:"version-v20.1.0/getting-started/compiler",title:"Relay Compiler",description:"Relay guide to the compiler",source:"@site/versioned_docs/version-v20.1.0/getting-started/compiler.md",sourceDirName:"getting-started",slug:"/guides/compiler/",permalink:"/docs/guides/compiler/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.1.0/getting-started/compiler.md",tags:[],version:"v20.1.0",frontMatter:{id:"compiler",title:"Relay Compiler",slug:"/guides/compiler/",description:"Relay guide to the compiler",keywords:["compiler"]},sidebar:"docs",previous:{title:"Relay Babel Plugin",permalink:"/docs/getting-started/babel-plugin/"},next:{title:"Compiler Configuration",permalink:"/docs/getting-started/compiler-config/"}},d={},m=[{value:"Configuration",id:"configuration",level:2},{value:"Running the compiler",id:"running-the-compiler",level:2},{value:"Watch mode",id:"watch-mode",level:3},{value:"Codemods",id:"codemods",level:3},{value:"Help",id:"help",level:3}],s={toc:m};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.mdx)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Relay depends upon ahead-of-time compilation of GraphQL queries and fragments to generate artifacts that are used at runtime."),(0,a.mdx)("p",null,"The Relay compiler is a command line tool that reads GraphQL fragments, queries, and mutations in your JavaScript code and generates TypeScript/Flow types and additional JavaScript code that gets included in your code via ",(0,a.mdx)("a",{parentName:"p",href:"/docs/getting-started/babel-plugin/"},"Relay's Babel Plugin"),"."),(0,a.mdx)("p",null,"This guide explains configuring and using the Relay Compiler."),(0,a.mdx)("h2",{id:"configuration"},"Configuration"),(0,a.mdx)("p",null,"The Relay compiler will look for a Relay config in the following locations. It's up to you to decide which location works best for your project."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"relay.config.json")," in your project root"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"relay.config.(js/mjs/ts)")," in your project root"),(0,a.mdx)("li",{parentName:"ul"},"A ",(0,a.mdx)("inlineCode",{parentName:"li"},'"relay"')," key in your ",(0,a.mdx)("inlineCode",{parentName:"li"},"package.json"))),(0,a.mdx)("p",null,"The Relay compiler config tells Relay things like where it can find your GraphQL schema and what language your code is written in. A minimal Relay compiler config looks like this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="relay.config.json"',title:'"relay.config.json"'},'{\n  "src": "./src",\n  "schema": "./schema.graphql",\n  "language": "typescript"\n}\n')),(0,a.mdx)("admonition",{type:"tip"},(0,a.mdx)("p",{parentName:"admonition"},"Install the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/editor-support/"},"Relay VSCode extension")," to get autocomplete, hover tips, and type checking for the options in your relay config.")),(0,a.mdx)("p",null,"The compiler config is very powerful, and includes many specialized configuration options. For a full enumeration of the available options see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/getting-started/compiler-config/"},"Compiler Configuration")," page."),(0,a.mdx)("h2",{id:"running-the-compiler"},"Running the compiler"),(0,a.mdx)("p",null,"It is generally recommended that you add a ",(0,a.mdx)("inlineCode",{parentName:"p"},"scripts")," entry to your ",(0,a.mdx)("inlineCode",{parentName:"p"},"package.json")," to make it easy to run the Relay compiler for your project."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    // change-line\n    "relay": "relay-compiler"\n  }\n}\n')),(0,a.mdx)("p",null,"With this added you can run the Relay compiler like so:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"npm run relay\n")),(0,a.mdx)("h3",{id:"watch-mode"},"Watch mode"),(0,a.mdx)("p",null,"If you have ",(0,a.mdx)("a",{parentName:"p",href:"https://facebook.github.io/watchman"},"watchman")," installed you can pass ",(0,a.mdx)("inlineCode",{parentName:"p"},"--watch")," to the Relay compiler to have it continue running and automatically update generated files as you edit your product code:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"npm run relay --watch\n")),(0,a.mdx)("h3",{id:"codemods"},"Codemods"),(0,a.mdx)("p",null,"The Relay compiler supports some built in codemods. Learn more in the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/guides/codemods/"},"Codemods Guide"),"."),(0,a.mdx)("h3",{id:"help"},"Help"),(0,a.mdx)("p",null,"To learn about the other capabilities of the Relay compiler see it's extensive ",(0,a.mdx)("inlineCode",{parentName:"p"},"--help")," output:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"npm run relay --help\n")))}u.isMDXComponent=!0}}]);