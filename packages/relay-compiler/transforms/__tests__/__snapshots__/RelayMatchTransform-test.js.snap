// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayMatchTransform matches expected output: direct-js-field.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ... on PlainUserNameRenderer {
      js(module: "PlainUserNameRenderer.react")
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Direct use of the 'js' field is not allowed, use @match/@module instead.
  
  Source: GraphQL request (6:7)
  5:     ... on PlainUserNameRenderer {
  6:       js(module: "PlainUserNameRenderer.react")
           ^
  7:     }
  
`;

exports[`RelayMatchTransform matches expected output: invalid-match-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...User_user @module(name: "User.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment User_user on User {
  __typename
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Invalid @match selection: selections must match against concrete variants/implementors of type 'UserNameRenderer'. Got 'User', expected one of 'PlainUserNameRenderer', 'MarkdownUserNameRenderer', 'CustomNameRenderer', etc.
  
  Source: GraphQL request (6:18)
  5:     ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
  6:     ...User_user @module(name: "User.react")
                      ^
  7:   }
  
  Source: GraphQL request (17:1)
  16: 
  17: fragment User_user on User {
      ^
  18:   __typename
  
`;

exports[`RelayMatchTransform matches expected output: invalid-no-matches.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: RelayParser: Encountered 1 error(s):
- Expected at least one selection for non-scalar field 'nameRenderer' on type 'UserNameRenderer'. Source: document \`NameRendererFragment\` file: \`GraphQL request\`.
  
  GraphQL request (4:3)
  3:   id
  4:   nameRenderer @match
       ^
  5: }
  
`;

exports[`RelayMatchTransform matches expected output: invalid-non-empty-selections.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    __typename
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Invalid @match selection: all selections should be fragment spreads with @module.
  
  Source: GraphQL request (5:5)
  4:   nameRenderer @match {
  5:     __typename
         ^
  6:     ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
  
`;

exports[`RelayMatchTransform matches expected output: match-on-child-of-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
      ... on PlainUserNameRenderer {
        ...PlainUserNameRenderer_name
        __module_operation: js(module: "PlainUserNameRenderer_name$normalization.graphql")
        __module_component: js(module: "PlainUserNameRenderer.react")
      }
      ... on MarkdownUserNameRenderer {
        ...MarkdownUserNameRenderer_name
        __module_operation: js(module: "MarkdownUserNameRenderer_name$normalization.graphql")
        __module_component: js(module: "MarkdownUserNameRenderer.react")
      }
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`RelayMatchTransform matches expected output: match-with-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react") @arguments(cond: true)
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer
@argumentDefinitions(
  cond: {type: "Boolean!", defaultValue: false}
){
  markdown
  data @include(if: $cond) {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- @module does not support @arguments.
  
  Source: GraphQL request (7:66)
  6:     ...MarkdownUserNameRenderer_name
  7:       @module(name: "MarkdownUserNameRenderer.react") @arguments(cond: true)
                                                                      ^
  8:   }
  
`;

exports[`RelayMatchTransform matches expected output: module-without-match.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation: js(module: "PlainUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "PlainUserNameRenderer.react")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation: js(module: "MarkdownUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`RelayMatchTransform matches expected output: relay-match-on-interface.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderable @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderable(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation: js(module: "PlainUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "PlainUserNameRenderer.react")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation: js(module: "MarkdownUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`RelayMatchTransform matches expected output: relay-match-on-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation: js(module: "PlainUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "PlainUserNameRenderer.react")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation: js(module: "MarkdownUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`RelayMatchTransform matches expected output: relay-match-on-union-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderers @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderers(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation: js(module: "PlainUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "PlainUserNameRenderer.react")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation: js(module: "MarkdownUserNameRenderer_name$normalization.graphql")
      __module_component: js(module: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;
