==================================== INPUT ====================================
# expected-to-throw
query NodeQuery($id: ID!, $first: Int, $after: ID) {
  node(id: $id) {
    id
    ... on User {
      badConnection(first: $first, after: $after) @connection {
        edges {
          cursor {
            id
          }
          node
        }
      }
    }
  }
}

# %extensions%
extend type User {
  badConnection(after: ID, before: ID, first: Int, last: Int): BadConnection
}

type BadConnection {
  count: Int
  edges: [BadConnectionEdge]
  pageInfo: BadConnectionPageInfo
}

type BadConnectionEdge {
  cursor: BadConnectionNode
  node: Int
}

type BadConnectionNode {
  id: ID
}

type BadConnectionPageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  endCursor: String
  startCursor: String
}
==================================== ERROR ====================================
@connection used on invalid field 'badConnection'. Expected the field type 'BadConnection' to expose a 'edges { cursor }' field that returns a scalar.:
connection-invalid-edge-type.invalid.graphql:4:17:

      badConnection(first: $first, after: $after) @connection {


connection-invalid-edge-type.invalid.graphql:5:63:

        edges {


@connection used on invalid field 'badConnection'. Expected the field type 'BadConnection' to expose a 'edges { node }' field that returns an object, interface or union.:
connection-invalid-edge-type.invalid.graphql:4:17:

      badConnection(first: $first, after: $after) @connection {


connection-invalid-edge-type.invalid.graphql:5:63:

        edges {


Expected the key argument to @connection to be a string literal for field 'badConnection'.:
connection-invalid-edge-type.invalid.graphql:4:17:

      badConnection(first: $first, after: $after) @connection {
