"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[22864],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>m,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>c,withMDXComponents:()=>s});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){return function(n){var t=c(n.components);return r.createElement(e,i({},n,{components:t}))}},c=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=c(t),d=a,f=s["".concat(o,".").concat(d)]||s[d]||u[d]||i;return t?r.createElement(f,l(l({ref:n},m),{},{components:t})):r.createElement(f,l({ref:n},m))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},31146:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>m,toc:()=>c});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),o=["components"],l={id:"quick-start",title:"Quick Start",slug:"/getting-started/quick-start/",description:"Get up an running with Relay",keywords:["quick"]},p=void 0,m={unversionedId:"getting-started/quick-start",id:"version-v20.0.0/getting-started/quick-start",title:"Quick Start",description:"Get up an running with Relay",source:"@site/versioned_docs/version-v20.0.0/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start/",permalink:"/docs/getting-started/quick-start/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/getting-started/quick-start.md",tags:[],version:"v20.0.0",frontMatter:{id:"quick-start",title:"Quick Start",slug:"/getting-started/quick-start/",description:"Get up an running with Relay",keywords:["quick"]},sidebar:"docs",previous:{title:"Home",permalink:"/docs/"},next:{title:"Relay Babel Plugin",permalink:"/docs/getting-started/babel-plugin/"}},s={},c=[{value:"Scaffold a React App",id:"scaffold-a-react-app",level:2},{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"Configure Vite to use Relay",id:"configure-vite-to-use-relay",level:2},{value:"Configure the Relay Compiler",id:"configure-the-relay-compiler",level:2},{value:"Configure your Relay Environment",id:"configure-your-relay-environment",level:2},{value:"Define your first Relay component",id:"define-your-first-relay-component",level:2},{value:"Define your first fragment",id:"define-your-first-fragment",level:2},{value:"Compile and run your app",id:"compile-and-run-your-app",level:2}],d={toc:c};function u(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.mdx)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"This quick start guide will start with a new React app using Vite and show you how to add Relay to it."),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"If you'd prefer an automated approach, ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/tobias-tengler/create-relay-app"},(0,i.mdx)("inlineCode",{parentName:"a"},"create-relay-app"))," by Tobias Tengler will walk you through adding Relay to an existing React app via a series of prompts: ",(0,i.mdx)("inlineCode",{parentName:"p"},"npm create @tobiastengler/relay-app"))),(0,i.mdx)("p",null,"We will be building a simple app which shows Star Wars movies fetched from the ",(0,i.mdx)("a",{parentName:"p",href:"https://graphql.org/swapi-graphql/"},"example Star Wars GraphQL API")," hosted by graphql.org."),(0,i.mdx)("h2",{id:"scaffold-a-react-app"},"Scaffold a React App"),(0,i.mdx)("p",null,"We\u2019ll start with a ",(0,i.mdx)("a",{parentName:"p",href:"https://vite.dev/"},"Vite")," React app using TypeScript."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npm create vite -- --template react-ts\n")),(0,i.mdx)("p",null,"You\u2019ll be prompted for a project name. Type: ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay-example")),(0,i.mdx)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"cd relay-example\n\n# Runtime dependencies\nnpm install relay-runtime react-relay\n# Dev dependencies\nnpm install --save-dev babel-plugin-relay graphql relay-compiler\n# Types\nnpm install --save-dev @types/relay-runtime @types/react-relay\n")),(0,i.mdx)("h2",{id:"configure-vite-to-use-relay"},"Configure Vite to use Relay"),(0,i.mdx)("p",null,"Relay uses a ",(0,i.mdx)("a",{parentName:"p",href:"/docs/getting-started/babel-plugin/"},"Babel plugin")," to insert code generated by the Relay compiler into your bundle. We can enable the Relay Babel plugin we installed earliery by configuring the React Vite plugin."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="vite.config.ts"',title:'"vite.config.ts"'},"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    // change-line\n    react({ babel: { plugins: [\"relay\"] } })\n  ],\n})\n")),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/getting-started/babel-plugin/"},"Babel Plugin")," for information about how to configure the Babel plugin for other build systems."),(0,i.mdx)("h2",{id:"configure-the-relay-compiler"},"Configure the Relay Compiler"),(0,i.mdx)("p",null,"Next we will download the GraphQL schema for the Star Wars GraphQL endpoint."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"curl -O https://raw.githubusercontent.com/graphql/swapi-graphql/refs/heads/master/schema.graphql\n")),(0,i.mdx)("p",null,"And define our ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay.config.json")," config file which tells the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/guides/compiler/"},"Relay Compiler")," which schema file we want it to use and other details about our project."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json",metastring:'title="relay.config.json"',title:'"relay.config.json"'},'{\n  "src": "./src",\n  "schema": "./schema.graphql",\n  "language": "typescript"\n}\n')),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/guides/compiler/"},"Relay Compiler")," for more information about configuring and running the Relay compiler."),(0,i.mdx)("h2",{id:"configure-your-relay-environment"},"Configure your Relay Environment"),(0,i.mdx)("p",null,"To allow components within our application to fetch GraphQL we configure a Relay Environment to fetch from our test endpoint and add it to React context."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/main.tsx"',title:'"src/main.tsx"'},'import { StrictMode, Suspense } from "react";\nimport { createRoot } from "react-dom/client";\nimport "./index.css";\nimport App from "./App.tsx";\nimport { RelayEnvironmentProvider } from "react-relay";\nimport { Environment, Network, FetchFunction } from "relay-runtime";\n\nconst HTTP_ENDPOINT = "https://graphql.org/graphql/";\n\nconst fetchGraphQL: FetchFunction = async (request, variables) => {\n  const resp = await fetch(HTTP_ENDPOINT, {\n    method: "POST",\n    headers: { "Content-Type": "application/json" },\n    body: JSON.stringify({ query: request.text, variables }),\n  });\n  if (!resp.ok) {\n    throw new Error("Response failed.");\n  }\n  return await resp.json();\n};\n\nconst environment = new Environment({\n  network: Network.create(fetchGraphQL),\n});\n\ncreateRoot(document.getElementById("root")!).render(\n  <StrictMode>\n    <RelayEnvironmentProvider environment={environment}>\n      <Suspense fallback="Loading...">\n        <App />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  </StrictMode>\n);\n')),(0,i.mdx)("p",null,"See ",(0,i.mdx)("a",{parentName:"p",href:"/docs/api-reference/relay-runtime/relay-environment"},"Relay Environment")," for an overview of the Relay Environment and how to configure it."),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},(0,i.mdx)("inlineCode",{parentName:"p"},"<RelayEnvironmentProvider>")," exposes your Environment via ",(0,i.mdx)("a",{parentName:"p",href:"https://react.dev/learn/passing-data-deeply-with-context"},"React context"),", so it must wrap your entire application.")),(0,i.mdx)("h2",{id:"define-your-first-relay-component"},"Define your first Relay component"),(0,i.mdx)("p",null,"Finally we can start defining the data we want to fetch and build our UI. Our app will fetch a list of films and render each one using a ",(0,i.mdx)("inlineCode",{parentName:"p"},"<Film>")," component."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import { AppQuery } from "./__generated__/AppQuery.graphql";\nimport { graphql, useLazyLoadQuery } from "react-relay";\nimport Film from "./Film";\n\nexport default function App() {\n  const data = useLazyLoadQuery<AppQuery>(\n    graphql`\n      query AppQuery {\n        allFilms {\n          films {\n            id\n            ...Film_item\n          }\n        }\n      }\n    `,\n    {}\n  );\n\n  const films = data?.allFilms?.films?.filter((film) => film != null);\n\n  return (\n    <div>\n      <h1>Star Wars Films</h1>\n      {films?.map((film) => (\n        <Film key={film.id} film={film} />\n      ))}\n    </div>\n  );\n}\n')),(0,i.mdx)("h2",{id:"define-your-first-fragment"},"Define your first fragment"),(0,i.mdx)("p",null,"One of Relay's core principles is that each component should define its own data dependencies. So, we define our ",(0,i.mdx)("inlineCode",{parentName:"p"},"<Film>")," component using a ",(0,i.mdx)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#fragments"},"GraphQL Fragment"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/Film.tsx"',title:'"src/Film.tsx"'},'import { graphql, useFragment } from "react-relay";\nimport type { Film_item$key } from "./__generated__/Film_item.graphql";\n\nexport default function FilmListItem(props: { film: Film_item$key; }) {\n  const film = useFragment<Film_item$key>(\n    graphql`\n      fragment Film_item on Film {\n        title\n        director\n      }\n    `,\n    props.film\n  );\n\n  return (\n    <li>\n      <b>{film.title}</b>: directed by <i>{film.director}</i>\n    </li>\n  );\n}\n')),(0,i.mdx)("h2",{id:"compile-and-run-your-app"},"Compile and run your app"),(0,i.mdx)("p",null,"All that\u2019s left is to run the Relay compiler and start your app!"),(0,i.mdx)("p",null,"The Relay compiler generates TypeScript types and combines your queries and fragments into optimized representations. You have to run the Relay compiler each time you modify your GraphQL queries or fragments."),(0,i.mdx)("admonition",{type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"If you have ",(0,i.mdx)("a",{parentName:"p",href:"https://facebook.github.io/watchman/"},"Watchman")," installed you can run ",(0,i.mdx)("inlineCode",{parentName:"p"},"npx relay-compiler --watch")," to have the compiler run in watch mode, but you'll need to run ",(0,i.mdx)("inlineCode",{parentName:"p"},'echo "{}" > .watchmanconfig')," to create a Watchman root.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"npx relay-compiler\nnpm run dev\n")),(0,i.mdx)("p",null,"You should now be able to open your app in a browser: ",(0,i.mdx)("a",{parentName:"p",href:"http://localhost:5173/"},"http://localhost:5173/")),(0,i.mdx)("p",null,"May the force be with you!"))}u.isMDXComponent=!0}}]);