==================================== INPUT ====================================
//- foo.js

graphql`query fooCustomScalarLiteralArgQuery($arg: CustomScalarType! = "foobar", $arg_server: CustomServerScalarType! = "bazquux") {
    extension_field(custom_scalar_arg: "a_string") {
        __typename
    }
    extension_scalar_field(custom_scalar_arg: $arg)
    with_var: extension_server_scalar(custom_server_scalar_arg: $arg_server)
    with_literal: extension_server_scalar(custom_server_scalar_arg: "another_string")
}`

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql",
   "eagerEsModules": true,
   "featureFlags": {
      "enable_relay_resolver_transform": true,
      "enable_relay_resolver_mutations": true,
      "enable_strict_custom_scalars": true
   },
   "schemaExtensions": [
      "./extensions.graphql"
   ]
}

//- schema.graphql

type Query

scalar CustomServerScalarType

//- extensions.graphql

scalar CustomScalarType

type Obj {
    some_key: Int!
}

extend type Query {
    extension_field(custom_scalar_arg: CustomScalarType!): Obj
    extension_scalar_field(custom_scalar_arg: CustomScalarType!): Int
    extension_server_scalar(custom_server_scalar_arg: CustomServerScalarType!): Int
}
==================================== OUTPUT ===================================
✖︎ Unexpected scalar literal `"foobar"` provided in a position expecting custom scalar type `CustomScalarType`. This value should come from a variable.

  foo.js:2:72
    2 │ query fooCustomScalarLiteralArgQuery($arg: CustomScalarType! = "foobar", $arg_server: CustomServerScalarType! = "bazquux") {
      │                                                                ^^^^^^^^
    3 │     extension_field(custom_scalar_arg: "a_string") {

✖︎ Unexpected scalar literal `"bazquux"` provided in a position expecting custom scalar type `CustomServerScalarType`. This value should come from a variable.

  foo.js:2:121
    2 │ query fooCustomScalarLiteralArgQuery($arg: CustomScalarType! = "foobar", $arg_server: CustomServerScalarType! = "bazquux") {
      │                                                                                                                 ^^^^^^^^^
    3 │     extension_field(custom_scalar_arg: "a_string") {
