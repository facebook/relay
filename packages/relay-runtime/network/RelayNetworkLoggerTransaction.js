/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RelayNetworkLoggerTransaction
 * @flow
 * @format
 */

'use strict';

/* eslint-disable no-console-disallow */

const invariant = require('invariant');

import type {CacheConfig} from 'RelayCombinedEnvironmentTypes';
import type {ConcreteBatch} from 'RelayConcreteNode';
import type {QueryPayload, UploadableMap} from 'RelayNetworkTypes';
import type {Variables} from 'RelayTypes';

let queryID = 1;

export interface IRelayNetworkLoggerTransaction {
  constructor(config: TransactionConfig): void,
  addLog(label: string, ...values: Array<any>): void,
  commitLogs(error: ?Error, response: ?QueryPayload, status?: ?string): void,
  flushLogs(error: ?Error, response: ?QueryPayload, status?: ?string): void,
  markCommitted(): void,
  getCacheConfig(): ?CacheConfig,
  getIdentifier(): string,
  getLogsToPrint(): Array<RelayNetworkLog>,
  getOperation(): ConcreteBatch,
  getUploadables(): ?UploadableMap,
  getVariables(): Variables,
}

type TransactionConfig = {
  operation: ConcreteBatch,
  variables: Variables,
  cacheConfig: ?CacheConfig,
  uploadables?: ?UploadableMap,
};

export type RelayNetworkLog = {
  label: string,
  values: Array<any>,
};

/**
 * A network logger transaction is an object that you can construct, pass around
 * and add logs to, ultimately calling its commit method when you're done.
 * Different transactions can have different commit logic. One might use
 * `console.log`. Another might ping a logging endpoint. Another might add some
 * autogenerated logs before doing either of the foregoing.
 */
class RelayNetworkLoggerTransaction implements IRelayNetworkLoggerTransaction {
  _cacheConfig: ?CacheConfig;
  _hasCommittedLogs = false;
  _id: number;
  _logs: Array<RelayNetworkLog> = [];
  _operation: ConcreteBatch;
  _uploadables: ?UploadableMap;
  _variables: Variables;

  constructor({
    operation,
    variables,
    cacheConfig,
    uploadables,
  }: TransactionConfig): void {
    this._cacheConfig = cacheConfig;
    this._id = queryID++;
    this._operation = operation;
    this._uploadables = uploadables;
    this._variables = variables;
  }

  addLog(label: string, ...values: Array<any>): void {
    this._logs.push({label, values});
  }

  clearLogs(): void {
    this._logs = [];
  }

  printLogs(error: ?Error, response: ?QueryPayload, status?: ?string): void {
    const transactionId = this.getIdentifier();
    console.groupCollapsed(`%c${transactionId}`, error ? 'color:red' : '');
    console.timeEnd && console.timeEnd(transactionId);
    this.getLogsToPrint(error, response, status).forEach(({label, values}) => {
      console.log(`${label}:`, ...values);
    });
    console.groupEnd();
  }

  commitLogs(error: ?Error, response: ?QueryPayload, status?: ?string): void {
    invariant(
      this._hasCommittedLogs === false,
      `The logs for transaction #${this._id} have already been committed.`,
    );
    this.printLogs(error, response, status);
    this.markCommitted();
  }

  markCommitted() {
    this._hasCommittedLogs = true;
  }

  flushLogs(error: ?Error, response: ?QueryPayload, status?: ?string): void {
    invariant(
      this._hasCommittedLogs === false,
      `The logs for transaction #${this._id} have already been committed.`,
    );
    this.printLogs(error, response, status);
    this.clearLogs();
  }

  getCacheConfig(): ?CacheConfig {
    return this._cacheConfig;
  }

  getIdentifier(): string {
    return `[${this._id}] Relay Modern: ${this._operation.name}`;
  }

  getLogsToPrint(
    error: ?Error,
    response: ?QueryPayload,
    status: ?string,
  ): Array<RelayNetworkLog> {
    return this._logs;
  }

  getOperation(): ConcreteBatch {
    return this._operation;
  }

  getUploadables(): ?UploadableMap {
    return this._uploadables;
  }

  getVariables(): Variables {
    return this._variables;
  }
}

module.exports = RelayNetworkLoggerTransaction;
