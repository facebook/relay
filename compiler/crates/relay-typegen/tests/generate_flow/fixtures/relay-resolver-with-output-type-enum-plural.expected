==================================== INPUT ====================================
fragment Foo_user on User {
  poppy: pop_star_names
}

fragment PopStarNameResolverFragment_name on User {
  name
  address {
    street
  }
  parents {
    lastName
  }
}

# %extensions%

extend type User {
  pop_star_names: [TestEnums]
    @relay_resolver(
      fragment_name: "PopStarNameResolverFragment_name"
      import_path: "PopStarNameResolver"
      has_output_type: true
    )
}
==================================== OUTPUT ===================================
import type { PopStarNameResolverFragment_name$key } from "PopStarNameResolverFragment_name.graphql";
export type TestEnums = "mark" | "zuck" | "%future added value";
import type { FragmentType } from "relay-runtime";
import userPopStarNamesResolverType from "PopStarNameResolver";
// Type assertion validating that `userPopStarNamesResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userPopStarNamesResolverType: (
  rootKey: PopStarNameResolverFragment_name$key,
) => ?$ReadOnlyArray<?TestEnums>);
declare export opaque type Foo_user$fragmentType: FragmentType;
export type Foo_user$data = {|
  +poppy: ?$ReadOnlyArray<?TestEnums>,
  +$fragmentType: Foo_user$fragmentType,
|};
export type Foo_user$key = {
  +$data?: Foo_user$data,
  +$fragmentSpreads: Foo_user$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type PopStarNameResolverFragment_name$fragmentType: FragmentType;
export type PopStarNameResolverFragment_name$data = {|
  +address: ?{|
    +street: ?string,
  |},
  +name: ?string,
  +parents: $ReadOnlyArray<{|
    +lastName: ?string,
  |}>,
  +$fragmentType: PopStarNameResolverFragment_name$fragmentType,
|};
export type PopStarNameResolverFragment_name$key = {
  +$data?: PopStarNameResolverFragment_name$data,
  +$fragmentSpreads: PopStarNameResolverFragment_name$fragmentType,
  ...
};
