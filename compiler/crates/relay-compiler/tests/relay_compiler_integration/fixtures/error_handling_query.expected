==================================== INPUT ====================================
//- foo.js
graphql`
  query fooQuery @throwOnFieldError {
    me {
     name
    }
  }`;

//- relay.config.json
{
  "language": "flow",
  "schema": "./schema.graphql",
  "experimentalEmitSemanticNullabilityTypes": true
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/fooQuery.graphql.js
/**
 * <auto-generated> SignedSource<<3fedea69ae18a5e38707e31bf973e7af>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ConcreteRequest, Query } from 'relay-runtime';
export type fooQuery$variables = {||};
export type fooQuery$data = {|
  +me: ?{|
    +name: ?string,
  |},
|};
export type fooQuery = {|
  response: fooQuery$data,
  variables: fooQuery$variables,
|};
*/

var node/*: ConcreteRequest*/ = (function(){
var v0 = [
  {
    "alias": null,
    "args": null,
    "concreteType": "User",
    "kind": "LinkedField",
    "name": "me",
    "plural": false,
    "selections": [
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "name",
        "storageKey": null
      }
    ],
    "storageKey": null
  }
];
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": {
      "throwOnFieldError": true
    },
    "name": "fooQuery",
    "selections": (v0/*: any*/),
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": (v0/*: any*/)
  },
  "params": {
    "cacheID": "198e3a8388d05ebc6755d5ddbd3fa905",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": "query fooQuery {\n  me {\n    name\n  }\n}\n"
  }
};
})();

(node/*: any*/).hash = "5837704043bd9bdb31bb77ca3ed3856e";

module.exports = ((node/*: any*/)/*: Query<
  fooQuery$variables,
  fooQuery$data,
>*/);
