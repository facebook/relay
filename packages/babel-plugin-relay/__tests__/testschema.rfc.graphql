type Root {
  customScalar(arg: JSON): [SearchResult]
  node(id: ID!): Node
  nodes(ids: [ID!]): [Node]
  media(id: Int): Media
  viewer: Viewer
  search(query: SearchInput!): [SearchResult]
  searchAll(queries: [SearchInput!]!): [SearchResult]
  _invalid: InvalidType
  actor: Actor
}

scalar JSON

interface Actor {
  name: String
}

type InvalidType {
  node(id: Int): Node
}

type SearchResult {
  title: String
}

input SearchInput {
  queryText: String
}

type Mutation {
  actorSubscribe(input: ActorSubscribeInput): ActorSubscribeResponsePayload
  actorSubscribeSubscribe(input: ActorSubscribeInput!): ActorSubscribeResponsePayload
  mutationMissingArg: FakeResponsePayload
  mutationWrongArgs(foo: String): FakeResponsePayload
}

input ActorSubscribeInput {
  clientMutationId: String
  actorId: String
}

type ActorSubscribeResponsePayload {
  clientMutationId: String
  actor: User
}

type FakeResponsePayload {
  clientMutationId: String
}

type Subscription {
  likeStory(input: LikeStorySubscriptionInput): LikeStorySubscriptionPayload
}

input LikeStorySubscriptionInput {
  clientSubscriptionId: String
  story: String
}

type LikeStorySubscriptionPayload {
  clientSubscriptionId: String
  doesViewerLike: Boolean
}

type ActorSubscribeSubscription {
  clientMutationId: String
}

type Viewer {
  configs: ConfigsConnection
  newsFeed(first: Int): NewsFeedConnection
  pendingPosts(first: Int): PendingPostsConnection
  actor: User
}

type ConfigsConnection {
  edges: [ConfigsConnectionEdge]
}

type ConfigsConnectionEdge {
  cursor: String
  node: Config
}

type Config {
  name: String
}

type NewsFeedConnection {
  edges: [NewsFeedConnectionEdge]
  pageInfo: PageInfo
}

type NewsFeedConnectionEdge {
  cursor: String
  node: Node
}

type Story implements Node {
  message: String
  actors: [User]
  attachments: [Node]
  id: String
}

type PendingPostsConnection {
  count: Int
  edges: [PendingPostsConnectionEdge]
  pageInfo: PageInfo
}

type PendingPostsConnectionEdge {
  cursor: String
  node: PendingPost
}

type PendingPost {
  text: String
}

type UserConnection {
  count: Int
  edges: [UserConnectionEdge]
  nodes: [User]
  pageInfo: PageInfo
}

type UserConnectionEdge {
  cursor: String
  node: User
  source: User
}

interface Node {
  id: String
}

type User implements Node Actor {
  friends(first: Int, last: Int, orderby: [String], find: String, isViewerFriend: Boolean, gender: Gender, before: ID, after: ID): UserConnection
  id: String
  name: String
  profilePicture(size: Int): ProfilePicture
  websites: [String]
  userOnlyField: String
  gender: Gender
  firstName(if: Boolean, unless: Boolean): String
  fakeConnection: FakeConnection
}

type Page implements Actor {
  name: String
}

type FakeConnection {
  edges: [FakeEdge]
}

type FakeEdge {
  cursor: String
  node: FakeNode
}

type FakeNode implements Node {
  id: String
}

type ProfilePicture {
  uri: String
  width: Int
  height: Int
}

type PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  endCursor: String
  startCursor: String
}

enum Gender {
  MALE,
  FEMALE,
  UNKNOWN
}

union Media = Story | ProfilePicture

schema {
  query: Root
  mutation: Mutation
  subscription: Subscription
}
