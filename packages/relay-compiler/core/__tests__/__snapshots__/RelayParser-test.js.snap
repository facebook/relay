// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayParser matches expected output: argument-complex-object.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query ObjectArgument($text: String!) {
  checkinSearchQuery(query: {query: $text, query: "YES"}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Duplicated field name 'query' in the input object.

GraphQL request:3:44
2 | query ObjectArgument($text: String!) {
3 |   checkinSearchQuery(query: {query: $text, query: "YES"}) {
  |                                            ^
4 |     query

GraphQL request:3:30
2 | query ObjectArgument($text: String!) {
3 |   checkinSearchQuery(query: {query: $text, query: "YES"}) {
  |                              ^
4 |     query
`;

exports[`RelayParser matches expected output: argumentDefinitions-with-typo.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment TestFragment on User
  @argumentDefinitions(
    id: {type: "ID"}
    size: {type: "[Int]", defaultValu: [100]} # uh-oh, typo
  ) {
  ...Foo @arguments(size: $size)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected definition for variable '$size' to be an object with the shape: '{type: string, defaultValue?: mixed}.

GraphQL request:5:11
4 |     id: {type: "ID"}
5 |     size: {type: "[Int]", defaultValu: [100]} # uh-oh, typo
  |           ^
6 |   ) {
`;

exports[`RelayParser matches expected output: client-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query BestFriendsQuery($id: ID!) {
  node(id: $id) {
    ...BestFriends
  }
}

fragment BestFriends on User {
  # this is the only field that is part of the base schema
  id
  # fields defined in type extensions are skipped
  best_friends {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
  ... on User {
    foo {
      # fragments on extension types are skipped
      ...FooFragment
      ... on Foo {
        id
      }
    }
  }
}

fragment FooFragment on Foo {
  id
}

extend type User {
  best_friends: FriendsConnection
  foo: Foo
}

type Foo {
  id: ID!
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 77,
      source: {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "BestFriendsQuery",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 23,
          end: 31,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "id",
        type: "ID!",
        defaultValue: null,
      },
    ],
    directives: [],
    selections: [
      LinkedField {
        alias: "node",
        args: [
          Argument {
            loc: Source {
              start: 42,
              end: 49,
              source: {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "id",
            value: Variable {
              loc: Source {
                start: 46,
                end: 49,
                source: {
                  "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "id",
              type: "ID",
            },
            type: "ID",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 37,
          end: 75,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "node",
        selections: [
          FragmentSpread {
            args: [],
            metadata: null,
            loc: Source {
              start: 57,
              end: 71,
              source: {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "BestFriends",
            directives: [],
          },
        ],
        type: "Node",
      },
    ],
    type: "Query",
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 79,
      end: 492,
      source: {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "BestFriends",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 171,
          end: 173,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
      LinkedField {
        alias: "best_friends",
        args: [],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 226,
          end: 346,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "best_friends",
        selections: [
          LinkedField {
            alias: "edges",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 245,
              end: 303,
              source: {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "edges",
            selections: [
              ScalarField {
                alias: "cursor",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 259,
                  end: 265,
                  source: {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "cursor",
                type: "String",
              },
              LinkedField {
                alias: "node",
                args: [],
                connection: false,
                directives: [],
                handles: null,
                loc: Source {
                  start: 272,
                  end: 297,
                  source: {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "node",
                selections: [
                  ScalarField {
                    alias: "id",
                    args: [],
                    directives: [],
                    handles: null,
                    loc: Source {
                      start: 287,
                      end: 289,
                      source: {
                        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1,
                        },
                      },
                    },
                    metadata: null,
                    name: "id",
                    type: "ID!",
                  },
                ],
                type: "User",
              },
            ],
            type: "[FriendsEdge]",
          },
          LinkedField {
            alias: "pageInfo",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 308,
              end: 342,
              source: {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "pageInfo",
            selections: [
              ScalarField {
                alias: "hasNextPage",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 325,
                  end: 336,
                  source: {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "hasNextPage",
                type: "Boolean",
              },
            ],
            type: "PageInfo",
          },
        ],
        type: "FriendsConnection",
      },
      InlineFragment {
        directives: [],
        loc: Source {
          start: 349,
          end: 490,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        selections: [
          LinkedField {
            alias: "foo",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 367,
              end: 486,
              source: {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "foo",
            selections: [
              FragmentSpread {
                args: [],
                metadata: null,
                loc: Source {
                  start: 428,
                  end: 442,
                  source: {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                name: "FooFragment",
                directives: [],
              },
              InlineFragment {
                directives: [],
                loc: Source {
                  start: 449,
                  end: 480,
                  source: {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                selections: [
                  ScalarField {
                    alias: "id",
                    args: [],
                    directives: [],
                    handles: null,
                    loc: Source {
                      start: 470,
                      end: 472,
                      source: {
                        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1,
                        },
                      },
                    },
                    metadata: null,
                    name: "id",
                    type: "ID!",
                  },
                ],
                typeCondition: "Foo",
              },
            ],
            type: "Foo",
          },
        ],
        typeCondition: "User",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 494,
      end: 530,
      source: {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "FooFragment",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 526,
          end: 528,
          source: {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on User {\\n    foo {\\n      # fragments on extension types are skipped\\n      ...FooFragment\\n      ... on Foo {\\n        id\\n      }\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n  foo: Foo\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
    ],
    type: "Foo",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: client-fields.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeWithInvalidClientTypeSpread($id: ID!) {
  node(id: $id) {
    ... on Node {
      ...FooFragment
    }
  }
}

fragment FooFragment on Foo {
  id
}

type Foo {
  id: ID!
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Fragment 'FooFragment' cannot be spread here as objects of type 'Node' can never be of type 'Foo'. Possible concrete types include 'Comment', 'Feedback', 'Page', etc.

GraphQL request:4:12
3 |   node(id: $id) {
4 |     ... on Node {
  |            ^
5 |       ...FooFragment

GraphQL request:5:7
4 |     ... on Node {
5 |       ...FooFragment
  |       ^
6 |     }
`;

exports[`RelayParser matches expected output: complex-object-with-missing-fields.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
mutation LikeMutation($feedbackId: ID!) {
  feedbackLikeStrict(input: {feedbackId: $feedbackId}) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Missing non-optional fields: 'userID', 'clientMutationId' for input type 'FeedbackLikeInputStrict'.

GraphQL request:3:29
2 | mutation LikeMutation($feedbackId: ID!) {
3 |   feedbackLikeStrict(input: {feedbackId: $feedbackId}) {
  |                             ^
4 |     __typename
`;

exports[`RelayParser matches expected output: directive-generic.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id @customDirective(level: 11)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 66,
      source: {
        "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestFragment",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [
          Directive {
            loc: Source {
              start: 37,
              end: 64,
              source: {
                "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "customDirective",
            args: [
              Argument {
                loc: Source {
                  start: 54,
                  end: 63,
                  source: {
                    "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                name: "level",
                value: Literal {
                  loc: Source {
                    start: 61,
                    end: 63,
                    source: {
                      "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  value: 11,
                },
                type: "Int!",
              },
            ],
          },
        ],
        handles: null,
        loc: Source {
          start: 34,
          end: 64,
          source: {
            "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: directive-include.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id @include(if: $Cond)
  ... on User @include(if: $Cond) {
    firstName
  }
  ...Foo @include(if: $Cond)
}

fragment Foo on User {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 141,
      source: {
        "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestFragment",
    selections: [
      Condition {
        condition: Variable {
          loc: Source {
            start: 50,
            end: 55,
            source: {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          variableName: "Cond",
          type: "Boolean!",
        },
        loc: Source {
          start: 37,
          end: 56,
          source: {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        passingValue: true,
        selections: [
          ScalarField {
            alias: "id",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 34,
              end: 56,
              source: {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "id",
            type: "ID!",
          },
        ],
      },
      Condition {
        condition: Variable {
          loc: Source {
            start: 84,
            end: 89,
            source: {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          variableName: "Cond",
          type: "Boolean!",
        },
        loc: Source {
          start: 71,
          end: 90,
          source: {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        passingValue: true,
        selections: [
          InlineFragment {
            directives: [],
            loc: Source {
              start: 59,
              end: 110,
              source: {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            selections: [
              ScalarField {
                alias: "firstName",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 97,
                  end: 106,
                  source: {
                    "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "firstName",
                type: "String",
              },
            ],
            typeCondition: "User",
          },
        ],
      },
      Condition {
        condition: Variable {
          loc: Source {
            start: 133,
            end: 138,
            source: {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1,
              },
            },
          },
          variableName: "Cond",
          type: "Boolean!",
        },
        loc: Source {
          start: 120,
          end: 139,
          source: {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        passingValue: true,
        selections: [
          FragmentSpread {
            args: [],
            metadata: null,
            loc: Source {
              start: 113,
              end: 139,
              source: {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "Foo",
            directives: [],
          },
        ],
      },
    ],
    type: "User",
    argumentDefinitions: [
      RootArgumentDefinition {
        loc: Source {
          start: 133,
          end: 138,
          source: {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "Cond",
        type: "Boolean!",
      },
    ],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 143,
      end: 172,
      source: {
        "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "Foo",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 168,
          end: 170,
          source: {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n\\nfragment Foo on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: directive-match-on-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Example on User @match(key: "Example") {
  friends {
    edges {
      node {
        profilePicture(preset: $preset) {
          uri
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid directives @match found on FRAGMENT_DEFINITION.

GraphQL request:2:26
1 | # expected-to-throw
2 | fragment Example on User @match(key: "Example") {
  |                          ^
3 |   friends {
`;

exports[`RelayParser matches expected output: directive-module-match-on-query.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery($id: ID!) @module @match {
  foo: node(id: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid directives @module, @match found on QUERY.

GraphQL request:2:27
1 | # expected-to-throw
2 | query TestQuery($id: ID!) @module @match {
  |                           ^
3 |   foo: node(id: $id) {

GraphQL request:2:35
1 | # expected-to-throw
2 | query TestQuery($id: ID!) @module @match {
  |                                   ^
3 |   foo: node(id: $id) {
`;

exports[`RelayParser matches expected output: directive-module-on-field.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Example on User {
  friends {
    edges {
      node {
        profilePicture @module(preset: $preset) {
          uri
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid directives @module found on FIELD.

GraphQL request:6:24
5 |       node {
6 |         profilePicture @module(preset: $preset) {
  |                        ^
7 |           uri
`;

exports[`RelayParser matches expected output: directive-unknown-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery {
  task(number: 123) {
    title @include(shouldInclude: true)
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown argument 'shouldInclude' on directive '@include'.

GraphQL request:4:20
3 |   task(number: 123) {
4 |     title @include(shouldInclude: true)
  |                    ^
5 |   }
`;

exports[`RelayParser matches expected output: enum-values.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query EnumValueQuery {
  me {
    profilePicture(preset: LARGE) {
      uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 87,
      source: {
        "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "EnumValueQuery",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "me",
        args: [],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 25,
          end: 85,
          source: {
            "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "me",
        selections: [
          LinkedField {
            alias: "profilePicture",
            args: [
              Argument {
                loc: Source {
                  start: 49,
                  end: 62,
                  source: {
                    "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                name: "preset",
                value: Literal {
                  loc: Source {
                    start: 57,
                    end: 62,
                    source: {
                      "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  value: "LARGE",
                },
                type: "PhotoSize",
              },
            ],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 34,
              end: 81,
              source: {
                "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "profilePicture",
            selections: [
              ScalarField {
                alias: "uri",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 72,
                  end: 75,
                  source: {
                    "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "uri",
                type: "String",
              },
            ],
            type: "Image",
          },
        ],
        type: "User",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: enum-values.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query EnumValueQuery1 {
  me {
    profilePicture(preset: "LARGE") {
      # error: string not enum
      uri
    }
  }
}

query EnumValueQuery2 {
  me {
    profilePicture(preset: 128) {
      # error: int not enum
      uri
    }
  }
}

query EnumValueQuery3 {
  me {
    profilePicture(preset: [LARGE]) {
      # error: list of enum, not enum
      uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Encountered 3 errors:
- Expected a value matching type 'PhotoSize'. Possible values: SMALL or LARGE?'
  
  GraphQL request:4:28
  3 |   me {
  4 |     profilePicture(preset: "LARGE") {
    |                            ^
  5 |       # error: string not enum
- Expected a value matching type 'PhotoSize'. Possible values: SMALL or LARGE?'
  
  GraphQL request:13:28
  12 |   me {
  13 |     profilePicture(preset: 128) {
     |                            ^
  14 |       # error: int not enum
- Expected a value matching type 'PhotoSize'. Possible values: SMALL or LARGE?'
  
  GraphQL request:22:28
  21 |   me {
  22 |     profilePicture(preset: [LARGE]) {
     |                            ^
  23 |       # error: list of enum, not enum
`;

exports[`RelayParser matches expected output: field-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery {
  task(number: 123) {
    title
  }
  settings(environment: WEB) {
    notificationSounds
  }
  checkinSearchQuery(query: {query: "Relay"}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 175,
      source: {
        "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestQuery",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "task",
        args: [
          Argument {
            loc: Source {
              start: 25,
              end: 36,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "number",
            value: Literal {
              loc: Source {
                start: 33,
                end: 36,
                source: {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: 123,
            },
            type: "Int",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 20,
          end: 53,
          source: {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "task",
        selections: [
          ScalarField {
            alias: "title",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 44,
              end: 49,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "title",
            type: "String",
          },
        ],
        type: "Task",
      },
      LinkedField {
        alias: "settings",
        args: [
          Argument {
            loc: Source {
              start: 65,
              end: 81,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environment",
            value: Literal {
              loc: Source {
                start: 78,
                end: 81,
                source: {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: "WEB",
            },
            type: "Environment",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 56,
          end: 111,
          source: {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "settings",
        selections: [
          ScalarField {
            alias: "notificationSounds",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 89,
              end: 107,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "notificationSounds",
            type: "Boolean",
          },
        ],
        type: "Settings",
      },
      LinkedField {
        alias: "checkinSearchQuery",
        args: [
          Argument {
            loc: Source {
              start: 133,
              end: 156,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Literal {
              loc: Source {
                start: 140,
                end: 156,
                source: {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "query": "Relay",
              },
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 114,
          end: 173,
          source: {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 164,
              end: 169,
              source: {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: field-unknown-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery {
  task(task_id: 123) {
    title
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown argument 'task_id' on field 'task' of type 'Query'.

GraphQL request:3:8
2 | query TestQuery {
3 |   task(task_id: 123) {
  |        ^
4 |     title
`;

exports[`RelayParser matches expected output: fragment-spread-on-wrong-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Foo on Image {
  uri
}

query myQuery {
  node(id: "<my-id>") {
    ...Foo
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Fragment 'Foo' cannot be spread here as objects of type 'Node' can never be of type 'Image'. Possible concrete types include 'Comment', 'Feedback', 'Page', etc.

GraphQL request:8:5
7 |   node(id: "<my-id>") {
8 |     ...Foo
  |     ^
9 |   }
`;

exports[`RelayParser matches expected output: fragment-with-argument-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Foo on User @argumentDefinitions(user: {type: "User!"}) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected type "User!" to be an input type in the "user" argument definitions.

GraphQL request:2:49
1 | # expected-to-throw
2 | fragment Foo on User @argumentDefinitions(user: {type: "User!"}) {
  |                                                 ^
3 |   id
`;

exports[`RelayParser matches expected output: fragment-with-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User
  @argumentDefinitions(
    id: {type: "ID!"}
    size: {type: "[Int]", defaultValue: [100]}
  ) {
  profilePicture(size: $PictureSize) {
    uri
  }
  withDefaultArg: profilePicture(size: $size) {
    uri
  }
  ...Foo @arguments(localId: $id)
}

fragment Foo on User @argumentDefinitions(localId: {type: "ID!"}) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 275,
      source: {
        "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestFragment",
    selections: [
      LinkedField {
        alias: "profilePicture",
        args: [
          Argument {
            loc: Source {
              start: 146,
              end: 164,
              source: {
                "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "size",
            value: Variable {
              loc: Source {
                start: 152,
                end: 164,
                source: {
                  "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "PictureSize",
              type: "[Int]",
            },
            type: "[Int]",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 131,
          end: 179,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "profilePicture",
        selections: [
          ScalarField {
            alias: "uri",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 172,
              end: 175,
              source: {
                "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "uri",
            type: "String",
          },
        ],
        type: "Image",
      },
      LinkedField {
        alias: "withDefaultArg",
        args: [
          Argument {
            loc: Source {
              start: 213,
              end: 224,
              source: {
                "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "size",
            value: Variable {
              loc: Source {
                start: 219,
                end: 224,
                source: {
                  "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "size",
              type: "[Int]",
            },
            type: "[Int]",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 182,
          end: 239,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "profilePicture",
        selections: [
          ScalarField {
            alias: "uri",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 232,
              end: 235,
              source: {
                "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "uri",
            type: "String",
          },
        ],
        type: "Image",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 260,
              end: 272,
              source: {
                "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "localId",
            value: Variable {
              loc: Source {
                start: 269,
                end: 272,
                source: {
                  "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "id",
              type: null,
            },
            type: null,
          },
        ],
        metadata: null,
        loc: Source {
          start: 242,
          end: 273,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "Foo",
        directives: [],
      },
    ],
    type: "User",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 58,
          end: 75,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "id",
        type: "ID!",
        defaultValue: null,
      },
      LocalArgumentDefinition {
        loc: Source {
          start: 80,
          end: 122,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "size",
        type: "[Int]",
        defaultValue: [
          100,
        ],
      },
      RootArgumentDefinition {
        loc: Source {
          start: 152,
          end: 164,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "PictureSize",
        type: "[Int]",
      },
    ],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 277,
      end: 351,
      source: {
        "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "Foo",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 347,
          end: 349,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
    ],
    type: "User",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 319,
          end: 341,
          source: {
            "body": "fragment TestFragment on User\\n  @argumentDefinitions(\\n    id: {type: \\"ID!\\"}\\n    size: {type: \\"[Int]\\", defaultValue: [100]}\\n  ) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}) {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "localId",
        type: "ID!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-arguments-invalid-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment TestFragment on User
  @argumentDefinitions(myArg: {type: "UnknownType"}) {
  profilePicture(size: $PictureSize) {
    uri
  }
  withDefaultArg: profilePicture(size: $size) {
    uri
  }
  ...Foo @arguments(localId: $myArg)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown type "UnknownType" referenced in the argument definitions.

GraphQL request:3:24
2 | fragment TestFragment on User
3 |   @argumentDefinitions(myArg: {type: "UnknownType"}) {
  |                        ^
4 |   profilePicture(size: $PictureSize) {
`;

exports[`RelayParser matches expected output: fragment-with-literal-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  ...ChildFragment @arguments(pictureSize: [42])
}

fragment ChildFragment on User
  @argumentDefinitions(pictureSize: {type: "[Int]"}) {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 84,
      source: {
        "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 64,
              end: 81,
              source: {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "pictureSize",
            value: Literal {
              loc: Source {
                start: 77,
                end: 81,
                source: {
                  "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                42,
              ],
            },
            type: "[Int]",
          },
        ],
        metadata: null,
        loc: Source {
          start: 36,
          end: 82,
          source: {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 86,
      end: 224,
      source: {
        "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "profilePicture",
        args: [
          Argument {
            loc: Source {
              start: 189,
              end: 207,
              source: {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "size",
            value: Variable {
              loc: Source {
                start: 195,
                end: 207,
                source: {
                  "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "pictureSize",
              type: "[Int]",
            },
            type: "[Int]",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 174,
          end: 222,
          source: {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "profilePicture",
        selections: [
          ScalarField {
            alias: "uri",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 215,
              end: 218,
              source: {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "uri",
            type: "String",
          },
        ],
        type: "Image",
      },
    ],
    type: "User",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 140,
          end: 168,
          source: {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}) {\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "pictureSize",
        type: "[Int]",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_settings: settings(environment: MOBILE) {
    cache_id
  }
  ...ChildFragment @arguments(environment: WEB)
}

fragment ChildFragment on Query
  @argumentDefinitions(environment: {type: "Environment!"}) {
  settings(environment: $environment) {
    cache_id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 152,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      LinkedField {
        alias: "mobile_settings",
        args: [
          Argument {
            loc: Source {
              start: 63,
              end: 82,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environment",
            value: Literal {
              loc: Source {
                start: 76,
                end: 82,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: "MOBILE",
            },
            type: "Environment",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 37,
          end: 102,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "settings",
        selections: [
          ScalarField {
            alias: "cache_id",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 90,
              end: 98,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "cache_id",
            type: "ID",
          },
        ],
        type: "Settings",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 133,
              end: 149,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environment",
            value: Literal {
              loc: Source {
                start: 146,
                end: 149,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: "WEB",
            },
            type: "Environment!",
          },
        ],
        metadata: null,
        loc: Source {
          start: 105,
          end: 150,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "Query",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 154,
      end: 306,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "settings",
        args: [
          Argument {
            loc: Source {
              start: 259,
              end: 284,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environment",
            value: Variable {
              loc: Source {
                start: 272,
                end: 284,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "environment",
              type: "Environment",
            },
            type: "Environment",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 250,
          end: 304,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "settings",
        selections: [
          ScalarField {
            alias: "cache_id",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 292,
              end: 300,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "cache_id",
            type: "ID",
          },
        ],
        type: "Settings",
      },
    ],
    type: "Query",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 209,
          end: 244,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(environment: {type: \\"Environment!\\"}) {\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "environment",
        type: "Environment!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments-into-enum-list.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environments: WEB)
}

fragment ChildFragment on User
  @argumentDefinitions(environments: {type: "[Environment!]!"}) {
  checkins(environments: $environments) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 152,
      source: {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      LinkedField {
        alias: "mobile_checkins",
        args: [
          Argument {
            loc: Source {
              start: 62,
              end: 84,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Literal {
              loc: Source {
                start: 76,
                end: 84,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                "MOBILE",
              ],
            },
            type: "[Environment!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 36,
          end: 101,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkins",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 92,
              end: 97,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 132,
              end: 149,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Literal {
              loc: Source {
                start: 146,
                end: 149,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: "WEB",
            },
            type: "[Environment!]!",
          },
        ],
        metadata: null,
        loc: Source {
          start: 104,
          end: 150,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 154,
      end: 308,
      source: {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "checkins",
        args: [
          Argument {
            loc: Source {
              start: 262,
              end: 289,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Variable {
              loc: Source {
                start: 276,
                end: 289,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "environments",
              type: "[Environment!]!",
            },
            type: "[Environment!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 253,
          end: 306,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkins",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 297,
              end: 302,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "User",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 208,
          end: 247,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "environments",
        type: "[Environment!]!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments-into-enum-list-indirect.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environment: WEB) # OK: matches defined type
}

fragment ChildFragment on User
  @argumentDefinitions(environment: {type: "Environment!"}) {
  # variables of a non-list type cannot flow into list types,
  # the singular -> list promotion only works for literal values
  checkins(environments: $environment) {
    # expected error
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Variable '$environment' was defined as type 'Environment!' but used in a location expecting the type '[Environment!]!'

GraphQL request:10:24
 9 | fragment ChildFragment on User
10 |   @argumentDefinitions(environment: {type: "Environment!"}) {
   |                        ^
11 |   # variables of a non-list type cannot flow into list types,

GraphQL request:13:26
12 |   # the singular -> list promotion only works for literal values
13 |   checkins(environments: $environment) {
   |                          ^
14 |     # expected error
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-list-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environments: [WEB])
}

fragment ChildFragment on User
  @argumentDefinitions(environments: {type: "[Environment!]!"}) {
  checkins(environments: $environments) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 154,
      source: {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      LinkedField {
        alias: "mobile_checkins",
        args: [
          Argument {
            loc: Source {
              start: 62,
              end: 84,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Literal {
              loc: Source {
                start: 76,
                end: 84,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                "MOBILE",
              ],
            },
            type: "[Environment!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 36,
          end: 101,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkins",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 92,
              end: 97,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 132,
              end: 151,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Literal {
              loc: Source {
                start: 146,
                end: 151,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                "WEB",
              ],
            },
            type: "[Environment!]!",
          },
        ],
        metadata: null,
        loc: Source {
          start: 104,
          end: 152,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 156,
      end: 310,
      source: {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "checkins",
        args: [
          Argument {
            loc: Source {
              start: 264,
              end: 291,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "environments",
            value: Variable {
              loc: Source {
                start: 278,
                end: 291,
                source: {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "environments",
              type: "[Environment!]!",
            },
            type: "[Environment!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 255,
          end: 308,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkins",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 299,
              end: 304,
              source: {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "User",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 210,
          end: 249,
          source: {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User\\n  @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}) {\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "environments",
        type: "[Environment!]!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-object-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_checkins: checkinSearchQuery(query: {query: "mobile"}) {
    query
  }
  ...ChildFragment @arguments(query: {query: "web"})
}

fragment ChildFragment on Query
  @argumentDefinitions(query: {type: "CheckinSearchInput!"}) {
  checkinSearchQuery(query: $query) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 169,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      LinkedField {
        alias: "mobile_checkins",
        args: [
          Argument {
            loc: Source {
              start: 73,
              end: 97,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Literal {
              loc: Source {
                start: 80,
                end: 97,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "query": "mobile",
              },
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 37,
          end: 114,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 105,
              end: 110,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 145,
              end: 166,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Literal {
              loc: Source {
                start: 152,
                end: 166,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "query": "web",
              },
            },
            type: "CheckinSearchInput!",
          },
        ],
        metadata: null,
        loc: Source {
          start: 117,
          end: 167,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "Query",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 171,
      end: 319,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "checkinSearchQuery",
        args: [
          Argument {
            loc: Source {
              start: 287,
              end: 300,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Variable {
              loc: Source {
                start: 294,
                end: 300,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "query",
              type: "CheckinSearchInput",
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 268,
          end: 317,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 308,
              end: 313,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "Query",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 226,
          end: 262,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}) {\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "query",
        type: "CheckinSearchInput!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-object-list-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_checkins: checkinSearchQuery(query: {query: "mobile"}) {
    query
  }
  ...ChildFragment @arguments(inputs: [{query: "web"}])
}

fragment ChildFragment on Query
  @argumentDefinitions(inputs: {type: "[CheckinSearchInput!]!"}) {
  checkinSearchQuery(query: {query: "foo", inputs: $inputs}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 172,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ParentFragment",
    selections: [
      LinkedField {
        alias: "mobile_checkins",
        args: [
          Argument {
            loc: Source {
              start: 73,
              end: 97,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Literal {
              loc: Source {
                start: 80,
                end: 97,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "query": "mobile",
              },
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 37,
          end: 114,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 105,
              end: 110,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
      FragmentSpread {
        args: [
          Argument {
            loc: Source {
              start: 145,
              end: 169,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "inputs",
            value: Literal {
              loc: Source {
                start: 153,
                end: 169,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                {
                  "query": "web",
                },
              ],
            },
            type: "[CheckinSearchInput!]!",
          },
        ],
        metadata: null,
        loc: Source {
          start: 117,
          end: 170,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "ChildFragment",
        directives: [],
      },
    ],
    type: "Query",
    argumentDefinitions: [],
  },
  Fragment {
    directives: [],
    loc: Source {
      start: 174,
      end: 351,
      source: {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ChildFragment",
    selections: [
      LinkedField {
        alias: "checkinSearchQuery",
        args: [
          Argument {
            loc: Source {
              start: 294,
              end: 332,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: ObjectValue {
              loc: Source {
                start: 301,
                end: 332,
                source: {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              fields: [
                ObjectFieldValue {
                  loc: Source {
                    start: 302,
                    end: 314,
                    source: {
                      "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  name: "query",
                  value: Literal {
                    loc: Source {
                      start: 309,
                      end: 314,
                      source: {
                        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1,
                        },
                      },
                    },
                    value: "foo",
                  },
                },
                ObjectFieldValue {
                  loc: Source {
                    start: 316,
                    end: 331,
                    source: {
                      "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  name: "inputs",
                  value: Variable {
                    loc: Source {
                      start: 324,
                      end: 331,
                      source: {
                        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1,
                        },
                      },
                    },
                    variableName: "inputs",
                    type: "[CheckinSearchInput]",
                  },
                },
              ],
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 275,
          end: 349,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 340,
              end: 345,
              source: {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "Query",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 229,
          end: 269,
          source: {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query\\n  @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}) {\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "inputs",
        type: "[CheckinSearchInput!]!",
        defaultValue: null,
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: fragment-with-undefined-literal-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentFragment on User {
  ...ChildFragment @arguments(pictureSize: 42) # error: $pictureSize not defined
}

fragment ChildFragment on User {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Literal @arguments values are only supported when the argument is defined with @argumentDefinitions. Check the definition of fragment 'ChildFragment'.

GraphQL request:3:44
2 | fragment ParentFragment on User {
3 |   ...ChildFragment @arguments(pictureSize: 42) # error: $pictureSize not defined
  |                                            ^
4 | }

GraphQL request:6:1
5 | 
6 | fragment ChildFragment on User {
  | ^
7 |   profilePicture(size: $pictureSize) {
`;

exports[`RelayParser matches expected output: fragment-with-undefined-variable-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentFragment on User {
  ...ChildFragment @arguments(pictureSize: $querySize) # error: $pictureSize not defined
}

fragment ChildFragment on User {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Variable @arguments values are only supported when the argument is defined with @argumentDefinitions. Check the definition of fragment 'ChildFragment'.

GraphQL request:3:44
2 | fragment ParentFragment on User {
3 |   ...ChildFragment @arguments(pictureSize: $querySize) # error: $pictureSize not defined
  |                                            ^
4 | }

GraphQL request:6:1
5 | 
6 | fragment ChildFragment on User {
  | ^
7 |   profilePicture(size: $pictureSize) {
`;

exports[`RelayParser matches expected output: fragment-with-unnecessary-unchecked-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment TestFragment on User
  @argumentDefinitions(
    id: {type: "ID!"}
    size: {type: "[Int]", defaultValue: [100]}
  ) {
  profilePicture(size: $PictureSize) {
    uri
  }
  withDefaultArg: profilePicture(size: $size) {
    uri
  }
  ...Foo @uncheckedArguments_DEPRECATED(localId: $id)
}

fragment Foo on User @argumentDefinitions(localId: {type: "ID!"}) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid use of @uncheckedArguments_DEPRECATED: all arguments are defined, use @arguments instead.

GraphQL request:13:10
12 |   }
13 |   ...Foo @uncheckedArguments_DEPRECATED(localId: $id)
   |          ^
14 | }
`;

exports[`RelayParser matches expected output: inline-fragment-on-wrong-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment InlineFragment on Node {
  ... on Image {
    url
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Fragment cannot be spread here as objects of type 'Node' can never be of type 'Image'. Possible concrete types include 'Comment', 'Feedback', 'Page', etc.

GraphQL request:2:28
1 | # expected-to-throw
2 | fragment InlineFragment on Node {
  |                            ^
3 |   ... on Image {

GraphQL request:3:10
2 | fragment InlineFragment on Node {
3 |   ... on Image {
  |          ^
4 |     url
`;

exports[`RelayParser matches expected output: inline-fragment-with-invalid-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment InlineFragment on Node {
  ... on UnkwnownType {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Inline fragments can only be on object, interface or union types, got unknown type 'UnkwnownType'.

GraphQL request:3:10
2 | fragment InlineFragment on Node {
3 |   ... on UnkwnownType {
  |          ^
4 |     name
`;

exports[`RelayParser matches expected output: inline-untyped-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment InlineUntypedFragment on User {
  ... {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 63,
      source: {
        "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "InlineUntypedFragment",
    selections: [
      InlineFragment {
        directives: [],
        loc: Source {
          start: 43,
          end: 61,
          source: {
            "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        selections: [
          ScalarField {
            alias: "name",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 53,
              end: 57,
              source: {
                "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "name",
            type: "String",
          },
        ],
        typeCondition: "User",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: invalid-argument-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query InvalidQueryArgument($user: User!) {
  node(id: $user) {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected type "User!" to be an input type.

GraphQL request:2:35
1 | # expected-to-throw
2 | query InvalidQueryArgument($user: User!) {
  |                                   ^
3 |   node(id: $user) {
`;

exports[`RelayParser matches expected output: linked-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10)
    @__clientField(handle: "clientFriends")
    @__clientField(handle: "otherFriends") {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 162,
      source: {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\")\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LinkedHandleField",
    selections: [
      LinkedField {
        alias: "friends",
        args: [
          Argument {
            loc: Source {
              start: 47,
              end: 56,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\")\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "first",
            value: Literal {
              loc: Source {
                start: 54,
                end: 56,
                source: {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\")\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: 10,
            },
            type: "Int",
          },
        ],
        connection: false,
        directives: [],
        handles: [
          {
            "name": "clientFriends",
            "key": "",
            "filters": null,
            "dynamicKey": null,
          },
          {
            "name": "otherFriends",
            "key": "",
            "filters": null,
            "dynamicKey": null,
          },
        ],
        loc: Source {
          start: 39,
          end: 160,
          source: {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\")\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "friends",
        selections: [
          ScalarField {
            alias: "count",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 151,
              end: 156,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\")\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "count",
            type: "Int",
          },
        ],
        type: "FriendsConnection",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: linked-handle-field-with-filters.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10, orderby: $orderby)
    @__clientField(handle: "clientFriends", filters: ["first", "orderby"]) {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 169,
      source: {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LinkedHandleField",
    selections: [
      LinkedField {
        alias: "friends",
        args: [
          Argument {
            loc: Source {
              start: 47,
              end: 56,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "first",
            value: Literal {
              loc: Source {
                start: 54,
                end: 56,
                source: {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: 10,
            },
            type: "Int",
          },
          Argument {
            loc: Source {
              start: 58,
              end: 75,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "orderby",
            value: Variable {
              loc: Source {
                start: 67,
                end: 75,
                source: {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "orderby",
              type: "[String]",
            },
            type: "[String]",
          },
        ],
        connection: false,
        directives: [],
        handles: [
          {
            "name": "clientFriends",
            "key": "",
            "filters": [
              "first",
              "orderby",
            ],
            "dynamicKey": null,
          },
        ],
        loc: Source {
          start: 39,
          end: 167,
          source: {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "friends",
        selections: [
          ScalarField {
            alias: "count",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 158,
              end: 163,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "count",
            type: "Int",
          },
        ],
        type: "FriendsConnection",
      },
    ],
    type: "User",
    argumentDefinitions: [
      RootArgumentDefinition {
        loc: Source {
          start: 67,
          end: 75,
          source: {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "orderby",
        type: "[String]",
      },
    ],
  },
]
`;

exports[`RelayParser matches expected output: linked-handle-field-with-key.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10)
    @__clientField(handle: "clientFriends", key: "LinkedHandleField_friends") {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 153,
      source: {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LinkedHandleField",
    selections: [
      LinkedField {
        alias: "friends",
        args: [
          Argument {
            loc: Source {
              start: 47,
              end: 56,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "first",
            value: Literal {
              loc: Source {
                start: 54,
                end: 56,
                source: {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: 10,
            },
            type: "Int",
          },
        ],
        connection: false,
        directives: [],
        handles: [
          {
            "name": "clientFriends",
            "key": "LinkedHandleField_friends",
            "filters": null,
            "dynamicKey": null,
          },
        ],
        loc: Source {
          start: 39,
          end: 151,
          source: {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "friends",
        selections: [
          ScalarField {
            alias: "count",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 142,
              end: 147,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "count",
            type: "Int",
          },
        ],
        type: "FriendsConnection",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: linked-handle-filter.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10)
    @__clientField(handle: "clientFriends", filters: ["first"])
    @__clientField(handle: "otherFriends") {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 182,
      source: {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"])\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LinkedHandleField",
    selections: [
      LinkedField {
        alias: "friends",
        args: [
          Argument {
            loc: Source {
              start: 47,
              end: 56,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"])\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "first",
            value: Literal {
              loc: Source {
                start: 54,
                end: 56,
                source: {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"])\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: 10,
            },
            type: "Int",
          },
        ],
        connection: false,
        directives: [],
        handles: [
          {
            "name": "clientFriends",
            "key": "",
            "filters": [
              "first",
            ],
            "dynamicKey": null,
          },
          {
            "name": "otherFriends",
            "key": "",
            "filters": null,
            "dynamicKey": null,
          },
        ],
        loc: Source {
          start: 39,
          end: 180,
          source: {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"])\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "friends",
        selections: [
          ScalarField {
            alias: "count",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 171,
              end: 176,
              source: {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10)\\n    @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"])\\n    @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "count",
            type: "Int",
          },
        ],
        type: "FriendsConnection",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: list-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ListArgumentQuery {
  route(waypoints: [{lat: "0.0", lon: "0.0"}]) {
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 109,
      source: {
        "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ListArgumentQuery",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "route",
        args: [
          Argument {
            loc: Source {
              start: 34,
              end: 71,
              source: {
                "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "waypoints",
            value: Literal {
              loc: Source {
                start: 45,
                end: 71,
                source: {
                  "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                {
                  "lat": "0.0",
                  "lon": "0.0",
                },
              ],
            },
            type: "[WayPoint!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 28,
          end: 107,
          source: {
            "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "route",
        selections: [
          LinkedField {
            alias: "steps",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 79,
              end: 103,
              source: {
                "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "steps",
            selections: [
              ScalarField {
                alias: "note",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 93,
                  end: 97,
                  source: {
                    "body": "query ListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "note",
                type: "String",
              },
            ],
            type: "[RouteStep]",
          },
        ],
        type: "Route",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: list-argument-complex-object.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ListArgumentQuery($waypoint: WayPoint!) {
  route(waypoints: [$waypoint, {lat: "0.0", lon: "0.0"}]) {
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 142,
      source: {
        "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ListArgumentQuery",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 24,
          end: 44,
          source: {
            "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "waypoint",
        type: "WayPoint!",
        defaultValue: null,
      },
    ],
    directives: [],
    selections: [
      LinkedField {
        alias: "route",
        args: [
          Argument {
            loc: Source {
              start: 56,
              end: 104,
              source: {
                "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "waypoints",
            value: ListValue {
              loc: Source {
                start: 67,
                end: 104,
                source: {
                  "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              items: [
                Variable {
                  loc: Source {
                    start: 68,
                    end: 77,
                    source: {
                      "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  variableName: "waypoint",
                  type: "WayPoint!",
                },
                Literal {
                  loc: Source {
                    start: 79,
                    end: 103,
                    source: {
                      "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  value: {
                    "lat": "0.0",
                    "lon": "0.0",
                  },
                },
              ],
            },
            type: "[WayPoint!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 50,
          end: 140,
          source: {
            "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "route",
        selections: [
          LinkedField {
            alias: "steps",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 112,
              end: 136,
              source: {
                "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "steps",
            selections: [
              ScalarField {
                alias: "note",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 126,
                  end: 130,
                  source: {
                    "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "note",
                type: "String",
              },
            ],
            type: "[RouteStep]",
          },
        ],
        type: "Route",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: list-of-enums.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  traits # This is a list of enums.
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 69,
      source: {
        "body": "fragment TestFragment on User {\\n  traits # This is a list of enums.\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestFragment",
    selections: [
      ScalarField {
        alias: "traits",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 34,
          end: 40,
          source: {
            "body": "fragment TestFragment on User {\\n  traits # This is a list of enums.\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "traits",
        type: "[PersonalityTraits]",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: literal-list-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralListArgumentQuery {
  route(waypoints: [{lat: "0.0", lon: "0.0"}]) {
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 116,
      source: {
        "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LiteralListArgumentQuery",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "route",
        args: [
          Argument {
            loc: Source {
              start: 41,
              end: 78,
              source: {
                "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "waypoints",
            value: Literal {
              loc: Source {
                start: 52,
                end: 78,
                source: {
                  "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: [
                {
                  "lat": "0.0",
                  "lon": "0.0",
                },
              ],
            },
            type: "[WayPoint!]!",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 35,
          end: 114,
          source: {
            "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "route",
        selections: [
          LinkedField {
            alias: "steps",
            args: [],
            connection: false,
            directives: [],
            handles: null,
            loc: Source {
              start: 86,
              end: 110,
              source: {
                "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "steps",
            selections: [
              ScalarField {
                alias: "note",
                args: [],
                directives: [],
                handles: null,
                loc: Source {
                  start: 100,
                  end: 104,
                  source: {
                    "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{lat: \\"0.0\\", lon: \\"0.0\\"}]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1,
                    },
                  },
                },
                metadata: null,
                name: "note",
                type: "String",
              },
            ],
            type: "[RouteStep]",
          },
        ],
        type: "Route",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: literal-list-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query LiteralListArgumentQuery1 {
  route(
    waypoints: [
      {
        lat: 0.0 # error: float not string
        lon: "0.0"
      }
    ]
  ) {
    steps {
      note
    }
  }
}

query LiteralListArgumentQuery2 {
  route(waypoints: ["waypoint"]) {
    # error: string not input object
    steps {
      note
    }
  }
}

query LiteralListArgumentQuery3 {
  route(waypoints: "waypoint") {
    # error: string not list
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Encountered 3 errors:
- Expected a value matching type 'String'.
  
  GraphQL request:6:14
  5 |       {
  6 |         lat: 0.0 # error: float not string
    |              ^
  7 |         lon: "0.0"
- Expected a value matching type 'WayPoint!'.
  
  GraphQL request:18:21
  17 | query LiteralListArgumentQuery2 {
  18 |   route(waypoints: ["waypoint"]) {
     |                     ^
  19 |     # error: string not input object
- Expected a value matching type 'WayPoint!'.
  
  GraphQL request:27:20
  26 | query LiteralListArgumentQuery3 {
  27 |   route(waypoints: "waypoint") {
     |                    ^
  28 |     # error: string not list
`;

exports[`RelayParser matches expected output: literal-object-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralObjectArgument {
  checkinSearchQuery(query: {query: "Facebook"}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 96,
      source: {
        "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {query: \\"Facebook\\"}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "LiteralObjectArgument",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "checkinSearchQuery",
        args: [
          Argument {
            loc: Source {
              start: 51,
              end: 77,
              source: {
                "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {query: \\"Facebook\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: Literal {
              loc: Source {
                start: 58,
                end: 77,
                source: {
                  "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {query: \\"Facebook\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "query": "Facebook",
              },
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 32,
          end: 94,
          source: {
            "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {query: \\"Facebook\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 85,
              end: 90,
              source: {
                "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {query: \\"Facebook\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: literal-object-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query LiteralObjectArgument1 {
  checkinSearchQuery(
    query: {
      unknownField: "Facebook" # error: unknown field
    }
  ) {
    query
  }
}

query LiteralObjectArgument2 {
  checkinSearchQuery(
    query: {
      query: FACEBOOK # error: enum not string
    }
  ) {
    query
  }
}

query LiteralObjectArgument3 {
  checkinSearchQuery(query: FACEBOOK) {
    # error: enum not object
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Encountered 3 errors:
- Unknown field 'unknownField' on type 'CheckinSearchInput'.
  
  GraphQL request:5:7
  4 |     query: {
  5 |       unknownField: "Facebook" # error: unknown field
    |       ^
  6 |     }
- Expected a value matching type 'String'.
  
  GraphQL request:15:14
  14 |     query: {
  15 |       query: FACEBOOK # error: enum not string
     |              ^
  16 |     }
- Expected a value matching type 'CheckinSearchInput'.
  
  GraphQL request:23:29
  22 | query LiteralObjectArgument3 {
  23 |   checkinSearchQuery(query: FACEBOOK) {
     |                             ^
  24 |     # error: enum not object
`;

exports[`RelayParser matches expected output: null-values.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NullValuesQuery {
  items(filter: {date: null}) {
    date
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 70,
      source: {
        "body": "query NullValuesQuery {\\n  items(filter: {date: null}) {\\n    date\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "NullValuesQuery",
    argumentDefinitions: [],
    directives: [],
    selections: [
      LinkedField {
        alias: "items",
        args: [
          Argument {
            loc: Source {
              start: 32,
              end: 52,
              source: {
                "body": "query NullValuesQuery {\\n  items(filter: {date: null}) {\\n    date\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "filter",
            value: Literal {
              loc: Source {
                start: 40,
                end: 52,
                source: {
                  "body": "query NullValuesQuery {\\n  items(filter: {date: null}) {\\n    date\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              value: {
                "date": null,
              },
            },
            type: "ItemFilterInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 26,
          end: 68,
          source: {
            "body": "query NullValuesQuery {\\n  items(filter: {date: null}) {\\n    date\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "items",
        selections: [
          ScalarField {
            alias: "date",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 60,
              end: 64,
              source: {
                "body": "query NullValuesQuery {\\n  items(filter: {date: null}) {\\n    date\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "date",
            type: "String",
          },
        ],
        type: "ItemFilterResult",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: null-values.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NullValuesQuery {
  node_id_required(id: null) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected a value matching type 'ID!'.

GraphQL request:3:24
2 | query NullValuesQuery {
3 |   node_id_required(id: null) {
  |                        ^
4 |     id
`;

exports[`RelayParser matches expected output: object-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ObjectArgument($text: String!) {
  checkinSearchQuery(query: {query: $text}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 100,
      source: {
        "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ObjectArgument",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 21,
          end: 35,
          source: {
            "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "text",
        type: "String!",
        defaultValue: null,
      },
    ],
    directives: [],
    selections: [
      LinkedField {
        alias: "checkinSearchQuery",
        args: [
          Argument {
            loc: Source {
              start: 60,
              end: 81,
              source: {
                "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "query",
            value: ObjectValue {
              loc: Source {
                start: 67,
                end: 81,
                source: {
                  "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              fields: [
                ObjectFieldValue {
                  loc: Source {
                    start: 68,
                    end: 80,
                    source: {
                      "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1,
                      },
                    },
                  },
                  name: "query",
                  value: Variable {
                    loc: Source {
                      start: 75,
                      end: 80,
                      source: {
                        "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1,
                        },
                      },
                    },
                    variableName: "text",
                    type: "String",
                  },
                },
              ],
            },
            type: "CheckinSearchInput",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 41,
          end: 98,
          source: {
            "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "checkinSearchQuery",
        selections: [
          ScalarField {
            alias: "query",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 89,
              end: 94,
              source: {
                "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {query: $text}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "query",
            type: "String",
          },
        ],
        type: "CheckinSearchResult",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: scalar-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ScalarHandleField on User {
  name
    @__clientField(handle: "clientName")
    @__clientField(handle: "clientName2")
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 128,
      source: {
        "body": "fragment ScalarHandleField on User {\\n  name\\n    @__clientField(handle: \\"clientName\\")\\n    @__clientField(handle: \\"clientName2\\")\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "ScalarHandleField",
    selections: [
      ScalarField {
        alias: "name",
        args: [],
        directives: [],
        handles: [
          {
            "name": "clientName",
            "key": "",
            "filters": null,
            "dynamicKey": null,
          },
          {
            "name": "clientName2",
            "key": "",
            "filters": null,
            "dynamicKey": null,
          },
        ],
        loc: Source {
          start: 39,
          end: 126,
          source: {
            "body": "fragment ScalarHandleField on User {\\n  name\\n    @__clientField(handle: \\"clientName\\")\\n    @__clientField(handle: \\"clientName2\\")\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "name",
        type: "String",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: simple-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Fragment {
    directives: [],
    loc: Source {
      start: 0,
      end: 38,
      source: {
        "body": "fragment TestFragment on User {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestFragment",
    selections: [
      ScalarField {
        alias: "id",
        args: [],
        directives: [],
        handles: null,
        loc: Source {
          start: 34,
          end: 36,
          source: {
            "body": "fragment TestFragment on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "id",
        type: "ID!",
      },
    ],
    type: "User",
    argumentDefinitions: [],
  },
]
`;

exports[`RelayParser matches expected output: simple-query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  foo: node(id: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  Root {
    operation: "query",
    loc: Source {
      start: 0,
      end: 63,
      source: {
        "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1,
        },
      },
    },
    metadata: null,
    name: "TestQuery",
    argumentDefinitions: [
      LocalArgumentDefinition {
        loc: Source {
          start: 16,
          end: 24,
          source: {
            "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        name: "id",
        type: "ID!",
        defaultValue: null,
      },
    ],
    directives: [],
    selections: [
      LinkedField {
        alias: "foo",
        args: [
          Argument {
            loc: Source {
              start: 40,
              end: 47,
              source: {
                "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            name: "id",
            value: Variable {
              loc: Source {
                start: 44,
                end: 47,
                source: {
                  "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1,
                  },
                },
              },
              variableName: "id",
              type: "ID",
            },
            type: "ID",
          },
        ],
        connection: false,
        directives: [],
        handles: null,
        loc: Source {
          start: 30,
          end: 61,
          source: {
            "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1,
            },
          },
        },
        metadata: null,
        name: "node",
        selections: [
          ScalarField {
            alias: "id",
            args: [],
            directives: [],
            handles: null,
            loc: Source {
              start: 55,
              end: 57,
              source: {
                "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1,
                },
              },
            },
            metadata: null,
            name: "id",
            type: "ID!",
          },
        ],
        type: "Node",
      },
    ],
    type: "Query",
  },
]
`;

exports[`RelayParser matches expected output: undefined-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Foo on User {
  ...SomeUndefinedFragment
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown fragment 'SomeUndefinedFragment'.

GraphQL request:3:6
2 | fragment Foo on User {
3 |   ...SomeUndefinedFragment
  |      ^
4 | }
`;

exports[`RelayParser matches expected output: undefined-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery($id: UnknownType) {
  node(id: "someid") {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown type: 'UnknownType'.

GraphQL request:2:22
1 | # expected-to-throw
2 | query TestQuery($id: UnknownType) {
  |                      ^
3 |   node(id: "someid") {
`;

exports[`RelayParser matches expected output: unknown-fragment-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment Foo on UnknownType {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Fragment "Foo" cannot condition on unknown type "UnknownType".

GraphQL request:2:17
1 | # expected-to-throw
2 | fragment Foo on UnknownType {
  |                 ^
3 |   id
`;

exports[`RelayParser should error on fragment spread arguments with literal out of bounds values 1`] = `
"Expected a value matching type 'Int'.

GraphQL request:4:38
3 |         # Number.MAX_SAFE_INTEGER is 9007199254740991
4 |         ...TestChild @arguments(foo: 10000000000000000)
  |                                      ^
5 |       }"
`;

exports[`RelayParser should error when parsing fragment that references undeclared variables are used with differing types 1`] = `
"Variable '$id' was used in locations expecting the conflicting types 'ID' and 'Int'.

GraphQL request:2:14
1 | fragment TestFragment on Query {
2 |     node(id: $id) {
  |              ^
3 |       id

GraphQL request:5:18
4 |     }
5 |     task(number: $id) {
  |                  ^
6 |       title"
`;
