// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RelayParser matches expected output: argumentDefinitions-with-typo.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User @argumentDefinitions(
  id: {type: "ID"}
  size: {type: "[Int]", defaultValu: [100]} # uh-oh, typo
) {
  ...Foo @arguments(size: $size)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 1 error(s):
- Expected definition for variable '$size' to be an object with the shape: '{type: string, defaultValue?: mixed}.
  
  GraphQL request (3:9)
  2:   id: {type: "ID"}
  3:   size: {type: "[Int]", defaultValu: [100]} # uh-oh, typo
             ^
  4: ) {
  
`;

exports[`RelayParser matches expected output: client-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query BestFriendsQuery($id: ID!) {
  node(id: $id) {
    ...BestFriends
  }
}

fragment BestFriends on User {
  # this is the only field that is part of the base schema
  id
  # fields defined in type extensions are skipped
  best_friends {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
  ... on Node {
   # fragments on extension types are skipped
    ...FooFragment
    ... on Foo {
      id
    }
  }
}

fragment FooFragment on Foo {
  id
}

extend type User {
  best_friends: FriendsConnection
}

type Foo {
  id: ID!
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 77,
      "source": {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "BestFriendsQuery",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 23,
          "end": 31,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!",
        "defaultValue": null
      }
    ],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 42,
              "end": 49,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "id",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 46,
                "end": 49,
                "source": {
                  "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "id",
              "type": "ID"
            },
            "type": "ID"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 37,
          "end": 75,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "node",
        "selections": [
          {
            "kind": "FragmentSpread",
            "args": [],
            "metadata": null,
            "loc": {
              "kind": "Source",
              "start": 57,
              "end": 71,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "name": "BestFriends",
            "directives": []
          }
        ],
        "type": "Node"
      }
    ],
    "type": "Query"
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 79,
      "end": 465,
      "source": {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "BestFriends",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 171,
          "end": 173,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!"
      },
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 226,
          "end": 346,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "best_friends",
        "selections": [
          {
            "kind": "LinkedField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 245,
              "end": 303,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "edges",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 259,
                  "end": 265,
                  "source": {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "cursor",
                "type": "String"
              },
              {
                "kind": "LinkedField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 272,
                  "end": 297,
                  "source": {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "node",
                "selections": [
                  {
                    "kind": "ScalarField",
                    "alias": null,
                    "args": [],
                    "directives": [],
                    "loc": {
                      "kind": "Source",
                      "start": 287,
                      "end": 289,
                      "source": {
                        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1
                        }
                      }
                    },
                    "metadata": null,
                    "name": "id",
                    "type": "ID!"
                  }
                ],
                "type": "User"
              }
            ],
            "type": "[FriendsEdge]"
          },
          {
            "kind": "LinkedField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 308,
              "end": 342,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "pageInfo",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 325,
                  "end": 336,
                  "source": {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "hasNextPage",
                "type": "Boolean"
              }
            ],
            "type": "PageInfo"
          }
        ],
        "type": "FriendsConnection"
      },
      {
        "kind": "InlineFragment",
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 349,
          "end": 463,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "selections": [
          {
            "kind": "FragmentSpread",
            "args": [],
            "metadata": null,
            "loc": {
              "kind": "Source",
              "start": 413,
              "end": 427,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "name": "FooFragment",
            "directives": []
          },
          {
            "kind": "InlineFragment",
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 432,
              "end": 459,
              "source": {
                "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 451,
                  "end": 453,
                  "source": {
                    "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "id",
                "type": "ID!"
              }
            ],
            "typeCondition": "Foo"
          }
        ],
        "typeCondition": "Node"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 467,
      "end": 503,
      "source": {
        "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "FooFragment",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 499,
          "end": 501,
          "source": {
            "body": "query BestFriendsQuery($id: ID!) {\\n  node(id: $id) {\\n    ...BestFriends\\n  }\\n}\\n\\nfragment BestFriends on User {\\n  # this is the only field that is part of the base schema\\n  id\\n  # fields defined in type extensions are skipped\\n  best_friends {\\n    edges {\\n      cursor\\n      node {\\n        id\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n  ... on Node {\\n   # fragments on extension types are skipped\\n    ...FooFragment\\n    ... on Foo {\\n      id\\n    }\\n  }\\n}\\n\\nfragment FooFragment on Foo {\\n  id\\n}\\n\\nextend type User {\\n  best_friends: FriendsConnection\\n}\\n\\ntype Foo {\\n  id: ID!\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!"
      }
    ],
    "type": "Foo",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: directive-generic.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id @customDirective(level: 11)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 66,
      "source": {
        "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestFragment",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [
          {
            "kind": "Directive",
            "loc": {
              "kind": "Source",
              "start": 37,
              "end": 64,
              "source": {
                "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "customDirective",
            "args": [
              {
                "kind": "Argument",
                "loc": {
                  "kind": "Source",
                  "start": 54,
                  "end": 63,
                  "source": {
                    "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "level",
                "value": {
                  "kind": "Literal",
                  "loc": {
                    "kind": "Source",
                    "start": 61,
                    "end": 63,
                    "source": {
                      "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "value": 11
                },
                "type": "Int!"
              }
            ]
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 34,
          "end": 64,
          "source": {
            "body": "fragment TestFragment on User {\\n  id @customDirective(level: 11)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: directive-include.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id @include(if: $Cond)
  ... on User @include(if: $Cond) {
    firstName
  }
  ...Foo @include(if: $Cond)
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 141,
      "source": {
        "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestFragment",
    "selections": [
      {
        "kind": "Condition",
        "condition": {
          "kind": "Variable",
          "loc": {
            "kind": "Source",
            "start": 50,
            "end": 55,
            "source": {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1
              }
            }
          },
          "metadata": null,
          "variableName": "Cond",
          "type": "Boolean!"
        },
        "loc": {
          "kind": "Source",
          "start": 37,
          "end": 56,
          "source": {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "passingValue": true,
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 34,
              "end": 56,
              "source": {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "id",
            "type": "ID!"
          }
        ]
      },
      {
        "kind": "Condition",
        "condition": {
          "kind": "Variable",
          "loc": {
            "kind": "Source",
            "start": 84,
            "end": 89,
            "source": {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1
              }
            }
          },
          "metadata": null,
          "variableName": "Cond",
          "type": "Boolean!"
        },
        "loc": {
          "kind": "Source",
          "start": 71,
          "end": 90,
          "source": {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "passingValue": true,
        "selections": [
          {
            "kind": "InlineFragment",
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 59,
              "end": 110,
              "source": {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 97,
                  "end": 106,
                  "source": {
                    "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "firstName",
                "type": "String"
              }
            ],
            "typeCondition": "User"
          }
        ]
      },
      {
        "kind": "Condition",
        "condition": {
          "kind": "Variable",
          "loc": {
            "kind": "Source",
            "start": 133,
            "end": 138,
            "source": {
              "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
              "name": "GraphQL request",
              "locationOffset": {
                "line": 1,
                "column": 1
              }
            }
          },
          "metadata": null,
          "variableName": "Cond",
          "type": "Boolean!"
        },
        "loc": {
          "kind": "Source",
          "start": 120,
          "end": 139,
          "source": {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "passingValue": true,
        "selections": [
          {
            "kind": "FragmentSpread",
            "args": [],
            "metadata": null,
            "loc": {
              "kind": "Source",
              "start": 113,
              "end": 139,
              "source": {
                "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "name": "Foo",
            "directives": []
          }
        ]
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "RootArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 133,
          "end": 138,
          "source": {
            "body": "fragment TestFragment on User {\\n  id @include(if: $Cond)\\n  ... on User @include(if: $Cond) {\\n    firstName\\n  }\\n  ...Foo @include(if: $Cond)\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "Cond",
        "type": "Boolean!"
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: enum-values.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query EnumValueQuery {
  me {
    profilePicture(preset: LARGE) {
      uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 87,
      "source": {
        "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "EnumValueQuery",
    "argumentDefinitions": [],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 25,
          "end": 85,
          "source": {
            "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "me",
        "selections": [
          {
            "kind": "LinkedField",
            "alias": null,
            "args": [
              {
                "kind": "Argument",
                "loc": {
                  "kind": "Source",
                  "start": 49,
                  "end": 62,
                  "source": {
                    "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "preset",
                "value": {
                  "kind": "Literal",
                  "loc": {
                    "kind": "Source",
                    "start": 57,
                    "end": 62,
                    "source": {
                      "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "value": "LARGE"
                },
                "type": "PhotoSize"
              }
            ],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 34,
              "end": 81,
              "source": {
                "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "profilePicture",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 72,
                  "end": 75,
                  "source": {
                    "body": "query EnumValueQuery {\\n  me {\\n    profilePicture(preset: LARGE) {\\n      uri\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "uri",
                "type": "String"
              }
            ],
            "type": "Image"
          }
        ],
        "type": "User"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: enum-values.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query EnumValueQuery1 {
  me {
    profilePicture(preset: "LARGE") { # error: string not enum
      uri
    }
  }
}

query EnumValueQuery2 {
  me {
    profilePicture(preset: 128) { # error: int not enum
      uri
    }
  }
}

query EnumValueQuery3 {
  me {
    profilePicture(preset: [LARGE]) { # error: list of enum, not enum
      uri
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 3 error(s):
- Expected a value matching type 'PhotoSize'.
  
  GraphQL request (3:28)
  2:   me {
  3:     profilePicture(preset: "LARGE") { # error: string not enum
                                ^
  4:       uri
  
- Expected a value matching type 'PhotoSize'.
  
  GraphQL request (11:28)
  10:   me {
  11:     profilePicture(preset: 128) { # error: int not enum
                                 ^
  12:       uri
  
- Expected a value matching type 'PhotoSize'.
  
  GraphQL request (19:28)
  18:   me {
  19:     profilePicture(preset: [LARGE]) { # error: list of enum, not enum
                                 ^
  20:       uri
  
`;

exports[`RelayParser matches expected output: field-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery {
  task(number: 123) {
    title
  }
  settings(environment: WEB) {
    notificationSounds
  }
  checkinSearchQuery(query: {query: "Relay"}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 175,
      "source": {
        "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestQuery",
    "argumentDefinitions": [],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 25,
              "end": 36,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "number",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 33,
                "end": 36,
                "source": {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": 123
            },
            "type": "Int"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 20,
          "end": 53,
          "source": {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "task",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 44,
              "end": 49,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "title",
            "type": "String"
          }
        ],
        "type": "Task"
      },
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 65,
              "end": 81,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environment",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 78,
                "end": 81,
                "source": {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": "WEB"
            },
            "type": "Environment"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 56,
          "end": 111,
          "source": {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "settings",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 89,
              "end": 107,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "notificationSounds",
            "type": "Boolean"
          }
        ],
        "type": "Settings"
      },
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 133,
              "end": 156,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 140,
                "end": 156,
                "source": {
                  "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "query": "Relay"
              }
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 114,
          "end": 173,
          "source": {
            "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 164,
              "end": 169,
              "source": {
                "body": "query TestQuery {\\n  task(number: 123) {\\n    title\\n  }\\n  settings(environment: WEB) {\\n    notificationSounds\\n  }\\n  checkinSearchQuery(query: {query: \\"Relay\\"}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User @argumentDefinitions(
  id: {type: "ID!"}
  size: {type: "[Int]", defaultValue: [100]}
) {
  profilePicture(size: $PictureSize) {
    uri
  }
  withDefaultArg: profilePicture(size: $size) {
    uri
  }
  ...Foo @arguments(localId: $id)
}

fragment Foo on User @argumentDefinitions(localId: {type: "ID!"}){
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 267,
      "source": {
        "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 138,
              "end": 156,
              "source": {
                "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "size",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 144,
                "end": 156,
                "source": {
                  "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "PictureSize",
              "type": "[Int]"
            },
            "type": "[Int]"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 123,
          "end": 171,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "profilePicture",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 164,
              "end": 167,
              "source": {
                "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "uri",
            "type": "String"
          }
        ],
        "type": "Image"
      },
      {
        "kind": "LinkedField",
        "alias": "withDefaultArg",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 205,
              "end": 216,
              "source": {
                "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "size",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 211,
                "end": 216,
                "source": {
                  "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "size",
              "type": "[Int]"
            },
            "type": "[Int]"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 174,
          "end": 231,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "profilePicture",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 224,
              "end": 227,
              "source": {
                "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "uri",
            "type": "String"
          }
        ],
        "type": "Image"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 252,
              "end": 264,
              "source": {
                "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "localId",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 261,
                "end": 264,
                "source": {
                  "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "id",
              "type": null
            },
            "type": null
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 234,
          "end": 265,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "Foo",
        "directives": []
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 54,
          "end": 71,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!",
        "defaultValue": null
      },
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 74,
          "end": 116,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "size",
        "type": "[Int]",
        "defaultValue": [
          100
        ]
      },
      {
        "kind": "RootArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 144,
          "end": 156,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "PictureSize",
        "type": "[Int]"
      }
    ]
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 269,
      "end": 342,
      "source": {
        "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "Foo",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 338,
          "end": 340,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!"
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 311,
          "end": 333,
          "source": {
            "body": "fragment TestFragment on User @argumentDefinitions(\\n  id: {type: \\"ID!\\"}\\n  size: {type: \\"[Int]\\", defaultValue: [100]}\\n) {\\n  profilePicture(size: $PictureSize) {\\n    uri\\n  }\\n  withDefaultArg: profilePicture(size: $size) {\\n    uri\\n  }\\n  ...Foo @arguments(localId: $id)\\n}\\n\\nfragment Foo on User @argumentDefinitions(localId: {type: \\"ID!\\"}){\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "localId",
        "type": "ID!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  ...ChildFragment @arguments(pictureSize: [42])
}

fragment ChildFragment on User @argumentDefinitions(pictureSize: {type: "[Int]"}){
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 84,
      "source": {
        "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 64,
              "end": 81,
              "source": {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "pictureSize",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 77,
                "end": 81,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                42
              ]
            },
            "type": "[Int]"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 36,
          "end": 82,
          "source": {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 86,
      "end": 221,
      "source": {
        "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 186,
              "end": 204,
              "source": {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "size",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 192,
                "end": 204,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "pictureSize",
              "type": "[Int]"
            },
            "type": "[Int]"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 171,
          "end": 219,
          "source": {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "profilePicture",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 212,
              "end": 215,
              "source": {
                "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "uri",
            "type": "String"
          }
        ],
        "type": "Image"
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 138,
          "end": 166,
          "source": {
            "body": "fragment ParentFragment on User {\\n  ...ChildFragment @arguments(pictureSize: [42])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(pictureSize: {type: \\"[Int]\\"}){\\n  profilePicture(size: $pictureSize) {\\n    uri\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "pictureSize",
        "type": "[Int]",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_settings: settings(environment: MOBILE) {
    cache_id
  }
  ...ChildFragment @arguments(environment: WEB)
}

fragment ChildFragment on Query @argumentDefinitions(environment: {type: "Environment!"}){
  settings(environment: $environment) {
    cache_id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 152,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "mobile_settings",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 63,
              "end": 82,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environment",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 76,
                "end": 82,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": "MOBILE"
            },
            "type": "Environment"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 37,
          "end": 102,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "settings",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 90,
              "end": 98,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "cache_id",
            "type": "ID"
          }
        ],
        "type": "Settings"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 133,
              "end": 149,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environment",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 146,
                "end": 149,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": "WEB"
            },
            "type": "Environment!"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 105,
          "end": 150,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "Query",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 154,
      "end": 303,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 256,
              "end": 281,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environment",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 269,
                "end": 281,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "environment",
              "type": "Environment"
            },
            "type": "Environment"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 247,
          "end": 301,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "settings",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 289,
              "end": 297,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "cache_id",
            "type": "ID"
          }
        ],
        "type": "Settings"
      }
    ],
    "type": "Query",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 207,
          "end": 242,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_settings: settings(environment: MOBILE) {\\n    cache_id\\n  }\\n  ...ChildFragment @arguments(environment: WEB)\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(environment: {type: \\"Environment!\\"}){\\n  settings(environment: $environment) {\\n    cache_id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "environment",
        "type": "Environment!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments-into-enum-list.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environments: WEB)
}

fragment ChildFragment on User @argumentDefinitions(environments: {type: "[Environment!]!"}){
  checkins(environments: $environments) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 152,
      "source": {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "mobile_checkins",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 62,
              "end": 84,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 76,
                "end": 84,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                "MOBILE"
              ]
            },
            "type": "[Environment!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 36,
          "end": 101,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkins",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 92,
              "end": 97,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 132,
              "end": 149,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 146,
                "end": 149,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": "WEB"
            },
            "type": "[Environment!]!"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 104,
          "end": 150,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 154,
      "end": 305,
      "source": {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 259,
              "end": 286,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 273,
                "end": 286,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "environments",
              "type": "[Environment!]!"
            },
            "type": "[Environment!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 250,
          "end": 303,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkins",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 294,
              "end": 299,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 206,
          "end": 245,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: WEB)\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "environments",
        "type": "[Environment!]!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-arguments-into-enum-list-indirect.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environment: WEB) # OK: matches defined type
}

fragment ChildFragment on User @argumentDefinitions(environment: {type: "Environment!"}){
  # variables of a non-list type cannot flow into list types,
  # the singular -> list promotion only works for literal values
  checkins(environments: $environment) { # expected error
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 1 error(s):
- Variable '$environment' was defined as type 'Environment!' but used in a location expecting the type '[Environment!]!'
  
  GraphQL request (8:53)
  7: 
  8: fragment ChildFragment on User @argumentDefinitions(environment: {type: "Environment!"}){
                                                         ^
  9:   # variables of a non-list type cannot flow into list types,
  
  GraphQL request (11:26)
  10:   # the singular -> list promotion only works for literal values
  11:   checkins(environments: $environment) { # expected error
                               ^
  12:     query
  
`;

exports[`RelayParser matches expected output: fragment-with-literal-enum-list-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  mobile_checkins: checkins(environments: [MOBILE]) {
    query
  }
  ...ChildFragment @arguments(environments: [WEB])
}

fragment ChildFragment on User @argumentDefinitions(environments: {type: "[Environment!]!"}){
  checkins(environments: $environments) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 154,
      "source": {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "mobile_checkins",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 62,
              "end": 84,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 76,
                "end": 84,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                "MOBILE"
              ]
            },
            "type": "[Environment!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 36,
          "end": 101,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkins",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 92,
              "end": 97,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 132,
              "end": 151,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 146,
                "end": 151,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                "WEB"
              ]
            },
            "type": "[Environment!]!"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 104,
          "end": 152,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 156,
      "end": 307,
      "source": {
        "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 261,
              "end": 288,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "environments",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 275,
                "end": 288,
                "source": {
                  "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "environments",
              "type": "[Environment!]!"
            },
            "type": "[Environment!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 252,
          "end": 305,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkins",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 296,
              "end": 301,
              "source": {
                "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 208,
          "end": 247,
          "source": {
            "body": "fragment ParentFragment on User {\\n  mobile_checkins: checkins(environments: [MOBILE]) {\\n    query\\n  }\\n  ...ChildFragment @arguments(environments: [WEB])\\n}\\n\\nfragment ChildFragment on User @argumentDefinitions(environments: {type: \\"[Environment!]!\\"}){\\n  checkins(environments: $environments) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "environments",
        "type": "[Environment!]!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-object-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_checkins: checkinSearchQuery(query: {query: "mobile"}) {
    query
  }
  ...ChildFragment @arguments(query: {query: "web"})
}

fragment ChildFragment on Query @argumentDefinitions(query: {type: "CheckinSearchInput!"}){
  checkinSearchQuery(query: $query) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 169,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "mobile_checkins",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 73,
              "end": 97,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 80,
                "end": 97,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "query": "mobile"
              }
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 37,
          "end": 114,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 105,
              "end": 110,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 145,
              "end": 166,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 152,
                "end": 166,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "query": "web"
              }
            },
            "type": "CheckinSearchInput!"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 117,
          "end": 167,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "Query",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 171,
      "end": 316,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 284,
              "end": 297,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 291,
                "end": 297,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "query",
              "type": "CheckinSearchInput"
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 265,
          "end": 314,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 305,
              "end": 310,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "Query",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 224,
          "end": 260,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(query: {query: \\"web\\"})\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(query: {type: \\"CheckinSearchInput!\\"}){\\n  checkinSearchQuery(query: $query) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "query",
        "type": "CheckinSearchInput!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-literal-object-list-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on Query {
  mobile_checkins: checkinSearchQuery(query: {query: "mobile"}) {
    query
  }
  ...ChildFragment @arguments(inputs: [{query: "web"}])
}

fragment ChildFragment on Query @argumentDefinitions(inputs: {type: "[CheckinSearchInput!]!"}){
  checkinSearchQuery(query: {query: "foo", inputs: $inputs}) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 172,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ParentFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "mobile_checkins",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 73,
              "end": 97,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 80,
                "end": 97,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "query": "mobile"
              }
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 37,
          "end": 114,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 105,
              "end": 110,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      },
      {
        "kind": "FragmentSpread",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 145,
              "end": 169,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "inputs",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 153,
                "end": 169,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                {
                  "query": "web"
                }
              ]
            },
            "type": "[CheckinSearchInput!]!"
          }
        ],
        "metadata": null,
        "loc": {
          "kind": "Source",
          "start": 117,
          "end": 170,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "name": "ChildFragment",
        "directives": []
      }
    ],
    "type": "Query",
    "argumentDefinitions": []
  },
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 174,
      "end": 348,
      "source": {
        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ChildFragment",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 291,
              "end": 329,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "ObjectValue",
              "loc": {
                "kind": "Source",
                "start": 298,
                "end": 329,
                "source": {
                  "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "fields": [
                {
                  "kind": "ObjectFieldValue",
                  "loc": {
                    "kind": "Source",
                    "start": 299,
                    "end": 311,
                    "source": {
                      "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "name": "query",
                  "value": {
                    "kind": "Literal",
                    "loc": {
                      "kind": "Source",
                      "start": 306,
                      "end": 311,
                      "source": {
                        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1
                        }
                      }
                    },
                    "metadata": null,
                    "value": "foo"
                  }
                },
                {
                  "kind": "ObjectFieldValue",
                  "loc": {
                    "kind": "Source",
                    "start": 313,
                    "end": 328,
                    "source": {
                      "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "name": "inputs",
                  "value": {
                    "kind": "Variable",
                    "loc": {
                      "kind": "Source",
                      "start": 321,
                      "end": 328,
                      "source": {
                        "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1
                        }
                      }
                    },
                    "metadata": null,
                    "variableName": "inputs",
                    "type": "[CheckinSearchInput]"
                  }
                }
              ]
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 272,
          "end": 346,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 337,
              "end": 342,
              "source": {
                "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "Query",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 227,
          "end": 267,
          "source": {
            "body": "fragment ParentFragment on Query {\\n  mobile_checkins: checkinSearchQuery(query: {query: \\"mobile\\"}) {\\n    query\\n  }\\n  ...ChildFragment @arguments(inputs: [{query: \\"web\\"}])\\n}\\n\\nfragment ChildFragment on Query @argumentDefinitions(inputs: {type: \\"[CheckinSearchInput!]!\\"}){\\n  checkinSearchQuery(query: {query: \\"foo\\", inputs: $inputs}) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "inputs",
        "type": "[CheckinSearchInput!]!",
        "defaultValue": null
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: fragment-with-undefined-literal-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ParentFragment on User {
  ...ChildFragment @arguments(pictureSize: 42) # error: $pictureSize not defined
}

fragment ChildFragment on User {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 1 error(s):
- Literal @arguments values are only supported when the argument is defined with @argumentDefinitions. Check the definition of fragment 'ChildFragment'.
  
  GraphQL request (2:44)
  1: fragment ParentFragment on User {
  2:   ...ChildFragment @arguments(pictureSize: 42) # error: $pictureSize not defined
                                                ^
  3: }
  
  GraphQL request (5:1)
  4: 
  5: fragment ChildFragment on User {
     ^
  6:   profilePicture(size: $pictureSize) {
  
`;

exports[`RelayParser matches expected output: inline-untyped-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment InlineUntypedFragment on User {
  ... {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 63,
      "source": {
        "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "InlineUntypedFragment",
    "selections": [
      {
        "kind": "InlineFragment",
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 43,
          "end": 61,
          "source": {
            "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 53,
              "end": 57,
              "source": {
                "body": "fragment InlineUntypedFragment on User {\\n  ... {\\n    name\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "name",
            "type": "String"
          }
        ],
        "typeCondition": "User"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: linked-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10) @__clientField(handle: "clientFriends") @__clientField(handle: "otherFriends") {
    count
  }  
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 156,
      "source": {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\") @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }  \\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LinkedHandleField",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 47,
              "end": 56,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\") @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }  \\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "first",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 54,
                "end": 56,
                "source": {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\") @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }  \\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": 10
            },
            "type": "Int"
          }
        ],
        "directives": [],
        "handles": [
          {
            "name": "clientFriends",
            "key": "",
            "filters": null
          },
          {
            "name": "otherFriends",
            "key": "",
            "filters": null
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 39,
          "end": 152,
          "source": {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\") @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }  \\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "friends",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 143,
              "end": 148,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\") @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }  \\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "count",
            "type": "Int"
          }
        ],
        "type": "FriendsConnection"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: linked-handle-field-with-filters.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10, orderby: $orderby) @__clientField(handle: "clientFriends", filters: ["first", "orderby"]) {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 165,
      "source": {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LinkedHandleField",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 47,
              "end": 56,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "first",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 54,
                "end": 56,
                "source": {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": 10
            },
            "type": "Int"
          },
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 58,
              "end": 75,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "orderby",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 67,
                "end": 75,
                "source": {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "orderby",
              "type": "[String]"
            },
            "type": "[String]"
          }
        ],
        "directives": [],
        "handles": [
          {
            "name": "clientFriends",
            "key": "",
            "filters": [
              "first",
              "orderby"
            ]
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 39,
          "end": 163,
          "source": {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "friends",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 154,
              "end": 159,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "count",
            "type": "Int"
          }
        ],
        "type": "FriendsConnection"
      }
    ],
    "type": "User",
    "argumentDefinitions": [
      {
        "kind": "RootArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 67,
          "end": 75,
          "source": {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10, orderby: $orderby) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\", \\"orderby\\"]) {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "orderby",
        "type": "[String]"
      }
    ]
  }
]
`;

exports[`RelayParser matches expected output: linked-handle-field-with-key.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10) @__clientField(handle: "clientFriends", key: "LinkedHandleField_friends") {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 149,
      "source": {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LinkedHandleField",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 47,
              "end": 56,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "first",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 54,
                "end": 56,
                "source": {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": 10
            },
            "type": "Int"
          }
        ],
        "directives": [],
        "handles": [
          {
            "name": "clientFriends",
            "key": "LinkedHandleField_friends",
            "filters": null
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 39,
          "end": 147,
          "source": {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "friends",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 138,
              "end": 143,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", key: \\"LinkedHandleField_friends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "count",
            "type": "Int"
          }
        ],
        "type": "FriendsConnection"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: linked-handle-filter.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10) @__clientField(handle: "clientFriends", filters: ["first"]) @__clientField(handle: "otherFriends") {
    count
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 174,
      "source": {
        "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"]) @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LinkedHandleField",
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 47,
              "end": 56,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"]) @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "first",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 54,
                "end": 56,
                "source": {
                  "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"]) @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": 10
            },
            "type": "Int"
          }
        ],
        "directives": [],
        "handles": [
          {
            "name": "clientFriends",
            "key": "",
            "filters": [
              "first"
            ]
          },
          {
            "name": "otherFriends",
            "key": "",
            "filters": null
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 39,
          "end": 172,
          "source": {
            "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"]) @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "friends",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 163,
              "end": 168,
              "source": {
                "body": "fragment LinkedHandleField on User {\\n  friends(first: 10) @__clientField(handle: \\"clientFriends\\", filters: [\\"first\\"]) @__clientField(handle: \\"otherFriends\\") {\\n    count\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "count",
            "type": "Int"
          }
        ],
        "type": "FriendsConnection"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: list-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ListArgumentQuery($waypoint: WayPoint!) {
  route(waypoints: [$waypoint, {
    lat: "0.0"
    lon: "0.0"
  }]) {
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 153,
      "source": {
        "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ListArgumentQuery",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 24,
          "end": 44,
          "source": {
            "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "waypoint",
        "type": "WayPoint!",
        "defaultValue": null
      }
    ],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 56,
              "end": 115,
              "source": {
                "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "waypoints",
            "value": {
              "kind": "ListValue",
              "loc": {
                "kind": "Source",
                "start": 67,
                "end": 115,
                "source": {
                  "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "items": [
                {
                  "kind": "Variable",
                  "loc": {
                    "kind": "Source",
                    "start": 68,
                    "end": 77,
                    "source": {
                      "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "variableName": "waypoint",
                  "type": "WayPoint!"
                },
                {
                  "kind": "Literal",
                  "loc": {
                    "kind": "Source",
                    "start": 79,
                    "end": 114,
                    "source": {
                      "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "value": {
                    "lat": "0.0",
                    "lon": "0.0"
                  }
                }
              ]
            },
            "type": "[WayPoint!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 50,
          "end": 151,
          "source": {
            "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "route",
        "selections": [
          {
            "kind": "LinkedField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 123,
              "end": 147,
              "source": {
                "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "steps",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 137,
                  "end": 141,
                  "source": {
                    "body": "query ListArgumentQuery($waypoint: WayPoint!) {\\n  route(waypoints: [$waypoint, {\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "note",
                "type": "String"
              }
            ],
            "type": "[RouteStep]"
          }
        ],
        "type": "Route"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: list-of-enums.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  traits # This is a list of enums.
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 69,
      "source": {
        "body": "fragment TestFragment on User {\\n  traits # This is a list of enums.\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestFragment",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 34,
          "end": 40,
          "source": {
            "body": "fragment TestFragment on User {\\n  traits # This is a list of enums.\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "traits",
        "type": "[PersonalityTraits]"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: literal-list-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralListArgumentQuery {
  route(waypoints: [{
    lat: "0.0"
    lon: "0.0"
  }]) {
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 127,
      "source": {
        "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LiteralListArgumentQuery",
    "argumentDefinitions": [],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 41,
              "end": 89,
              "source": {
                "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "waypoints",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 52,
                "end": 89,
                "source": {
                  "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": [
                {
                  "lat": "0.0",
                  "lon": "0.0"
                }
              ]
            },
            "type": "[WayPoint!]!"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 35,
          "end": 125,
          "source": {
            "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "route",
        "selections": [
          {
            "kind": "LinkedField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 97,
              "end": 121,
              "source": {
                "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "steps",
            "selections": [
              {
                "kind": "ScalarField",
                "alias": null,
                "args": [],
                "directives": [],
                "loc": {
                  "kind": "Source",
                  "start": 111,
                  "end": 115,
                  "source": {
                    "body": "query LiteralListArgumentQuery {\\n  route(waypoints: [{\\n    lat: \\"0.0\\"\\n    lon: \\"0.0\\"\\n  }]) {\\n    steps {\\n      note\\n    }\\n  }\\n}\\n",
                    "name": "GraphQL request",
                    "locationOffset": {
                      "line": 1,
                      "column": 1
                    }
                  }
                },
                "metadata": null,
                "name": "note",
                "type": "String"
              }
            ],
            "type": "[RouteStep]"
          }
        ],
        "type": "Route"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: literal-list-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralListArgumentQuery1 {
  route(waypoints: [{
    lat: 0.0 # error: float not string
    lon: "0.0"
  }]) {
    steps {
      note
    }
  }
}

query LiteralListArgumentQuery2 {
  route(waypoints: ["waypoint"]) { # error: string not input object
    steps {
      note
    }
  }
}

query LiteralListArgumentQuery3 {
  route(waypoints: "waypoint") { # error: string not list
    steps {
      note
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 3 error(s):
- Expected a value matching type 'String'.
  
  GraphQL request (3:10)
  2:   route(waypoints: [{
  3:     lat: 0.0 # error: float not string
              ^
  4:     lon: "0.0"
  
- Expected a value matching type 'WayPoint!'.
  
  GraphQL request (13:21)
  12: query LiteralListArgumentQuery2 {
  13:   route(waypoints: ["waypoint"]) { # error: string not input object
                          ^
  14:     steps {
  
- Expected a value matching type 'WayPoint!'.
  
  GraphQL request (21:20)
  20: query LiteralListArgumentQuery3 {
  21:   route(waypoints: "waypoint") { # error: string not list
                         ^
  22:     steps {
  
`;

exports[`RelayParser matches expected output: literal-object-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralObjectArgument {
  checkinSearchQuery(query: {
    query: "Facebook"
  }) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 104,
      "source": {
        "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {\\n    query: \\"Facebook\\"\\n  }) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "LiteralObjectArgument",
    "argumentDefinitions": [],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 51,
              "end": 85,
              "source": {
                "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {\\n    query: \\"Facebook\\"\\n  }) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 58,
                "end": 85,
                "source": {
                  "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {\\n    query: \\"Facebook\\"\\n  }) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "query": "Facebook"
              }
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 32,
          "end": 102,
          "source": {
            "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {\\n    query: \\"Facebook\\"\\n  }) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 93,
              "end": 98,
              "source": {
                "body": "query LiteralObjectArgument {\\n  checkinSearchQuery(query: {\\n    query: \\"Facebook\\"\\n  }) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: literal-object-argument.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query LiteralObjectArgument1 {
  checkinSearchQuery(query: {
    unknownField: "Facebook" # error: unknown field
  }) {
    query
  }
}

query LiteralObjectArgument2 {
  checkinSearchQuery(query: {
    query: FACEBOOK # error: enum not string
  }) {
    query
  }
}

query LiteralObjectArgument3 {
  checkinSearchQuery(query: FACEBOOK) { # error: enum not object
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 3 error(s):
- Uknown field 'unknownField' on type 'CheckinSearchInput'.
  
  GraphQL request (3:5)
  2:   checkinSearchQuery(query: {
  3:     unknownField: "Facebook" # error: unknown field
         ^
  4:   }) {
  
- Expected a value matching type 'String'.
  
  GraphQL request (11:12)
  10:   checkinSearchQuery(query: {
  11:     query: FACEBOOK # error: enum not string
                 ^
  12:   }) {
  
- Expected a value matching type 'CheckinSearchInput'.
  
  GraphQL request (18:29)
  17: query LiteralObjectArgument3 {
  18:   checkinSearchQuery(query: FACEBOOK) { # error: enum not object
                                  ^
  19:     query
  
`;

exports[`RelayParser matches expected output: null-values.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NullValuesQuery {
  items(filter: { date: null }) {
    date
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 72,
      "source": {
        "body": "query NullValuesQuery {\\n  items(filter: { date: null }) {\\n    date\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "NullValuesQuery",
    "argumentDefinitions": [],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 32,
              "end": 54,
              "source": {
                "body": "query NullValuesQuery {\\n  items(filter: { date: null }) {\\n    date\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "filter",
            "value": {
              "kind": "Literal",
              "loc": {
                "kind": "Source",
                "start": 40,
                "end": 54,
                "source": {
                  "body": "query NullValuesQuery {\\n  items(filter: { date: null }) {\\n    date\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "value": {
                "date": null
              }
            },
            "type": "ItemFilterInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 26,
          "end": 70,
          "source": {
            "body": "query NullValuesQuery {\\n  items(filter: { date: null }) {\\n    date\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "items",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 62,
              "end": 66,
              "source": {
                "body": "query NullValuesQuery {\\n  items(filter: { date: null }) {\\n    date\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "date",
            "type": "String"
          }
        ],
        "type": "ItemFilterResult"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: null-values.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NullValuesQuery {
  node_id_required(id: null) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 1 error(s):
- Expected a value matching type 'ID!'.
  
  GraphQL request (2:24)
  1: query NullValuesQuery {
  2:   node_id_required(id: null) {
                            ^
  3:     id
  
`;

exports[`RelayParser matches expected output: object-argument.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ObjectArgument($text: String!) {
  checkinSearchQuery(query: {
    query: $text
  }) {
    query
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 108,
      "source": {
        "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ObjectArgument",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 21,
          "end": 35,
          "source": {
            "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "text",
        "type": "String!",
        "defaultValue": null
      }
    ],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": null,
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 60,
              "end": 89,
              "source": {
                "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "value": {
              "kind": "ObjectValue",
              "loc": {
                "kind": "Source",
                "start": 67,
                "end": 89,
                "source": {
                  "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "fields": [
                {
                  "kind": "ObjectFieldValue",
                  "loc": {
                    "kind": "Source",
                    "start": 73,
                    "end": 85,
                    "source": {
                      "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
                      "name": "GraphQL request",
                      "locationOffset": {
                        "line": 1,
                        "column": 1
                      }
                    }
                  },
                  "metadata": null,
                  "name": "query",
                  "value": {
                    "kind": "Variable",
                    "loc": {
                      "kind": "Source",
                      "start": 80,
                      "end": 85,
                      "source": {
                        "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
                        "name": "GraphQL request",
                        "locationOffset": {
                          "line": 1,
                          "column": 1
                        }
                      }
                    },
                    "metadata": null,
                    "variableName": "text",
                    "type": "String"
                  }
                }
              ]
            },
            "type": "CheckinSearchInput"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 41,
          "end": 106,
          "source": {
            "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "checkinSearchQuery",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 97,
              "end": 102,
              "source": {
                "body": "query ObjectArgument($text: String!) {\\n  checkinSearchQuery(query: {\\n    query: $text\\n  }) {\\n    query\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "query",
            "type": "String"
          }
        ],
        "type": "CheckinSearchResult"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: scalar-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ScalarHandleField on User {
  name @__clientField(handle: "clientName") @__clientField(handle: "clientName2")
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 120,
      "source": {
        "body": "fragment ScalarHandleField on User {\\n  name @__clientField(handle: \\"clientName\\") @__clientField(handle: \\"clientName2\\")\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "ScalarHandleField",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "handles": [
          {
            "name": "clientName",
            "key": "",
            "filters": null
          },
          {
            "name": "clientName2",
            "key": "",
            "filters": null
          }
        ],
        "loc": {
          "kind": "Source",
          "start": 39,
          "end": 118,
          "source": {
            "body": "fragment ScalarHandleField on User {\\n  name @__clientField(handle: \\"clientName\\") @__clientField(handle: \\"clientName2\\")\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "name",
        "type": "String"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: simple-fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment TestFragment on User {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Fragment",
    "directives": [],
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 38,
      "source": {
        "body": "fragment TestFragment on User {\\n  id\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestFragment",
    "selections": [
      {
        "kind": "ScalarField",
        "alias": null,
        "args": [],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 34,
          "end": 36,
          "source": {
            "body": "fragment TestFragment on User {\\n  id\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!"
      }
    ],
    "type": "User",
    "argumentDefinitions": []
  }
]
`;

exports[`RelayParser matches expected output: simple-query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  foo: node(id: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
[
  {
    "kind": "Root",
    "operation": "query",
    "loc": {
      "kind": "Source",
      "start": 0,
      "end": 63,
      "source": {
        "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "metadata": null,
    "name": "TestQuery",
    "argumentDefinitions": [
      {
        "kind": "LocalArgumentDefinition",
        "loc": {
          "kind": "Source",
          "start": 16,
          "end": 24,
          "source": {
            "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "id",
        "type": "ID!",
        "defaultValue": null
      }
    ],
    "directives": [],
    "selections": [
      {
        "kind": "LinkedField",
        "alias": "foo",
        "args": [
          {
            "kind": "Argument",
            "loc": {
              "kind": "Source",
              "start": 40,
              "end": 47,
              "source": {
                "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "id",
            "value": {
              "kind": "Variable",
              "loc": {
                "kind": "Source",
                "start": 44,
                "end": 47,
                "source": {
                  "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                  "name": "GraphQL request",
                  "locationOffset": {
                    "line": 1,
                    "column": 1
                  }
                }
              },
              "metadata": null,
              "variableName": "id",
              "type": "ID"
            },
            "type": "ID"
          }
        ],
        "directives": [],
        "loc": {
          "kind": "Source",
          "start": 30,
          "end": 61,
          "source": {
            "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
            "name": "GraphQL request",
            "locationOffset": {
              "line": 1,
              "column": 1
            }
          }
        },
        "metadata": null,
        "name": "node",
        "selections": [
          {
            "kind": "ScalarField",
            "alias": null,
            "args": [],
            "directives": [],
            "loc": {
              "kind": "Source",
              "start": 55,
              "end": 57,
              "source": {
                "body": "query TestQuery($id: ID!) {\\n  foo: node(id: $id) {\\n    id\\n  }\\n}\\n",
                "name": "GraphQL request",
                "locationOffset": {
                  "line": 1,
                  "column": 1
                }
              }
            },
            "metadata": null,
            "name": "id",
            "type": "ID!"
          }
        ],
        "type": "Node"
      }
    ],
    "type": "Query"
  }
]
`;

exports[`RelayParser matches expected output: undefined-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: UnknownType) {
  node(id: "someid") {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
ERROR:
Error: RelayParser: Encountered 1 error(s):
- Unknown type: UnknownType.
  
  GraphQL request (1:22)
  1: query TestQuery($id: UnknownType) {
                          ^
  2:   node(id: "someid") {
  
`;

exports[`RelayParser should error when parsing fragment that references undeclared variables are used with differing types 1`] = `
"RelayParser: Encountered 1 error(s):
- Variable '$id' was used in locations expecting the conflicting types 'ID' and 'Int'. Source: document \`TestFragment\` file: \`GraphQL request\`
  
  GraphQL request (2:14)
  1: fragment TestFragment on Query {
  2:     node(id: $id) {
                  ^
  3:       id
  
  GraphQL request (5:18)
  4:     }
  5:     task(number: $id) {
                      ^
  6:       title
  "
`;
