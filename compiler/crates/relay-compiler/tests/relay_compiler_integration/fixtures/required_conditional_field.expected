==================================== INPUT ====================================
//- foo.js
graphql`
  fragment foo on User {
     name @required(action: THROW) @skip(if: $condition)
  }`;

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql"
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/foo.graphql.js
/**
 * <auto-generated> SignedSource<<e856535e023f8ce3347fff54074089de>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type foo$fragmentType: FragmentType;
export type foo$data = {|
  +name?: string,
  +$fragmentType: foo$fragmentType,
|};
export type foo$key = {
  +$data?: foo$data,
  +$fragmentSpreads: foo$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [
    {
      "kind": "RootArgument",
      "name": "condition"
    }
  ],
  "kind": "Fragment",
  "metadata": null,
  "name": "foo",
  "selections": [
    {
      "condition": "condition",
      "kind": "Condition",
      "passingValue": false,
      "selections": [
        {
          "kind": "RequiredField",
          "field": {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "name",
            "storageKey": null
          },
          "action": "THROW",
          "path": "name"
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "9315d3c00a7787d5cc3f0930cf1ee1a5";

module.exports = ((node/*: any*/)/*: Fragment<
  foo$fragmentType,
  foo$data,
>*/);
