/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

use crate::compiler_state::{ProjectName, SourceSetName};
use serde::Deserialize;
use std::collections::HashMap;
use std::error::Error;
use std::fs::File;
use std::io::BufReader;
use std::path::PathBuf;

/// The full compiler config. This is a combination of:
/// - the configuration file
/// - the absolute path to the root of the compiled projects
/// - TODO: injected code to produce additional files
#[derive(Debug)]
pub struct Config {
    /// Root directory of all projects to compile. Any other paths in the
    /// compiler should be relative to this root unless otherwise noted.
    pub root_dir: PathBuf,
    pub sources: HashMap<PathBuf, SourceSetName>,
    pub blacklist: Vec<String>,
    pub projects: HashMap<ProjectName, ConfigProject>,
}
impl Config {
    pub fn load(root_dir: PathBuf, config_path: PathBuf) -> Result<Self, Box<dyn Error>> {
        let file = File::open(config_path)?;
        let reader = BufReader::new(file);
        let config_file: ConfigFile = serde_json::from_reader(reader)?;
        Ok(Self {
            root_dir,
            sources: config_file.sources,
            blacklist: config_file.blacklist,
            projects: config_file.projects,
        })
    }
}

/// Schema of the compiler configuration JSON file.
#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
struct ConfigFile {
    /// A mapping from directory paths (relative to the root) to a source set.
    /// If a path is a subdirectory of another path, the more specific path
    /// wins.
    sources: HashMap<PathBuf, SourceSetName>,

    /// Glob patterns that should not be part of the sourcces even if they are
    /// in the source set directories.
    #[serde(default)]
    blacklist: Vec<String>,

    /// Configuration of projects to compile.
    projects: HashMap<ProjectName, ConfigProject>,
}

#[derive(Debug, Deserialize)]
#[serde(deny_unknown_fields)]
pub struct ConfigProject {
    /// Additional source sets that can be referenced from this project, but
    /// are not producing outputs. Another project should be setup to produce
    /// them.
    #[serde(default)]
    pub base: Vec<SourceSetName>,

    /// A project without an output directory will put the generated files in
    /// a __generated__ directory next to the input file.
    /// All files in these directories should be generated by the Relay
    /// compiler, so that the compiler can cleanup extra files.
    #[serde(default)]
    pub output: Option<PathBuf>,

    /// Directory containing *.graphql files with schema extensions.
    #[serde(default)]
    pub extensions: Vec<PathBuf>,

    /// Path to the schema.
    pub schema: PathBuf,
}
