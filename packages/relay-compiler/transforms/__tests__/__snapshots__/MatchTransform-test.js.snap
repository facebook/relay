// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MatchTransform matches expected output: direct-js-field.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ... on PlainUserNameRenderer {
      js(module: "PlainUserNameRenderer.react")
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Direct use of the 'js' field is not allowed, use @match/@module instead.

Source: GraphQL request (6:7)
5:     ... on PlainUserNameRenderer {
6:       js(module: "PlainUserNameRenderer.react")
         ^
7:     }

`;

exports[`MatchTransform matches expected output: invalid-match-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...User_user @module(name: "User.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment User_user on User {
  __typename
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Fragment 'User_user' cannot be spread here as objects of type 'UserNameRenderer' can never be of type 'User'. Possible concrete types include 'PlainUserNameRenderer', 'MarkdownUserNameRenderer', 'CustomNameRenderer', etc.

GraphQL request (6:5)
5:     ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
6:     ...User_user @module(name: "User.react")
       ^
7:   }

`;

exports[`MatchTransform matches expected output: invalid-no-matches.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected at least one selection for non-scalar field 'nameRenderer' on type 'UserNameRenderer'.

GraphQL request (4:3)
3:   id
4:   nameRenderer @match
     ^
5: }

`;

exports[`MatchTransform matches expected output: invalid-non-empty-selections.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ... on PlainUserNameRenderer {
      plaintext
    }
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid @match selection: all selections should be fragment spreads with @module.

Source: GraphQL request (5:5)
4:   nameRenderer @match {
5:     ... on PlainUserNameRenderer {
       ^
6:       plaintext

`;

exports[`MatchTransform matches expected output: match-on-child-of-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
      ... on PlainUserNameRenderer {
        ...PlainUserNameRenderer_name
        __module_operation_ActorsRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "ActorsRendererFragment.actors.nameRenderer")
        __module_component_ActorsRendererFragment: js(module: "PlainUserNameRenderer.react", id: "ActorsRendererFragment.actors.nameRenderer")
      }
      ... on MarkdownUserNameRenderer {
        ...MarkdownUserNameRenderer_name
        __module_operation_ActorsRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "ActorsRendererFragment.actors.nameRenderer")
        __module_component_ActorsRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "ActorsRendererFragment.actors.nameRenderer")
      }
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`MatchTransform matches expected output: match-with-arguments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
      @arguments(cond: true)
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer
  @argumentDefinitions(cond: {type: "Boolean!", defaultValue: false}) {
  markdown
  data @include(if: $cond) {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

@module does not support @arguments.

Source: GraphQL request (8:18)
7:       @module(name: "MarkdownUserNameRenderer.react")
8:       @arguments(cond: true)
                    ^
9:   }

`;

exports[`MatchTransform matches expected output: match-with-explicit-support-arg.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer(
    supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]
  ) @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Invalid @match selection: the 'supported' argument is automatically added and cannot be supplied explicitly.

Source: GraphQL request (5:5)
4:   nameRenderer(
5:     supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]
       ^
6:   ) @match {

`;

exports[`MatchTransform matches expected output: match-with-extra-args.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRendererForContext(context: HEADER) @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRendererForContext(context: HEADER, supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRendererForContext")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRendererForContext")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRendererForContext")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRendererForContext")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`MatchTransform matches expected output: module-without-match.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`MatchTransform matches expected output: relay-match-on-interface.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderable @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderable(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderable")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderable")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderable")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderable")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`MatchTransform matches expected output: relay-match-on-union.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`MatchTransform matches expected output: relay-match-on-union-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderers @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderers(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderers")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderers")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderers")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderers")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;
