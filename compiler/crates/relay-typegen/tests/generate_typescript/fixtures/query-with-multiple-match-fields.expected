==================================== INPUT ====================================
query Test @raw_response_type {
  node(id: "1") {
    ... on User {
      username
      ...NameRendererFragment
    }
  }
  viewer {
    actor {
      ... on User {
        name
        ...AnotherNameRendererFragment
      }
    }
  }
}

fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment AnotherNameRendererFragment on User {
  name
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}
==================================== OUTPUT ===================================
import type { Local3DPayload } from "relay-runtime";
import type { AnotherNameRendererFragment$ref } from "AnotherNameRendererFragment.graphql";
import type { NameRendererFragment$ref } from "NameRendererFragment.graphql";
export type TestVariables = {||};
export type TestResponse = {|
  +node: ?{|
    +username?: ?string,
    +$fragmentRefs: NameRendererFragment$ref,
  |},
  +viewer: ?{|
    +actor: ?{|
      +name?: ?string,
      +$fragmentRefs: AnotherNameRendererFragment$ref,
    |}
  |},
|};
export type PlainUserNameRenderer_name = {|
  +plaintext: ?string,
  +data: ?{|
    +text: ?string,
    +id: ?string,
  |},
|};
export type MarkdownUserNameRenderer_name = {|
  +markdown: ?string,
  +data: ?{|
    +markup: ?string,
    +id: ?string,
  |},
|};
export type TestRawResponse = {|
  +node: ?({|
    +__typename: "User",
    +id: string,
    +username: ?string,
    +nameRenderer: ?({|
      +__typename: "PlainUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...PlainUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "PlainUserNameRenderer",
      ...PlainUserNameRenderer_name,
    |}> | {|
      +__typename: "MarkdownUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...MarkdownUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "MarkdownUserNameRenderer",
      ...MarkdownUserNameRenderer_name,
    |}> | {|
      +__typename: string
    |}),
  |} | {|
    +__typename: string,
    +id: string,
  |}),
  +viewer: ?{|
    +actor: ?({|
      +__typename: "User",
      +id: string,
      +name: ?string,
      +nameRenderer: ?({|
        +__typename: "PlainUserNameRenderer",
        +__module_operation_AnotherNameRendererFragment: ?any,
        +__module_component_AnotherNameRendererFragment: ?any,
        ...PlainUserNameRenderer_name,
      |} | Local3DPayload<"AnotherNameRendererFragment", {|
        +__typename: "PlainUserNameRenderer",
        ...PlainUserNameRenderer_name,
      |}> | {|
        +__typename: "MarkdownUserNameRenderer",
        +__module_operation_AnotherNameRendererFragment: ?any,
        +__module_component_AnotherNameRendererFragment: ?any,
        ...MarkdownUserNameRenderer_name,
      |} | Local3DPayload<"AnotherNameRendererFragment", {|
        +__typename: "MarkdownUserNameRenderer",
        ...MarkdownUserNameRenderer_name,
      |}> | {|
        +__typename: string
      |}),
    |} | {|
      +__typename: string,
      +id: string,
    |})
  |},
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer_name$ref } from "MarkdownUserNameRenderer_name.graphql";
import type { PlainUserNameRenderer_name$ref } from "PlainUserNameRenderer_name.graphql";
import { FragmentReference } from "relay-runtime";
export type AnotherNameRendererFragment$ref = FragmentReference & { _: "AnotherNameRendererFragment$ref" };
export type AnotherNameRendererFragment$fragmentType = AnotherNameRendererFragment$ref & { _: "AnotherNameRendererFragment$fragmentType" };
export type AnotherNameRendererFragment = {
  readonly name?: string,
  readonly nameRenderer?: {
    readonly __fragmentPropName?: string,
    readonly __module_component?: string,
    readonly $fragmentRefs: PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  },
  readonly $refType: AnotherNameRendererFragment$ref,
};
export type AnotherNameRendererFragment$data = AnotherNameRendererFragment;
export type AnotherNameRendererFragment$key = {
  readonly $data?: AnotherNameRendererFragment$data,
  readonly $fragmentRefs: AnotherNameRendererFragment$ref,
};
-------------------------------------------------------------------------------
import { FragmentReference } from "relay-runtime";
export type MarkdownUserNameRenderer_name$ref = FragmentReference & { _: "MarkdownUserNameRenderer_name$ref" };
export type MarkdownUserNameRenderer_name$fragmentType = MarkdownUserNameRenderer_name$ref & { _: "MarkdownUserNameRenderer_name$fragmentType" };
export type MarkdownUserNameRenderer_name = {
  readonly markdown?: string,
  readonly data?: {
    readonly markup?: string
  },
  readonly $refType: MarkdownUserNameRenderer_name$ref,
};
export type MarkdownUserNameRenderer_name$data = MarkdownUserNameRenderer_name;
export type MarkdownUserNameRenderer_name$key = {
  readonly $data?: MarkdownUserNameRenderer_name$data,
  readonly $fragmentRefs: MarkdownUserNameRenderer_name$ref,
};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer_name$ref } from "MarkdownUserNameRenderer_name.graphql";
import type { PlainUserNameRenderer_name$ref } from "PlainUserNameRenderer_name.graphql";
import { FragmentReference } from "relay-runtime";
export type NameRendererFragment$ref = FragmentReference & { _: "NameRendererFragment$ref" };
export type NameRendererFragment$fragmentType = NameRendererFragment$ref & { _: "NameRendererFragment$fragmentType" };
export type NameRendererFragment = {
  readonly id: string,
  readonly nameRenderer?: {
    readonly __fragmentPropName?: string,
    readonly __module_component?: string,
    readonly $fragmentRefs: PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  },
  readonly $refType: NameRendererFragment$ref,
};
export type NameRendererFragment$data = NameRendererFragment;
export type NameRendererFragment$key = {
  readonly $data?: NameRendererFragment$data,
  readonly $fragmentRefs: NameRendererFragment$ref,
};
-------------------------------------------------------------------------------
import { FragmentReference } from "relay-runtime";
export type PlainUserNameRenderer_name$ref = FragmentReference & { _: "PlainUserNameRenderer_name$ref" };
export type PlainUserNameRenderer_name$fragmentType = PlainUserNameRenderer_name$ref & { _: "PlainUserNameRenderer_name$fragmentType" };
export type PlainUserNameRenderer_name = {
  readonly plaintext?: string,
  readonly data?: {
    readonly text?: string
  },
  readonly $refType: PlainUserNameRenderer_name$ref,
};
export type PlainUserNameRenderer_name$data = PlainUserNameRenderer_name;
export type PlainUserNameRenderer_name$key = {
  readonly $data?: PlainUserNameRenderer_name$data,
  readonly $fragmentRefs: PlainUserNameRenderer_name$ref,
};
