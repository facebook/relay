// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`check context in the mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest11Query {
  viewer {
    ...RelayMockPayloadGeneratorTest11Fragment
  }
}

fragment RelayMockPayloadGeneratorTest11Fragment on Viewer {
  actor {
    __typename
    ... on User {
      id
      name
      profile_picture {
        uri
        height
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">",
        "profile_picture": {
          "uri": "http://my-image",
          "height": 100
        }
      }
    }
  }
}
`;

exports[`generate basic mock data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest6Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest6Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest6Fragment on User {
  id
  name
  author {
    id
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "author": {
        "id": "<User-mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">"
      }
    }
  }
}
`;

exports[`generate mock and verify arguments in the context 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest14Query(
  $smallScale: Float = 1
  $bigScale: Float = 100
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest14Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest14Fragment on User {
  id
  name
  smallImage: profile_picture(scale: $smallScale) {
    uri
  }
  bigImage: profile_picture(scale: $bigScale) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "smallImage": {
        "uri": "small image"
      },
      "bigImage": {
        "uri": "big image"
      }
    }
  }
}
`;

exports[`generate mock for fragment with @argumentsDefinition 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest15Query(
  $scale: Float = 1
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest15Fragment_3I1js
    id
  }
}

fragment RelayMockPayloadGeneratorTest15Fragment_3I1js on User {
  id
  name
  profile_picture(scale: $scale) {
    uri
    width
    height
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`generate mock for multiple fragment spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest17Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest20Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest17Fragment on Page {
  id
  pageName: name
}

fragment RelayMockPayloadGeneratorTest18Fragment on User {
  id
  name
  username
}

fragment RelayMockPayloadGeneratorTest19Fragment on User {
  ...RelayMockPayloadGeneratorTest18Fragment
  profile_picture {
    uri
  }
}

fragment RelayMockPayloadGeneratorTest20Fragment on User {
  body {
    text
  }
  actor {
    __typename
    name
    id
  }
  myActor: actor {
    __typename
    ...RelayMockPayloadGeneratorTest17Fragment
    id
  }
  ...RelayMockPayloadGeneratorTest18Fragment
  ...RelayMockPayloadGeneratorTest19Fragment
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "body": {
        "text": "<mock-value-for-field-\\"text\\">"
      },
      "actor": {
        "__typename": "__MockObject",
        "name": "<mock-value-for-field-\\"name\\">",
        "id": "<mock-id-2>"
      },
      "myActor": {
        "__typename": "Page",
        "id": "<mock-id-3>",
        "pageName": "<mock-value-for-field-\\"pageName\\">"
      },
      "name": "<mock-value-for-field-\\"name\\">",
      "username": "<mock-value-for-field-\\"username\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      }
    }
  }
}
`;

exports[`generate mock for objects without concrete type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest9Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest9Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest9Fragment on Page {
  actor {
    __typename
    id
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "actor": {
        "__typename": "__MockObject",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "id": "<mock-id-2>"
    }
  }
}
`;

exports[`generate mock for plural fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest16Query {
  nodes {
    __typename
    ...RelayMockPayloadGeneratorTest16Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest16Fragment on Comment {
  id
  body {
    text
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "nodes": [
      {
        "__typename": "Comment",
        "id": "<mock-id-1>",
        "body": {
          "text": "<mock-value-for-field-\\"text\\">"
        }
      }
    ]
  }
}
`;

exports[`generate mock for simple fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest1Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTestFragment
    id
  }
}

fragment RelayMockPayloadGeneratorTestFragment on User {
  id
  name
  profile_picture {
    uri
    width
    height
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": "<mock-value-for-field-\\"width\\">",
        "height": "<mock-value-for-field-\\"height\\">"
      }
    }
  }
}
`;

exports[`generate mock for with directives and handlers 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest18Query(
  $first: Int = 10
  $picturePreset: PhotoSize
  $RELAY_INCREMENTAL_DELIVERY: Boolean = false
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest22Fragment_1t4y1N
    id
  }
}

fragment RelayMockPayloadGeneratorTest21Fragment on User {
  birthdate {
    month
  }
}

fragment RelayMockPayloadGeneratorTest22Fragment_1t4y1N on User {
  id
  name
  myActor: actor {
    __typename
    id
    name
  }
  customName: name
  friends(first: $first) {
    edges {
      node {
        id
        name
        __typename
      }
      cursor
    }
    myPageInfo: pageInfo {
      endCursor
      hasNextPage
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
  profile_picture {
    uri
  }
  profilePicture(preset: $picturePreset) {
    uri
  }
  ...RelayMockPayloadGeneratorTest21Fragment
  actor {
    __typename
    ... on User {
      id
      userName: name
      name: username
      profilePicture(size: 1) {
        uri
        width
        height
      }
      feedback {
        comments {
          edges {
            node {
              ...RelayMockPayloadGeneratorTest23Fragment @defer(label: "RelayMockPayloadGeneratorTest22Fragment$defer$DeferLabel", if: $RELAY_INCREMENTAL_DELIVERY)
              id
            }
          }
        }
        id
      }
    }
    ... on Page {
      id
      pageName: name
    }
    username
    id
  }
}

fragment RelayMockPayloadGeneratorTest23Fragment on Comment {
  body {
    text
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "myActor": {
        "__typename": "__MockObject",
        "id": "<mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "customName": "<mock-value-for-field-\\"customName\\">",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-3>",
              "name": "<mock-value-for-field-\\"name\\">",
              "__typename": "User"
            },
            "cursor": "<mock-value-for-field-\\"cursor\\">"
          }
        ],
        "myPageInfo": {
          "endCursor": "<mock-value-for-field-\\"endCursor\\">",
          "hasNextPage": "<mock-value-for-field-\\"hasNextPage\\">"
        },
        "pageInfo": {
          "endCursor": "<mock-value-for-field-\\"endCursor\\">",
          "hasNextPage": "<mock-value-for-field-\\"hasNextPage\\">"
        }
      },
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      },
      "profilePicture": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      },
      "birthdate": {
        "month": "<mock-value-for-field-\\"month\\">"
      },
      "actor": {
        "__typename": "User",
        "username": "<mock-value-for-field-\\"username\\">",
        "id": "<mock-id-4>",
        "userName": "<mock-value-for-field-\\"userName\\">",
        "name": "<mock-value-for-field-\\"name\\">",
        "profilePicture": {
          "uri": "<mock-value-for-field-\\"uri\\">",
          "width": "<mock-value-for-field-\\"width\\">",
          "height": "<mock-value-for-field-\\"height\\">"
        },
        "feedback": {
          "comments": {
            "edges": [
              {
                "node": {
                  "body": {
                    "text": "<mock-value-for-field-\\"text\\">"
                  },
                  "id": "<Comment-mock-id-5>"
                }
              }
            ]
          },
          "id": "<Feedback-mock-id-6>"
        }
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest7Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest7Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest7Fragment on User {
  id
  name
  profile_picture {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id-1001",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "http://my-uri"
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions for object type (multiple object) 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest10Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest10Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest10Fragment on User {
  name
  actor {
    __typename
    ... on User {
      id
      name
      profile_picture {
        uri
        height
      }
    }
    id
  }
  profile_picture {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "My user name",
      "actor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "name": "My user name",
        "profile_picture": {
          "uri": "http://my-image",
          "height": 100
        }
      },
      "profile_picture": {
        "uri": "http://my-image"
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions for object type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest8Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest8Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest8Fragment on Page {
  actor {
    __typename
    id
    name
  }
  backgroundImage {
    width
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "actor": {
        "__typename": "__MockObject",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "backgroundImage": {
        "width": 200,
        "uri": "http://my-image"
      },
      "id": "<mock-id-2>"
    }
  }
}
`;

exports[`generate mock with abstract inline fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest2Query {
  viewer {
    actor {
      __typename
      ...RelayMockPayloadGeneratorTest1Fragment
      id
    }
  }
}

fragment RelayMockPayloadGeneratorTest1Fragment on Actor {
  __isActor: __typename
  id
  ... on Named {
    __isNamed: __typename
    name
  }
  ... on User {
    firstName
    lastName
  }
  ... on Page {
    websites
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "__isActor": true,
        "id": "<mock-id-1>",
        "__isNamed": true,
        "name": "<mock-value-for-field-\\"name\\">",
        "firstName": "<mock-value-for-field-\\"firstName\\">",
        "lastName": "<mock-value-for-field-\\"lastName\\">"
      }
    }
  }
}
`;

exports[`generate mock with condition (and other complications) 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest4Query(
  $showProfilePicture: Boolean!
  $hideBirthday: Boolean!
  $showBirthdayMonth: Boolean!
  $hideAuthorUsername: Boolean!
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest3Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest3Fragment on User {
  id
  name
  customId: id
  profile_picture @include(if: $showProfilePicture) {
    uri
  }
  birthdate @skip(if: $hideBirthday) {
    year
    month @include(if: $showBirthdayMonth)
  }
  author {
    name
    id
  }
  author @skip(if: $hideAuthorUsername) {
    authorID: id
    objectType: __typename
    username
    id
  }
  allPhones {
    phoneNumber {
      displayNumber
    }
  }
  emailAddresses
  backgroundImage {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "customId": "<User-mock-id-2>",
      "author": {
        "name": "<mock-value-for-field-\\"name\\">",
        "id": "<User-mock-id-3>"
      },
      "allPhones": [
        {
          "phoneNumber": {
            "displayNumber": "<mock-value-for-field-\\"displayNumber\\">"
          }
        }
      ],
      "emailAddresses": "<mock-value-for-field-\\"emailAddresses\\">",
      "backgroundImage": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      }
    }
  }
}
`;

exports[`generate mock with connection 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest5Query(
  $first: Int
  $skipUserInConnection: Boolean!
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest5Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest4Fragment on User {
  name
  username
  emailAddresses
}

fragment RelayMockPayloadGeneratorTest5Fragment on Page {
  actor {
    __typename
    ... on User {
      id
      myType: __typename
      myName: name
      name
      friends(first: $first) {
        edges {
          cursor
          node {
            id
            ...RelayMockPayloadGeneratorTest4Fragment @skip(if: $skipUserInConnection)
            __typename
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
      ...RelayMockPayloadGeneratorTest4Fragment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "<mock-id-1>",
      "actor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "myType": "User",
        "myName": "<mock-value-for-field-\\"myName\\">",
        "name": "<mock-value-for-field-\\"name\\">",
        "friends": {
          "edges": [
            {
              "cursor": "<mock-value-for-field-\\"cursor\\">",
              "node": {
                "id": "<User-mock-id-3>",
                "__typename": "User"
              }
            }
          ],
          "pageInfo": {
            "endCursor": "<mock-value-for-field-\\"endCursor\\">",
            "hasNextPage": "<mock-value-for-field-\\"hasNextPage\\">"
          }
        },
        "username": "<mock-value-for-field-\\"username\\">",
        "emailAddresses": "<mock-value-for-field-\\"emailAddresses\\">"
      }
    }
  }
}
`;

exports[`generate mock with inline fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest3Query(
  $condition: Boolean!
) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest2Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest2Fragment on User {
  id
  name
  author {
    id
    name
    authorID: id
    username
  }
  author @include(if: $condition) {
    myId: id
    myUsername: username
    emailAddresses
    birthdate {
      day
      month
      year
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "author": {
        "id": "<User-mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">",
        "authorID": "<User-mock-id-3>",
        "username": "<mock-value-for-field-\\"username\\">"
      }
    }
  }
}
`;

exports[`generate mock with manual mock for objects 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest12Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest12Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest12Fragment on Page {
  id
  name
  body {
    text
  }
  myTown: hometown {
    id
    name
    url
    feedback {
      comments(first: 10) {
        edges {
          cursor
          comment: node {
            id
            message {
              text
            }
            likeSentence {
              text
            }
          }
        }
        pageInfo {
          startCursor
        }
      }
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "page-id-2",
      "name": "My Page",
      "body": {
        "text": "My Text"
      },
      "myTown": {
        "id": "page-id-3",
        "name": "My Hometown",
        "url": "http://node-myTown",
        "feedback": {
          "comments": {
            "edges": [
              {
                "cursor": "<mock-value-for-field-\\"cursor\\">",
                "comment": {
                  "id": "<Comment-mock-id-4>",
                  "message": {
                    "text": "Comment text: node>myTown>feedback>comments>edges>comment"
                  },
                  "likeSentence": {
                    "text": "<mock-value-for-field-\\"text\\">"
                  }
                }
              }
            ],
            "pageInfo": {
              "startCursor": "<mock-value-for-field-\\"startCursor\\">"
            }
          },
          "id": "<Feedback-mock-id-5>"
        }
      }
    }
  }
}
`;

exports[`generate mock with multiple spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest13Query {
  viewer {
    ...RelayMockPayloadGeneratorTest13Fragment
  }
}

fragment RelayMockPayloadGeneratorTest13Fragment on Viewer {
  actor {
    __typename
    ... on User {
      id
      name
      traits
      profile_picture {
        uri
        height
      }
    }
    ... on Page {
      id
      name
      websites
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">",
        "traits": "<mock-value-for-field-\\"traits\\">",
        "profile_picture": {
          "uri": "<mock-value-for-field-\\"uri\\">",
          "height": "<mock-value-for-field-\\"height\\">"
        }
      }
    }
  }
}
`;

exports[`should return \`null\` for selection if that is specified in default values 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest19Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest27Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest24Fragment on User {
  id
  name
}

fragment RelayMockPayloadGeneratorTest25Fragment on User {
  id
  name
  profile_picture {
    ...RelayMockPayloadGeneratorTest26Fragment
  }
}

fragment RelayMockPayloadGeneratorTest26Fragment on Image {
  uri
  width
  height
}

fragment RelayMockPayloadGeneratorTest27Fragment on User {
  body {
    text
  }
  actor {
    __typename
    name
    id
  }
  myActor: actor {
    __typename
    ...RelayMockPayloadGeneratorTest24Fragment
    id
  }
  ...RelayMockPayloadGeneratorTest25Fragment
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "body": {
        "text": "<mock-value-for-field-\\"text\\">"
      },
      "actor": null,
      "myActor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": "<mock-value-for-field-\\"width\\">",
        "height": "<mock-value-for-field-\\"height\\">"
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock data with mock resolver for ID that may return \`undefined\` 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest35Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "this-is-my-id",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-1>",
              "name": "<mock-value-for-field-\\"name\\">"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for client extensions 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest43Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for enum in arrays 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest40Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      traits
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "traits": [
        "CHEERFUL",
        "DERISIVE"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for enum with different case should be OK 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest39Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "environment": "WEB"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for simple fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest21Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest28Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest28Fragment on User {
  id
  name
  profile_picture {
    uri
    width
    height
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for simple query 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest20Query {
  me {
    id
    name
    emailAddresses
    profile_picture(scale: 1) {
      uri
      width
      height
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "id": "<User-mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "emailAddresses": [
        "<mock-value-for-field-\\"emailAddresses\\">"
      ],
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Enums 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest22Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "environment": "WEB"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Concrete Type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest23Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id",
      "name": "my-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest24Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id",
      "name": "my-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with Concrete Type mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest27Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-user-id",
      "name": "my-user-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with multiple fragment spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest25Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    ... on Page {
      id
      pageName: name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "my-page-id",
      "pageName": "<mock-value-for-field-\\"pageName\\">"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with multiple fragments 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest26Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest29Fragment
    ...RelayMockPayloadGeneratorTest30Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest29Fragment on Page {
  id
  pageName: name
}

fragment RelayMockPayloadGeneratorTest30Fragment on User {
  id
  userName: name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "my-page-id",
      "pageName": "<mock-value-for-field-\\"pageName\\">"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Scalar field as null 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest28Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-user-id",
      "name": null
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for object in plural field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest36Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "Alice"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for plural field and its object 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest37Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-3>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-5>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-6>",
              "name": "Alice"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for scalar plural field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest38Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "emailAddresses": [
        "my@email.com"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with empty array for scalar field  1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest30Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "emailAddresses": []
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with custom data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest33Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "friend-id-2",
              "name": "Alice",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "friend-id-3",
              "name": "Bob",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with custom data and additional mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest34Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "/image-url-3.jpg",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "Bob with Image",
              "profile_picture": {
                "uri": "/image-url-5.jpg",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with default data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest31Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-3>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-5>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-6>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for scalar field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest29Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "emailAddresses": [
        "mock_email-0-2@fb.com",
        "mock_email-1-3@fb.com",
        "mock_email-2-4@fb.com",
        "mock_email-3-5@fb.com",
        "mock_email-4-6@fb.com"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays including null 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest32Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "friends": {
        "edges": [
          null,
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with null for enum 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest42Query {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "environment": null
    }
  }
}
`;

exports[`with @relay_test_operation should generate data for @match with MarkdownUserNameRenderer_name 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest45Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest31Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest1MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
    id
  }
}

fragment RelayMockPayloadGeneratorTest1PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
    id
  }
}

fragment RelayMockPayloadGeneratorTest31Fragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    __typename
    ... on PlainUserNameRenderer {
      ...RelayMockPayloadGeneratorTest1PlainUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTest31Fragment: js(module: "RelayMockPayloadGeneratorTest1PlainUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTest31Fragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTest31Fragment: js(module: "PlainUserNameRenderer.react", id: "RelayMockPayloadGeneratorTest31Fragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...RelayMockPayloadGeneratorTest1MarkdownUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTest31Fragment: js(module: "RelayMockPayloadGeneratorTest1MarkdownUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTest31Fragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTest31Fragment: js(module: "MarkdownUserNameRenderer.react", id: "RelayMockPayloadGeneratorTest31Fragment.nameRenderer")
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "nameRenderer": {
        "__typename": "MarkdownUserNameRenderer",
        "__module_operation_RelayMockPayloadGeneratorTest31Fragment": "RelayMockPayloadGeneratorTest1MarkdownUserNameRenderer_name$normalization",
        "markdown": "<mock-value-for-field-\\"markdown\\">",
        "data": {
          "markup": "<mock-value-for-field-\\"markup\\">",
          "id": "<MarkdownUserNameData-mock-id-2>"
        }
      }
    }
  }
}
`;

exports[`with @relay_test_operation should generate data for @match with PlainUserNameRenderer_name 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest46Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest32Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest32Fragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    __typename
    ... on PlainUserNameRenderer {
      ...RelayMockPayloadGeneratorTest3PlainUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTest32Fragment: js(module: "RelayMockPayloadGeneratorTest3PlainUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTest32Fragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTest32Fragment: js(module: "PlainUserNameRenderer.react", id: "RelayMockPayloadGeneratorTest32Fragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...RelayMockPayloadGeneratorTest3MarkdownUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTest32Fragment: js(module: "RelayMockPayloadGeneratorTest3MarkdownUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTest32Fragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTest32Fragment: js(module: "MarkdownUserNameRenderer.react", id: "RelayMockPayloadGeneratorTest32Fragment.nameRenderer")
    }
  }
}

fragment RelayMockPayloadGeneratorTest3MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
    id
  }
}

fragment RelayMockPayloadGeneratorTest3PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "nameRenderer": {
        "__typename": "PlainUserNameRenderer",
        "__module_operation_RelayMockPayloadGeneratorTest32Fragment": "RelayMockPayloadGeneratorTest3PlainUserNameRenderer_name$normalization",
        "plaintext": "<mock-value-for-field-\\"plaintext\\">",
        "data": {
          "text": "<mock-value-for-field-\\"text\\">",
          "id": "<PlainUserNameData-mock-id-2>"
        }
      }
    }
  }
}
`;

exports[`with @relay_test_operation should generate data for @module 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest44Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTestNameRendererFragment
    id
  }
}

fragment RelayMockPayloadGeneratorTestMarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
    id
  }
}

fragment RelayMockPayloadGeneratorTestNameRendererFragment on User {
  id
  nameRenderer {
    __typename
    ... on MarkdownUserNameRenderer {
      ...RelayMockPayloadGeneratorTestMarkdownUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTestNameRendererFragment: js(module: "RelayMockPayloadGeneratorTestMarkdownUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTestNameRendererFragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTestNameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "RelayMockPayloadGeneratorTestNameRendererFragment.nameRenderer")
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "nameRenderer": {
        "__typename": "MarkdownUserNameRenderer",
        "__module_operation_RelayMockPayloadGeneratorTestNameRendererFragment": "RelayMockPayloadGeneratorTestMarkdownUserNameRenderer_name$normalization",
        "markdown": "<mock-value-for-field-\\"markdown\\">",
        "data": {
          "markup": "<mock-value-for-field-\\"markup\\">",
          "id": "<MarkdownUserNameData-mock-id-2>"
        }
      }
    }
  }
}
`;

exports[`with @relay_test_operation should generate data for @module with \`null\` in mock resolvers 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest48Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest34Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest34Fragment on User {
  id
  nameRenderer {
    __typename
    ... on MarkdownUserNameRenderer {
      ...RelayMockPayloadGeneratorTest5MarkdownUserNameRenderer_name
      __module_operation_RelayMockPayloadGeneratorTest34Fragment: js(module: "RelayMockPayloadGeneratorTest5MarkdownUserNameRenderer_name$normalization.graphql", id: "RelayMockPayloadGeneratorTest34Fragment.nameRenderer")
      __module_component_RelayMockPayloadGeneratorTest34Fragment: js(module: "MarkdownUserNameRenderer.react", id: "RelayMockPayloadGeneratorTest34Fragment.nameRenderer")
    }
  }
}

fragment RelayMockPayloadGeneratorTest5MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<Node-mock-id-1>",
      "nameRenderer": null
    }
  }
}
`;

exports[`with @relay_test_operation should throw if invalid default value provide for __module_operation. 1`] = `"RelayMockPayloadGenerator(): Unexpected default value for a field \`__module_operation\` in the mock resolver for @module dependency. Provided value is \\"{\\"kind\\":\\"InvalidObject\\"}\\" and we're expecting an object of a type \`NormalizationSplitOperation\`. Please adjust mock resolver for the type \\"MarkdownUserNameRenderer\\". Typically it should require a file \\"RelayMockPayloadGeneratorTest4MarkdownUserNameRenderer_name$normalization.graphql\\"."`;
