Input:
var Relay = require('react-relay');
var x = Relay.QL`
  fragment on NewsFeedConnection {
    edges {
      node {
        id,
        ... on Story {
          attachments,
        }
      },
    },
  }
`;

Output:
var Relay = require('react-relay');
var x = (function () {
  return {
    children: [{
      alias: null,
      calls: [],
      children: [{
        alias: null,
        calls: [],
        children: [{
          alias: null,
          calls: [],
          children: [],
          condition: null,
          directives: [],
          fieldName: 'id',
          kind: 'Field',
          metadata: {
            parentType: 'Node',
            isRequisite: true
          }
        }, {
          alias: null,
          calls: [],
          children: [],
          condition: null,
          directives: [],
          fieldName: '__typename',
          kind: 'Field',
          metadata: {
            parentType: 'Node',
            isGenerated: true,
            isRequisite: true
          }
        }, {
          children: [{
            alias: null,
            calls: [],
            children: [{
              alias: null,
              calls: [],
              children: [],
              condition: null,
              directives: [],
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                parentType: 'Node',
                isGenerated: true,
                isRequisite: true
              }
            }, {
              alias: null,
              calls: [],
              children: [],
              condition: null,
              directives: [],
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                parentType: 'Node',
                isGenerated: true,
                isRequisite: true
              }
            }],
            condition: null,
            directives: [],
            fieldName: 'attachments',
            kind: 'Field',
            metadata: {
              parentType: 'Story',
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isUnionOrInterface: true,
              isPlural: true
            }
          }, {
            alias: null,
            calls: [],
            children: [],
            condition: null,
            directives: [],
            fieldName: 'id',
            kind: 'Field',
            metadata: {
              parentType: 'Story',
              isGenerated: true,
              isRequisite: true
            }
          }],
          directives: [],
          isPlural: null,
          kind: 'Fragment',
          metadata: {},
          name: 'Story',
          type: 'Story'
        }],
        condition: null,
        directives: [],
        fieldName: 'node',
        kind: 'Field',
        metadata: {
          parentType: 'NewsFeedConnectionEdge',
          inferredRootCallName: 'node',
          inferredPrimaryKey: 'id',
          isUnionOrInterface: true,
          isRequisite: true
        }
      }, {
        alias: null,
        calls: [],
        children: [],
        condition: null,
        directives: [],
        fieldName: 'cursor',
        kind: 'Field',
        metadata: {
          parentType: 'NewsFeedConnectionEdge',
          isGenerated: true,
          isRequisite: true
        }
      }],
      condition: null,
      directives: [],
      fieldName: 'edges',
      kind: 'Field',
      metadata: {
        parentType: 'NewsFeedConnection',
        isPlural: true
      }
    }, {
      alias: null,
      calls: [],
      children: [{
        alias: null,
        calls: [],
        children: [],
        condition: null,
        directives: [],
        fieldName: 'hasNextPage',
        kind: 'Field',
        metadata: {
          parentType: 'PageInfo',
          isGenerated: true,
          isRequisite: true
        }
      }, {
        alias: null,
        calls: [],
        children: [],
        condition: null,
        directives: [],
        fieldName: 'hasPreviousPage',
        kind: 'Field',
        metadata: {
          parentType: 'PageInfo',
          isGenerated: true,
          isRequisite: true
        }
      }],
      condition: null,
      directives: [],
      fieldName: 'pageInfo',
      kind: 'Field',
      metadata: {
        parentType: 'NewsFeedConnection',
        isGenerated: true,
        isRequisite: true
      }
    }],
    directives: [],
    isPlural: null,
    kind: 'Fragment',
    metadata: {},
    name: 'MetadataDynamic',
    type: 'NewsFeedConnection'
  };
})();
