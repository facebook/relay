// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MaskTransform matches expected output: relay-mask-transform.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserProfile on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    ...PhotoFragment @relay(mask: false)
    ...AnotherRecursiveFragment @relay(mask: false) @include(if: $cond)
    ...PhotoFragment
  }
  smallPic: profilePicture(size: 20) {
    ...PhotoFragment @relay(mask: true)
  }
}

fragment PhotoFragment on Image {
  uri
  ...RecursiveFragment @relay(mask: false)
}

fragment RecursiveFragment on Image {
  uri
  width
}

fragment AnotherRecursiveFragment on Image {
  uri
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserProfile on User {
  profilePicture(size: $ProfilePicture_SIZE) {
    ... on Image {
      uri
      ... on Image {
        uri
        width
      }
    }
    ... on Image @include(if: $cond) {
      uri
    }
    ...PhotoFragment
  }
  smallPic: profilePicture(size: 20) {
    ...PhotoFragment
  }
}

fragment PhotoFragment on Image {
  uri
  ... on Image {
    uri
    width
  }
}

fragment RecursiveFragment on Image {
  uri
  width
}

fragment AnotherRecursiveFragment on Image {
  uri
}

`;

exports[`MaskTransform matches expected output: relay-mask-transform-incompatible-type-invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentFragment on Query {
  ...StringFragment @relay(mask: false)
  ...NullableIDFragment @relay(mask: false)
}

fragment NullableIDFragment on Query {
  node(id: $id) {
    id
  }
}

fragment StringFragment on Query {
  task(number: $id) {
    title
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Cannot combine variables with incompatible types Int and ID when applying @relay(unmask: true).

Source: GraphQL request (14:16)
13: fragment StringFragment on Query {
14:   task(number: $id) {
                   ^
15:     title

Source: GraphQL request (8:12)
7: fragment NullableIDFragment on Query {
8:   node(id: $id) {
              ^
9:     id

`;

exports[`MaskTransform matches expected output: relay-mask-transform-incompatible-type-invalid2.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentFragment on Query {
  ...NullableIDListFragment @relay(mask: false)
  ...NullableIDFragment @relay(mask: false)
}

fragment NullableIDFragment on Query {
  node(id: $id) {
    id
  }
}

fragment NullableIDListFragment on Query {
  nodes(ids: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Cannot combine variables with incompatible types [ID!] and ID when applying @relay(unmask: true).

Source: GraphQL request (14:14)
13: fragment NullableIDListFragment on Query {
14:   nodes(ids: $id) {
                 ^
15:     id

Source: GraphQL request (8:12)
7: fragment NullableIDFragment on Query {
8:   node(id: $id) {
              ^
9:     id

`;

exports[`MaskTransform matches expected output: relay-mask-transform-mixed-local-root-invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment ParentQuery on Query @argumentDefinitions(id: {type: "ID!"}) {
  ...NonNullIDFragment @relay(mask: false)
}

fragment NonNullIDFragment on Query {
  node_id_required(id: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Cannot combine global and local variables when applying @relay(unmask: true).

Source: GraphQL request (2:52)
1: # expected-to-throw
2: fragment ParentQuery on Query @argumentDefinitions(id: {type: "ID!"}) {
                                                      ^
3:   ...NonNullIDFragment @relay(mask: false)

Source: GraphQL request (7:24)
6: fragment NonNullIDFragment on Query {
7:   node_id_required(id: $id) {
                          ^
8:     id

`;

exports[`MaskTransform matches expected output: relay-mask-transform-mixed-null.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NullableIDFirstFragment on Query {
  ...NullableIDFragment @relay(mask: false)
  ...NonNullIDFragment @relay(mask: false)
}

fragment NonNullableIDFirstFragment on Query {
  ...NonNullIDFragment @relay(mask: false)
  ...NullableIDFragment @relay(mask: false)
}

fragment NullableIDFragment on Query {
  node(id: $id) {
    id
  }
}

fragment NonNullIDFragment on Query {
  node_id_required(id: $id) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NullableIDFirstFragment on Query {
  ... on Query {
    node(id: $id) {
      id
    }
  }
  ... on Query {
    node_id_required(id: $id) {
      id
    }
  }
}
[
  {
    "kind": "RootArgumentDefinition",
    "loc": {
      "kind": "Source",
      "start": 403,
      "end": 406,
      "source": {
        "body": "fragment NullableIDFirstFragment on Query {\\n  ...NullableIDFragment @relay(mask: false)\\n  ...NonNullIDFragment @relay(mask: false)\\n}\\n\\nfragment NonNullableIDFirstFragment on Query {\\n  ...NonNullIDFragment @relay(mask: false)\\n  ...NullableIDFragment @relay(mask: false)\\n}\\n\\nfragment NullableIDFragment on Query {\\n  node(id: $id) {\\n    id\\n  }\\n}\\n\\nfragment NonNullIDFragment on Query {\\n  node_id_required(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "name": "id",
    "type": "ID!"
  }
]

fragment NonNullableIDFirstFragment on Query {
  ... on Query {
    node_id_required(id: $id) {
      id
    }
  }
  ... on Query {
    node(id: $id) {
      id
    }
  }
}
[
  {
    "kind": "RootArgumentDefinition",
    "loc": {
      "kind": "Source",
      "start": 403,
      "end": 406,
      "source": {
        "body": "fragment NullableIDFirstFragment on Query {\\n  ...NullableIDFragment @relay(mask: false)\\n  ...NonNullIDFragment @relay(mask: false)\\n}\\n\\nfragment NonNullableIDFirstFragment on Query {\\n  ...NonNullIDFragment @relay(mask: false)\\n  ...NullableIDFragment @relay(mask: false)\\n}\\n\\nfragment NullableIDFragment on Query {\\n  node(id: $id) {\\n    id\\n  }\\n}\\n\\nfragment NonNullIDFragment on Query {\\n  node_id_required(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "name": "id",
    "type": "ID!"
  }
]

fragment NullableIDFragment on Query {
  node(id: $id) {
    id
  }
}
[
  {
    "kind": "RootArgumentDefinition",
    "loc": {
      "kind": "Source",
      "start": 321,
      "end": 324,
      "source": {
        "body": "fragment NullableIDFirstFragment on Query {\\n  ...NullableIDFragment @relay(mask: false)\\n  ...NonNullIDFragment @relay(mask: false)\\n}\\n\\nfragment NonNullableIDFirstFragment on Query {\\n  ...NonNullIDFragment @relay(mask: false)\\n  ...NullableIDFragment @relay(mask: false)\\n}\\n\\nfragment NullableIDFragment on Query {\\n  node(id: $id) {\\n    id\\n  }\\n}\\n\\nfragment NonNullIDFragment on Query {\\n  node_id_required(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "name": "id",
    "type": "ID"
  }
]

fragment NonNullIDFragment on Query {
  node_id_required(id: $id) {
    id
  }
}
[
  {
    "kind": "RootArgumentDefinition",
    "loc": {
      "kind": "Source",
      "start": 403,
      "end": 406,
      "source": {
        "body": "fragment NullableIDFirstFragment on Query {\\n  ...NullableIDFragment @relay(mask: false)\\n  ...NonNullIDFragment @relay(mask: false)\\n}\\n\\nfragment NonNullableIDFirstFragment on Query {\\n  ...NonNullIDFragment @relay(mask: false)\\n  ...NullableIDFragment @relay(mask: false)\\n}\\n\\nfragment NullableIDFragment on Query {\\n  node(id: $id) {\\n    id\\n  }\\n}\\n\\nfragment NonNullIDFragment on Query {\\n  node_id_required(id: $id) {\\n    id\\n  }\\n}\\n",
        "name": "GraphQL request",
        "locationOffset": {
          "line": 1,
          "column": 1
        }
      }
    },
    "name": "id",
    "type": "ID!"
  }
]
`;
