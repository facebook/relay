==================================== INPUT ====================================
fragment resolverOnInterfaceOfAllStrongModelTypeFragment on Cat {
    description
}

# %extensions%

interface Cat {
    id: ID!
    description: String @relay_resolver(import_path: "CatResolver")
}

type Tabby implements Cat {
    id: ID!
    description: String
    __relay_model_instance: RelayResolverValue @relay_resolver(fragment_name: "Tabby__id", import_path: "TabbyResolver", inject_fragment_data: "id")
}

type Persian implements Cat {
    id: ID!
    description: String
    __relay_model_instance: RelayResolverValue @relay_resolver(fragment_name: "Persian__id", import_path: "PersianResolver", inject_fragment_data: "id")
}
==================================== OUTPUT ===================================
import type { FragmentType } from "relay-runtime";
import {Persian as persianRelayModelInstanceResolverType} from "<generated>";
import {Tabby as tabbyRelayModelInstanceResolverType} from "<generated>";
import catDescriptionResolverType from "CatResolver";
// Type assertion validating that `catDescriptionResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(catDescriptionResolverType: (
  model: ReturnType<typeof persianRelayModelInstanceResolverType> | ReturnType<typeof tabbyRelayModelInstanceResolverType>,
) => ?mixed);
declare export opaque type resolverOnInterfaceOfAllStrongModelTypeFragment$fragmentType: FragmentType;
export type resolverOnInterfaceOfAllStrongModelTypeFragment$data = {|
  +description: ?ReturnType<typeof catDescriptionResolverType>,
  +$fragmentType: resolverOnInterfaceOfAllStrongModelTypeFragment$fragmentType,
|};
export type resolverOnInterfaceOfAllStrongModelTypeFragment$key = {
  +$data?: resolverOnInterfaceOfAllStrongModelTypeFragment$data,
  +$fragmentSpreads: resolverOnInterfaceOfAllStrongModelTypeFragment$fragmentType,
  ...
};
