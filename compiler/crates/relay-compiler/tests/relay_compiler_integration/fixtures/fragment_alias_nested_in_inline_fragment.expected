==================================== INPUT ====================================
//- foo.js
graphql`
  query fooQuery {
     me {
        ...foo
     }
  }`;

graphql`
  fragment foo on User {
   ... on User {
     ...fooInner @alias
   }
  }`;

graphql`
  fragment fooInner on User {
     name
  }`;


//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql",
   "featureFlags": {
      "enable_fragment_aliases": {
         "kind": "enabled"
      }
   }
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/foo.graphql.js
/**
 * <auto-generated> SignedSource<<3ffa1f4ea14c9dc9914907c99445fb9f>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { fooInner$fragmentType } from "./fooInner.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type foo$fragmentType: FragmentType;
export type foo$data = {|
  +fooInner: {|
    +$fragmentSpreads: fooInner$fragmentType,
  |},
  +$fragmentType: foo$fragmentType,
|};
export type foo$key = {
  +$data?: foo$data,
  +$fragmentSpreads: foo$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "foo",
  "selections": [
    {
      "fragment": {
        "kind": "InlineFragment",
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "fooInner"
          }
        ],
        "type": "User",
        "abstractKey": null
      },
      "kind": "AliasedInlineFragmentSpread",
      "name": "fooInner"
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "cb852f428534e4d18b622320fecaa807";

module.exports = ((node/*: any*/)/*: Fragment<
  foo$fragmentType,
  foo$data,
>*/);

//- __generated__/fooInner.graphql.js
/**
 * <auto-generated> SignedSource<<75e048a7d2500a23d76cc69843f4aae3>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type fooInner$fragmentType: FragmentType;
export type fooInner$data = {|
  +name: ?string,
  +$fragmentType: fooInner$fragmentType,
|};
export type fooInner$key = {
  +$data?: fooInner$data,
  +$fragmentSpreads: fooInner$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "fooInner",
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "name",
      "storageKey": null
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "56025f0f9c913622266e88aa8587934e";

module.exports = ((node/*: any*/)/*: Fragment<
  fooInner$fragmentType,
  fooInner$data,
>*/);

//- __generated__/fooQuery.graphql.js
/**
 * <auto-generated> SignedSource<<ad44025e03ede3c075fa44c87694f3fd>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ConcreteRequest, Query } from 'relay-runtime';
import type { foo$fragmentType } from "./foo.graphql";
export type fooQuery$variables = {||};
export type fooQuery$data = {|
  +me: ?{|
    +$fragmentSpreads: foo$fragmentType,
  |},
|};
export type fooQuery = {|
  response: fooQuery$data,
  variables: fooQuery$variables,
|};
*/

var node/*: ConcreteRequest*/ = {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "foo"
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "name",
            "storageKey": null
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "cacheID": "a3a7b44684bba13f2b975062b394ce72",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": "query fooQuery {\n  me {\n    ...foo\n  }\n}\n\nfragment foo on User {\n  ...fooInner\n}\n\nfragment fooInner on User {\n  name\n}\n"
  }
};

(node/*: any*/).hash = "c7ea9fa69ee8b2305ff517551fc1cc17";

module.exports = ((node/*: any*/)/*: Query<
  fooQuery$variables,
  fooQuery$data,
>*/);
