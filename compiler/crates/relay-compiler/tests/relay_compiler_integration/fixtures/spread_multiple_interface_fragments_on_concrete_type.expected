==================================== INPUT ====================================
//- PersonComponent.js
graphql`fragment PersonComponentFragment on IPerson {
  name
}`

//- ActorComponent.js
graphql`fragment ActorComponentFragment on IActor {
  description
}`

//- SpreadInterfaceFragmentOnConcreteTypeComponent.js
graphql`fragment SpreadInterfaceFragmentOnConcreteTypeComponentFragment on User {
  ...PersonComponentFragment
  ...ActorComponentFragment
}`

//- UserTypeResolvers.js
/**
 * @RelayResolver User implements IPerson & IActor
 */

//- AdminTypeResolvers.js
/**
 * @RelayResolver Admin implements IPerson & IActor
 */

//- IPersonResolvers.js
/**
 * @RelayResolver IPerson.name: String
 */

//- IActorResolvers.js
/**
 * @RelayResolver IActor.description: String
 */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "featureFlags": {
    "enable_relay_resolver_transform": true,
    "enable_resolver_normalization_ast": true,
    "relay_resolver_enable_interface_output_type": { "kind": "enabled" }
  }
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql

interface IPerson {
  id: ID!
}

interface IActor {
  id: ID!
}
==================================== OUTPUT ===================================
//- __generated__/ActorComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<29a6721ae972d24abc6fd33ed4cae7bd>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin____relay_model_instance$data } from "Admin____relay_model_instance.graphql";
import type { User____relay_model_instance$data } from "User____relay_model_instance.graphql";
import type { FragmentType } from "relay-runtime";
import {description as iActorDescriptionResolverType} from "IActorResolvers";
// Type assertion validating that `iActorDescriptionResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(iActorDescriptionResolverType: (
  model: Admin____relay_model_instance$data['__relay_model_instance'] | User____relay_model_instance$data['__relay_model_instance'],
) => ?string);
declare export opaque type ActorComponentFragment$fragmentType: FragmentType;
export type ActorComponentFragment$data = {|
  +description: ?string,
  +$fragmentType: ActorComponentFragment$fragmentType,
|};
export type ActorComponentFragment$key = {
  +$data?: ActorComponentFragment$data,
  +$fragmentSpreads: ActorComponentFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "ActorComponentFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "Admin____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "description",
              "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin____relay_model_instance.graphql'), require('IActorResolvers').description, '__relay_model_instance', true),
              "path": "description"
            }
          ],
          "type": "Admin",
          "abstractKey": null
        },
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "User____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "description",
              "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User____relay_model_instance.graphql'), require('IActorResolvers').description, '__relay_model_instance', true),
              "path": "description"
            }
          ],
          "type": "User",
          "abstractKey": null
        }
      ]
    }
  ],
  "type": "IActor",
  "abstractKey": "__isIActor"
};

(node/*: any*/).hash = "44e992843e41c24ce4cc28290f4c04c3";

module.exports = ((node/*: any*/)/*: Fragment<
  ActorComponentFragment$fragmentType,
  ActorComponentFragment$data,
>*/);

//- __generated__/Admin____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<7fbe3989595c55397f4bcc5c81ec30b2>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin__id$data } from "Admin__id.graphql";
import type { FragmentType } from "relay-runtime";
import {Admin as adminRelayModelInstanceResolverType} from "AdminTypeResolvers";
// Type assertion validating that `adminRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(adminRelayModelInstanceResolverType: (
  id: Admin__id$data['id'],
) => mixed);
declare export opaque type Admin____relay_model_instance$fragmentType: FragmentType;
export type Admin____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof adminRelayModelInstanceResolverType>>,
  +$fragmentType: Admin____relay_model_instance$fragmentType,
|};
export type Admin____relay_model_instance$key = {
  +$data?: Admin____relay_model_instance$data,
  +$fragmentSpreads: Admin____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "Admin__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin__id.graphql'), require('AdminTypeResolvers').Admin, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin____relay_model_instance$fragmentType,
  Admin____relay_model_instance$data,
>*/);

//- __generated__/Admin__id.graphql.js
/**
 * <auto-generated> SignedSource<<29acfbf1d6f559b8b77e9cd1f35218c0>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type Admin__id$fragmentType: FragmentType;
export type Admin__id$data = {|
  +id: string,
  +$fragmentType: Admin__id$fragmentType,
|};
export type Admin__id$key = {
  +$data?: Admin__id$data,
  +$fragmentSpreads: Admin__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin__id$fragmentType,
  Admin__id$data,
>*/);

//- __generated__/PersonComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<4ea82f388eeb21ecbc79f404917c194e>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin____relay_model_instance$data } from "Admin____relay_model_instance.graphql";
import type { User____relay_model_instance$data } from "User____relay_model_instance.graphql";
import type { FragmentType } from "relay-runtime";
import {name as iPersonNameResolverType} from "IPersonResolvers";
// Type assertion validating that `iPersonNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(iPersonNameResolverType: (
  model: Admin____relay_model_instance$data['__relay_model_instance'] | User____relay_model_instance$data['__relay_model_instance'],
) => ?string);
declare export opaque type PersonComponentFragment$fragmentType: FragmentType;
export type PersonComponentFragment$data = {|
  +name: ?string,
  +$fragmentType: PersonComponentFragment$fragmentType,
|};
export type PersonComponentFragment$key = {
  +$data?: PersonComponentFragment$data,
  +$fragmentSpreads: PersonComponentFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "PersonComponentFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "Admin____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "name",
              "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin____relay_model_instance.graphql'), require('IPersonResolvers').name, '__relay_model_instance', true),
              "path": "name"
            }
          ],
          "type": "Admin",
          "abstractKey": null
        },
        {
          "kind": "InlineFragment",
          "selections": [
            {
              "alias": null,
              "args": null,
              "fragment": {
                "args": null,
                "kind": "FragmentSpread",
                "name": "User____relay_model_instance"
              },
              "kind": "RelayResolver",
              "name": "name",
              "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User____relay_model_instance.graphql'), require('IPersonResolvers').name, '__relay_model_instance', true),
              "path": "name"
            }
          ],
          "type": "User",
          "abstractKey": null
        }
      ]
    }
  ],
  "type": "IPerson",
  "abstractKey": "__isIPerson"
};

(node/*: any*/).hash = "a57dd30bd59412781e9566e1553e2d70";

module.exports = ((node/*: any*/)/*: Fragment<
  PersonComponentFragment$fragmentType,
  PersonComponentFragment$data,
>*/);

//- __generated__/SpreadInterfaceFragmentOnConcreteTypeComponentFragment.graphql.js
/**
 * <auto-generated> SignedSource<<290409f030b9f36f1caae1e20cc4b354>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { ActorComponentFragment$fragmentType } from "ActorComponentFragment.graphql";
import type { PersonComponentFragment$fragmentType } from "PersonComponentFragment.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type SpreadInterfaceFragmentOnConcreteTypeComponentFragment$fragmentType: FragmentType;
export type SpreadInterfaceFragmentOnConcreteTypeComponentFragment$data = {|
  +$fragmentSpreads: ActorComponentFragment$fragmentType & PersonComponentFragment$fragmentType,
  +$fragmentType: SpreadInterfaceFragmentOnConcreteTypeComponentFragment$fragmentType,
|};
export type SpreadInterfaceFragmentOnConcreteTypeComponentFragment$key = {
  +$data?: SpreadInterfaceFragmentOnConcreteTypeComponentFragment$data,
  +$fragmentSpreads: SpreadInterfaceFragmentOnConcreteTypeComponentFragment$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "SpreadInterfaceFragmentOnConcreteTypeComponentFragment",
  "selections": [
    {
      "args": null,
      "kind": "FragmentSpread",
      "name": "PersonComponentFragment"
    },
    {
      "args": null,
      "kind": "FragmentSpread",
      "name": "ActorComponentFragment"
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "e2b46497d73b1e146810ae14681ce015";

module.exports = ((node/*: any*/)/*: Fragment<
  SpreadInterfaceFragmentOnConcreteTypeComponentFragment$fragmentType,
  SpreadInterfaceFragmentOnConcreteTypeComponentFragment$data,
>*/);

//- __generated__/User____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<7ffabc2a97c3589cbfd20a23b3b608ca>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { User__id$data } from "User__id.graphql";
import type { FragmentType } from "relay-runtime";
import {User as userRelayModelInstanceResolverType} from "UserTypeResolvers";
// Type assertion validating that `userRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userRelayModelInstanceResolverType: (
  id: User__id$data['id'],
) => mixed);
declare export opaque type User____relay_model_instance$fragmentType: FragmentType;
export type User____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof userRelayModelInstanceResolverType>>,
  +$fragmentType: User____relay_model_instance$fragmentType,
|};
export type User____relay_model_instance$key = {
  +$data?: User____relay_model_instance$data,
  +$fragmentSpreads: User____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "User__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('User__id.graphql'), require('UserTypeResolvers').User, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "User",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  User____relay_model_instance$fragmentType,
  User____relay_model_instance$data,
>*/);

//- __generated__/User__id.graphql.js
/**
 * <auto-generated> SignedSource<<0a0f39eb34bfc882d28378a0b05b3c17>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type User__id$fragmentType: FragmentType;
export type User__id$data = {|
  +id: string,
  +$fragmentType: User__id$fragmentType,
|};
export type User__id$key = {
  +$data?: User__id$data,
  +$fragmentSpreads: User__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "User__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  User__id$fragmentType,
  User__id$data,
>*/);
