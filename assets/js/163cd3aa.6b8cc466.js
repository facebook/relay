"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[38099],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){return function(t){var a=u(t.components);return n.createElement(e,i({},t,{components:a}))}},u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,y=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(y,l(l({ref:t},p),{},{components:a})):n.createElement(y,l({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var n=a(67294),r=a(34334);const i="tabItem_Ymn6";function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:a},t)}},74866:(e,t,a)=>{a.r(t),a.d(t,{default:()=>w});var n=a(83117),r=a(67294),i=a(34334),o=a(12466),l=a(76775),s=a(91980),p=a(67392),m=a(50012);function u(e){return function(e){var t,a;return null!=(t=null==(a=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:u(a);return function(e){var t=(0,p.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function c(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function y(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function f(e){var t,a,n,i,o=e.defaultValue,l=e.queryString,s=void 0!==l&&l,p=e.groupId,u=d(e),f=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!c({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:u})})),h=f[0],g=f[1],x=y({queryString:s,groupId:p}),v=x[0],b=x[1],E=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:p}.groupId),a=(0,m.Nk)(t),n=a[0],i=a[1],[n,(0,r.useCallback)((function(e){t&&i.set(e)}),[t,i])]),w=E[0],k=E[1],T=function(){var e=null!=v?v:w;return c({value:e,tabValues:u})?e:null}();return(0,r.useLayoutEffect)((function(){T&&g(T)}),[T]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!c({value:e,tabValues:u}))throw new Error("Can't select invalid tab value="+e);g(e),b(e),k(e)}),[b,k,u]),tabValues:u}}var h=a(72389);const g="tabList__CuJ",x="tabItem_LNqP";function v(e){var t=e.className,a=e.block,l=e.selectedValue,s=e.selectValue,p=e.tabValues,m=[],u=(0,o.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,a=m.indexOf(t),n=p[a].value;n!==l&&(u(t),s(n))},c=function(e){var t,a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var n,r=m.indexOf(e.currentTarget)+1;a=null!=(n=m[r])?n:m[0];break;case"ArrowLeft":var i,o=m.indexOf(e.currentTarget)-1;a=null!=(i=m[o])?i:m[m.length-1]}null==(t=a)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},t)},p.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return m.push(e)},onKeyDown:c,onClick:d},o,{className:(0,i.Z)("tabs__item",x,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=a?a:t)})))}function b(e){var t=e.lazy,a=e.children,n=e.selectedValue,i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){var o=i.find((function(e){return e.props.value===n}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function E(e){var t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(b,(0,n.Z)({},e,t)))}function w(e){var t=(0,h.default)();return r.createElement(E,(0,n.Z)({key:String(t)},e))}},68629:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(39960),r=a(86341),i=a(67294);function o(){var e=window.encodeURI(JSON.stringify({title:"Feedback about "+window.location.pathname,description:"**!!! Required !!!**\n\nPlease modify the task description to let us know how the docs can be improved.\n\n**Please do not ask support questions via this form! Instead, ask in fburl.com/relay_support**",tag_ids:{add:[0xac96423e5b680,0x64079768ac750]}}));window.open("https://www.internalfb.com/tasks/?n="+e)}function l(e){var t=e.children;return i.createElement("div",{className:"docsRating",id:"docsRating"},i.createElement("hr",null),t)}var s=function(){var e=i.useState(!1),t=e[0],a=e[1],n=function(e){a(!0),function(e){window.ga&&window.ga("send",{hitType:"event",eventCategory:"button",eventAction:"feedback",eventValue:e})}(e)};return t?"Thank you for letting us know!":i.createElement(i.Fragment,null,"Is this page useful?",i.createElement("svg",{className:"i_thumbsup",alt:"Like",id:"docsRating-like",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return n(1)}},i.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})),i.createElement("svg",{className:"i_thumbsdown",alt:"Dislike",id:"docsRating-dislike",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return n(0)}},i.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})))},p=function(){return i.createElement("p",null,"Let us know how these docs can be improved by",i.createElement("a",{className:"button",role:"button",tabIndex:0,onClick:o},"Filing a task"))},m=function(){return i.createElement("p",null,"Help us make the site even better by"," ",i.createElement(n.default,{to:"https://www.surveymonkey.com/r/FYC9TCJ"},"answering a few quick questions"),".")},u=function(){return i.createElement(l,null,i.createElement(p,null),i.createElement(s,null),i.createElement(m,null))},d=function(){return i.createElement(l,null,i.createElement(s,null),i.createElement(m,null))};const c=function(){return(0,r.fbContent)({internal:i.createElement(u,null),external:i.createElement(d,null)})}},27226:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>d,default:()=>g,frontMatter:()=>u,metadata:()=>c,toc:()=>f});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),o=a(68629),l=a(86341),s=a(74866),p=a(85162),m=["components"],u={id:"type-emission",title:"Type Emission",slug:"/guides/type-emission/",description:"Relay guide to type emission",keywords:["type emission"]},d=void 0,c={unversionedId:"guides/type-emission",id:"version-v20.0.0/guides/type-emission",title:"Type Emission",description:"Relay guide to type emission",source:"@site/versioned_docs/version-v20.0.0/guides/type-emission.md",sourceDirName:"guides",slug:"/guides/type-emission/",permalink:"/docs/v20.0.0/guides/type-emission/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/guides/type-emission.md",tags:[],version:"v20.0.0",frontMatter:{id:"type-emission",title:"Type Emission",slug:"/guides/type-emission/",description:"Relay guide to type emission",keywords:["type emission"]},sidebar:"docs",previous:{title:"Network Layer",permalink:"/docs/v20.0.0/guides/network-layer/"},next:{title:"Codemods",permalink:"/docs/v20.0.0/guides/codemods/"}},y={},f=[{value:"Operation variables",id:"operation-variables",level:2},{value:"Operation and fragment data",id:"operation-and-fragment-data",level:2},{value:"Fragment references",id:"fragment-references",level:2},{value:"Single artifact directory",id:"single-artifact-directory",level:2},{value:"Background information",id:"background-information",level:3}],h={toc:f};function g(e){var t=e.components,a=(0,r.Z)(e,m);return(0,i.mdx)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"As part of its normal work, the ",(0,i.mdx)("a",{parentName:"p",href:"../compiler"},(0,i.mdx)("strong",{parentName:"a"},"Relay Compiler"))," will emit type information for your language of choice that helps you write type-safe application code. These types are included in the artifacts that ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay-compiler")," generates to describe your operations and fragments."),(0,i.mdx)("h2",{id:"operation-variables"},"Operation variables"),(0,i.mdx)("p",null,"The shape of the variables object used for query, mutation, or subscription operations."),(0,i.mdx)("p",null,"In this example the emitted type-information would require the variables object to contain an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artistID")," key with a non-null string."),(0,i.mdx)(s.default,{defaultValue:(0,l.fbContent)({internal:"Flow",external:"TypeScript"}),values:[{label:"Flow",value:"Flow"},{label:"TypeScript",value:"TypeScript"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"Flow",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n"))),(0,i.mdx)(p.default,{value:"TypeScript",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  // variables are expected to be of type ExampleQuery$variables\n  {artistID: 'banksy'},\n);\n")))),(0,i.mdx)("h2",{id:"operation-and-fragment-data"},"Operation and fragment data"),(0,i.mdx)("p",null,"The shape of the data selected in a operation or fragment, following the ",(0,i.mdx)("a",{parentName:"p",href:"../../principles-and-architecture/thinking-in-relay#data-masking"},"data-masking")," rules. That is, excluding any data selected by fragment spreads."),(0,i.mdx)("p",null,"In this example the emitted type-information describes the response data which is returned by ",(0,i.mdx)("inlineCode",{parentName:"p"},"useLazyLoadQuery")," (or ",(0,i.mdx)("inlineCode",{parentName:"p"},"usePreloadedQuery"),")."),(0,i.mdx)(s.default,{defaultValue:(0,l.fbContent)({internal:"Flow",external:"TypeScript"}),values:[{label:"Flow",value:"Flow"},{label:"TypeScript",value:"TypeScript"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"Flow",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery$data = {\n *   +artist: {\n *     +name: ?string,\n *   }\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n"))),(0,i.mdx)(p.default,{value:"TypeScript",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name?: string\n *   }\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n      }\n    }\n  `,\n  {artistID: 'banksy'},\n);\n\nreturn props.artist && <div>{props.artist.name} is great!</div>\n")))),(0,i.mdx)("p",null,"Similarly, in this example the emitted type-information describes the type of the prop to match the type of the fragment reference ",(0,i.mdx)("inlineCode",{parentName:"p"},"useFragment")," expects to receive."),(0,i.mdx)(s.default,{defaultValue:(0,l.fbContent)({internal:"Flow",external:"TypeScript"}),values:[{label:"Flow",value:"Flow"},{label:"TypeScript",value:"TypeScript"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"Flow",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'/**\n * export type ExampleFragmentComponent_artist$data = {\n *   +name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport type { ExampleFragmentComponent_artist$key } from "__generated__/ExampleFragmentComponent_artist.graphql"\n\ntype Props = {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n'))),(0,i.mdx)(p.default,{value:"TypeScript",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'/**\n * export type ExampleFragmentComponent_artist$data = {\n *   readonly name: string\n * }\n *\n * export type ExampleFragmentComponent_artist$key = { ... }\n */\n\nimport { ExampleFragmentComponent_artist$key } from "__generated__/ExampleFragmentComponent_artist.graphql"\n\ninterface Props {\n  artist: ExampleFragmentComponent_artist$key,\n};\n\nexport default ExampleFragmentComponent(props: Props) {\n  // data is of type ExampleFragmentComponent_artist$data\n  const data = useFragment(\n    graphql`\n      fragment ExampleFragmentComponent_artist on Artist {\n        biography\n      }\n    `,\n    props.artist,\n  );\n\n  return <div>About the artist: {props.artist.biography}</div>;\n}\n')))),(0,i.mdx)("h2",{id:"fragment-references"},"Fragment references"),(0,i.mdx)("p",null,"The opaque identifier described in ",(0,i.mdx)("a",{parentName:"p",href:"../../principles-and-architecture/thinking-in-relay#data-masking"},"data-masking")," that a child container expects to receive from its parent, which represents the child container\u2019s fragment spread inside the parent\u2019s fragment."),(0,i.mdx)(l.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("admonition",{type:"important"},(0,i.mdx)("p",{parentName:"admonition"},"Please read ",(0,i.mdx)("a",{parentName:"p",href:"#single-artifact-directory"},"this important caveat")," about actually enabling type-safe fragment reference checking."))),(0,i.mdx)("p",null,"Consider a component that ",(0,i.mdx)("a",{parentName:"p",href:"../../guided-tour/rendering/fragments/#composing-fragments"},"composes")," the above fragment component example. In this example, the emitted type-information of the child component receives a unique opaque identifier type, called a fragment reference, which the type-information emitted for the parent\u2019s fragment references in the location where the child\u2019s fragment is spread. Thus ensuring that the child\u2019s fragment is spread into the parent\u2019s fragment ",(0,i.mdx)("em",{parentName:"p"},"and")," the correct fragment reference is passed to the child component at runtime."),(0,i.mdx)(s.default,{defaultValue:(0,l.fbContent)({internal:"Flow",external:"TypeScript"}),values:[{label:"Flow",value:"Flow"},{label:"TypeScript",value:"TypeScript"}],mdxType:"Tabs"},(0,i.mdx)(p.default,{value:"Flow",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'import { ExampleFragmentComponent } from "./ExampleFragmentComponent"\n\n/**\n * import type { ExampleFragmentComponent_artist$fragmentType } from "ExampleFragmentComponent_artist.graphql";\n *\n * export type ExampleQuery$data = {\n *   +artist: ?{\n *     +name: ?string,\n *     +$fragmentSpreads: ExampleFragmentComponent_artist$fragmentType,\n *   }\n * };\n * export type ExampleQuery$variables = {\n *   +artistID: string,\n * }\n * export type ExampleQuery = {\n *   +variables: ExampleQuery$variables,\n *   +response: ExampleQuery$data,\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: \'banksy\'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n'))),(0,i.mdx)(p.default,{value:"TypeScript",mdxType:"TabItem"},(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'import { ExampleFragmentComponent } from "./ExampleFragmentComponent"\n\n/**\n * import { ExampleFragmentComponent_artist$fragmentType } from "ExampleFragmentComponent_artist.graphql";\n *\n * export type ExampleQuery$data = {\n *   readonly artist?: {\n *     readonly name: ?string,\n *     readonly " $fragmentSpreads": ExampleFragmentComponent_artist$fragmentType\n *   }\n * }\n * export type ExampleQuery$variables = {\n *   readonly artistID: string\n * }\n * export type ExampleQuery = {\n *   readonly variables: ExampleQuery$variables\n *   readonly response: ExampleQuery$data\n * }\n */\n\n// data is of type ExampleQuery$data\nconst data = useLazyLoadQuery(\n  graphql`\n    query ExampleQuery($artistID: ID!) {\n      artist(id: $artistID) {\n        name\n        ...ExampleFragmentComponent_artist\n      }\n    }\n  `,\n  {artistID: \'banksy\'},\n);\n\n// Here only `data.artist.name` is directly visible,\n// the marker prop $fragmentSpreads indicates that `data.artist`\n// can be used for the component expecting this fragment spread.\nreturn <ExampleFragmentComponent artist={data.artist} />;\n')))),(0,i.mdx)(l.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("h2",{id:"single-artifact-directory"},"Single artifact directory"),(0,i.mdx)("p",null,"An important caveat to note is that by default strict fragment reference type-information will ",(0,i.mdx)("em",{parentName:"p"},"not")," be emitted, instead they will be typed as ",(0,i.mdx)("inlineCode",{parentName:"p"},"any")," and would allow you to pass in any data to the child component."),(0,i.mdx)("p",null,"To enable this feature, you will have to tell the compiler to store all the artifacts in a single directory, by specifying the ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifactDirectory")," in the\ncompiler configuration:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'{\n  // package.json\n  "relay": {\n    "artifactDirectory": "./src/__generated__",\n    ...\n  },\n  ...\n}\n')),(0,i.mdx)("p",null,"\u2026and additionally inform the babel plugin in your ",(0,i.mdx)("inlineCode",{parentName:"p"},".babelrc")," config where to look for the artifacts:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": [\n    ["relay", { "artifactDirectory": "./src/__generated__" }]\n  ]\n}\n')),(0,i.mdx)("p",null,"It is recommended to alias this directory in your module resolution configuration such that you don\u2019t need to specify relative paths in your source files. This is what is also done in the above examples, where artifacts are imported from a ",(0,i.mdx)("inlineCode",{parentName:"p"},"__generated__")," alias, rather than relative paths like ",(0,i.mdx)("inlineCode",{parentName:"p"},"../../../../__generated__"),"."),(0,i.mdx)("h3",{id:"background-information"},"Background information"),(0,i.mdx)("p",null,"The reason is that ",(0,i.mdx)("inlineCode",{parentName:"p"},"relay-compiler")," and its artifact emission is stateless. Meaning that it does not keep track of locations of original source files and where the compiler previously saved the accompanying artifact on disk. Thus, if the compiler were to emit artifacts that try to import fragment reference types from ",(0,i.mdx)("em",{parentName:"p"},"other")," artifacts, the compiler would:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"first need to know where on disk that other artifact exists;"),(0,i.mdx)("li",{parentName:"ul"},"and update imports when the other artifact changes location on disk.")),(0,i.mdx)("p",null,"Facebook uses a module system called ",(0,i.mdx)("a",{parentName:"p",href:"https://twitter.com/dan_abramov/status/758655309212704768"},"Haste"),", in which all source files are considered in a flat namespace. This means that an import declaration does not need to specify the path to another module and thus there is no need for the compiler to ever consider the above issues. I.e. an import only needs to specify the basename of the module filename and Haste takes care of actually finding the right module at import time. Outside of Facebook, however, usage of the Haste module system is non-existent nor encouraged, thus the decision to not import fragment reference types but instead type them as ",(0,i.mdx)("inlineCode",{parentName:"p"},"any"),"."),(0,i.mdx)("p",null,"At its simplest, we can consider Haste as a single directory that contains all module files, thus all module imports always being safe to import using relative sibling paths. This is what is achieved by the single artifact directory feature. Rather than co-locating artifacts with their source files, all artifacts are stored in a single directory, allowing the compiler to emit imports of fragment reference types.")),(0,i.mdx)(o.Z,{mdxType:"DocsRating"}))}g.isMDXComponent=!0}}]);