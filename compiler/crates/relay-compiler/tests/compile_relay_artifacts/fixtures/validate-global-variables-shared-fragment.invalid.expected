==================================== INPUT ====================================
# expected-to-throw
query validateGlobalVariablesSharedFragmentQuery($condition: Boolean) {
  me {
    # first visit a fragment that expects `$condition: Boolean`
    ...validateGlobalVariablesSharedFragment_user
    # then visit a fragment that expects `$condition: Boolean!` - so this *should* error
    ...validateGlobalVariablesSharedFragment_nonNull
  }
  viewer {
    actor {
      # then visit the (already cached) fragment that expects `$condition: Boolean` -
      # this shouldn't overwrite the more-specific type that we saw in the second fragment
      ...validateGlobalVariablesSharedFragment_user
    }
  }
}

fragment validateGlobalVariablesSharedFragment_user on User {
  firstName(if: $condition)
}

fragment validateGlobalVariablesSharedFragment_nonNull on User {
  # ERROR: nullable values flows into non-nullable arg
  ... @include(if: $condition) {
    lastName
  }
}
==================================== ERROR ====================================
âœ–ï¸Ž Variable was defined as type 'Boolean' but used where a variable of type 'Boolean!' is expected.

  validate-global-variables-shared-fragment.invalid.graphql:2:50
    1 â”‚ # expected-to-throw
    2 â”‚ query validateGlobalVariablesSharedFragmentQuery($condition: Boolean) {
      â”‚ [31m                                                 ^^^^^^^^^^[0m
[1m    3 â”‚ [0m  me {

[31m  â„¹ï¸Ž Variable is used as 'Boolean!'[0m

  [4mvalidate-global-variables-shared-fragment.invalid.graphql[0m[2m:24:20[0m
[1m   23 â”‚ [0m  # ERROR: nullable values flows into non-nullable arg
[1m   24 â”‚ [0m  ... @include(if: [31m$[0m[31mc[0m[31mo[0m[31mn[0m[31md[0m[31mi[0m[31mt[0m[31mi[0m[31mo[0m[31mn[0m) {
      â”‚ [31m                   ^^^^^^^^^^[0m
[1m   25 â”‚ [0m    lastName
