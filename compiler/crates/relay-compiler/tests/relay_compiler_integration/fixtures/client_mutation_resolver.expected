==================================== INPUT ====================================
//- foo.js
/**
 * @RelayResolver Mutation.foo_mutation: Boolean
 */

//- bar.js
graphql`mutation barMutation {
   foo_mutation
}`

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql",
   "eagerEsModules": true,
   "featureFlags": {
      "enable_relay_resolver_transform": true,
      "enable_relay_resolver_mutations": true
   }
}

//- schema.graphql

type Mutation
==================================== OUTPUT ===================================
//- __generated__/barMutation.graphql.js
/**
 * <auto-generated> SignedSource<<7f1de50339842bab9cecc72c6fbc076f>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, Mutation } from 'relay-runtime';
import {foo_mutation as mutationFooMutationResolverType} from "../foo.js";
// Type assertion validating that `mutationFooMutationResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(mutationFooMutationResolverType: () => ?boolean);
export type barMutation$variables = {||};
export type barMutation$data = {|
  +foo_mutation: ?boolean,
|};
export type barMutation = {|
  response: barMutation$data,
  variables: barMutation$variables,
|};
*/

import {foo_mutation as mutationFooMutationResolver} from './../foo';

var node/*: ClientRequest*/ = {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "barMutation",
    "selections": [
      {
        "kind": "ClientExtension",
        "selections": [
          {
            "alias": null,
            "args": null,
            "fragment": null,
            "kind": "RelayResolver",
            "name": "foo_mutation",
            "resolverModule": mutationFooMutationResolver,
            "path": "foo_mutation"
          }
        ]
      }
    ],
    "type": "Mutation",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "barMutation",
    "selections": [
      {
        "kind": "ClientExtension",
        "selections": [
          {
            "name": "foo_mutation",
            "args": null,
            "fragment": null,
            "kind": "RelayResolver",
            "storageKey": null,
            "isOutputType": true
          }
        ]
      }
    ]
  },
  "params": {
    "cacheID": "b7409af7b3a13247f776ad3f9192c84b",
    "id": null,
    "metadata": {},
    "name": "barMutation",
    "operationKind": "mutation",
    "text": null
  }
};

(node/*: any*/).hash = "1f3610a117a92bb877caf826f77fae63";

export default ((node/*: any*/)/*: Mutation<
  barMutation$variables,
  barMutation$data,
>*/);
