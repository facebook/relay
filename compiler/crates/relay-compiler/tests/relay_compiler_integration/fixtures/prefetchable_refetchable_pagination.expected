==================================== INPUT ====================================
//- foo.js
graphql`
  fragment foo on Viewer @refetchable(queryName: "RefetchableFragmentQuery")  {
        posts(first: $count, after: $cursor) @connection(key:"refetch_posts", prefetchable_pagination: true) {
            edges{
                node {
                    title
                }
            }
        }
  }`;

graphql`
  query fooQuery($count: Int, $cursor: String) {
   me {
      ...foo
   }
  }
`

//- relay.config.json
{
   "language": "flow",
   "jsModuleFormat": "haste",
   "schema": "./schema.graphql"
}

//- schema.graphql
type Query {
   me: Viewer
   viewer: Viewer
}

type Viewer {
   posts(first: Int, after: String): PostsConnection
}

type PostsConnection {
  count: Int
  edges: [PostEdge]
  pageInfo: PageInfo
}

type PostEdge {
  cursor: String
  node: Page
}

type PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  endCursor: String
  startCursor: String
}

type Page {
    title: String
    id: ID
}
==================================== OUTPUT ===================================
//- __generated__/RefetchableFragmentQuery.graphql.js
/**
 * <auto-generated> SignedSource<<19c135fed3c2860b79d3e6208b163e1a>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ConcreteRequest, Query } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
import type { foo$fragmentType } from "foo.graphql";
export type RefetchableFragmentQuery$variables = {|
  count?: ?number,
  cursor?: ?string,
|};
export type RefetchableFragmentQuery$data = {|
  +viewer: ?{|
    +$fragmentSpreads: foo$fragmentType,
  |},
|};
export type RefetchableFragmentQuery = {|
  response: RefetchableFragmentQuery$data,
  variables: RefetchableFragmentQuery$variables,
|};
*/

var node/*: ConcreteRequest*/ = (function(){
var v0 = [
  {
    "defaultValue": null,
    "kind": "LocalArgument",
    "name": "count"
  },
  {
    "defaultValue": null,
    "kind": "LocalArgument",
    "name": "cursor"
  }
],
v1 = [
  {
    "kind": "Variable",
    "name": "after",
    "variableName": "cursor"
  },
  {
    "kind": "Variable",
    "name": "first",
    "variableName": "count"
  }
];
return {
  "fragment": {
    "argumentDefinitions": (v0/*: any*/),
    "kind": "Fragment",
    "metadata": null,
    "name": "RefetchableFragmentQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "Viewer",
        "kind": "LinkedField",
        "name": "viewer",
        "plural": false,
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "foo"
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": (v0/*: any*/),
    "kind": "Operation",
    "name": "RefetchableFragmentQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "Viewer",
        "kind": "LinkedField",
        "name": "viewer",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": (v1/*: any*/),
            "concreteType": "PostsConnection",
            "kind": "LinkedField",
            "name": "posts",
            "plural": false,
            "selections": [
              {
                "alias": null,
                "args": null,
                "concreteType": "PostEdge",
                "kind": "LinkedField",
                "name": "edges",
                "plural": true,
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "concreteType": "Page",
                    "kind": "LinkedField",
                    "name": "node",
                    "plural": false,
                    "selections": [
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null
                      },
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null
                      },
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "__typename",
                        "storageKey": null
                      }
                    ],
                    "storageKey": null
                  },
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "cursor",
                    "storageKey": null
                  }
                ],
                "storageKey": null
              },
              {
                "alias": null,
                "args": null,
                "concreteType": "PageInfo",
                "kind": "LinkedField",
                "name": "pageInfo",
                "plural": false,
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "endCursor",
                    "storageKey": null
                  },
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "hasNextPage",
                    "storageKey": null
                  }
                ],
                "storageKey": null
              }
            ],
            "storageKey": null
          },
          {
            "alias": null,
            "args": (v1/*: any*/),
            "filters": null,
            "handle": "connection",
            "key": "refetch_posts",
            "kind": "LinkedHandle",
            "name": "posts"
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "cacheID": "7136bfbd09958dee2f5494d42f81da6a",
    "id": null,
    "metadata": {},
    "name": "RefetchableFragmentQuery",
    "operationKind": "query",
    "text": "query RefetchableFragmentQuery(\n  $count: Int\n  $cursor: String\n) {\n  viewer {\n    ...foo\n  }\n}\n\nfragment foo on Viewer {\n  posts(first: $count, after: $cursor) {\n    edges {\n      ...foo__edges\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment foo__edges on PostEdge {\n  node {\n    title\n    id\n    __typename\n  }\n  cursor\n}\n"
  }
};
})();

(node/*: any*/).hash = "dfac7950191066a5d1e0d99a67f503b7";

module.exports = ((node/*: any*/)/*: Query<
  RefetchableFragmentQuery$variables,
  RefetchableFragmentQuery$data,
>*/);

//- __generated__/foo.graphql.js
/**
 * <auto-generated> SignedSource<<3963af2dff879eeff47ec478ec74e048>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ReaderFragment, PrefetchableRefetchableFragment } from 'relay-runtime';
import type { foo__edges$fragmentType } from "foo__edges.graphql";
import type { FragmentType } from "relay-runtime";
declare export opaque type foo$fragmentType: FragmentType;
import type { RefetchableFragmentQuery$variables } from "RefetchableFragmentQuery.graphql";
import type { foo__edges$data } from "foo__edges.graphql";
export type foo$data = {|
  +posts: ?{|
    +edges: ?$ReadOnlyArray<?{|
      +$fragmentSpreads: foo__edges$fragmentType,
    |}>,
    +pageInfo: ?{|
      +endCursor: ?string,
      +hasNextPage: ?boolean,
    |},
  |},
  +$fragmentType: foo$fragmentType,
|};
export type foo$key = {
  +$data?: foo$data,
  +$fragmentSpreads: foo$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = (function(){
var v0 = [
  "posts"
];
return {
  "argumentDefinitions": [
    {
      "kind": "RootArgument",
      "name": "count"
    },
    {
      "kind": "RootArgument",
      "name": "cursor"
    }
  ],
  "kind": "Fragment",
  "metadata": {
    "connection": [
      {
        "count": "count",
        "cursor": "cursor",
        "direction": "forward",
        "path": (v0/*: any*/)
      }
    ],
    "refetch": {
      "connection": {
        "forward": {
          "count": "count",
          "cursor": "cursor"
        },
        "backward": null,
        "path": (v0/*: any*/)
      },
      "fragmentPathInResult": [
        "viewer"
      ],
      "operation": require('RefetchableFragmentQuery.graphql'),
      "edgesFragment": require('foo__edges.graphql')
    }
  },
  "name": "foo",
  "selections": [
    {
      "alias": "posts",
      "args": null,
      "concreteType": "PostsConnection",
      "kind": "LinkedField",
      "name": "__refetch_posts_connection",
      "plural": false,
      "selections": [
        {
          "alias": null,
          "args": null,
          "concreteType": "PostEdge",
          "kind": "LinkedField",
          "name": "edges",
          "plural": true,
          "selections": [
            {
              "args": null,
              "kind": "FragmentSpread",
              "name": "foo__edges"
            }
          ],
          "storageKey": null
        },
        {
          "alias": null,
          "args": null,
          "concreteType": "PageInfo",
          "kind": "LinkedField",
          "name": "pageInfo",
          "plural": false,
          "selections": [
            {
              "alias": null,
              "args": null,
              "kind": "ScalarField",
              "name": "endCursor",
              "storageKey": null
            },
            {
              "alias": null,
              "args": null,
              "kind": "ScalarField",
              "name": "hasNextPage",
              "storageKey": null
            }
          ],
          "storageKey": null
        }
      ],
      "storageKey": null
    }
  ],
  "type": "Viewer",
  "abstractKey": null
};
})();

(node/*: any*/).hash = "dfac7950191066a5d1e0d99a67f503b7";

module.exports = ((node/*: any*/)/*: PrefetchableRefetchableFragment<
  foo$fragmentType,
  foo$data,
  foo__edges$data,
  RefetchableFragmentQuery$variables,
>*/);

//- __generated__/fooQuery.graphql.js
/**
 * <auto-generated> SignedSource<<18e66ec469beae13e529e6c78e5c3e04>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ConcreteRequest, Query } from 'relay-runtime';
import type { foo$fragmentType } from "foo.graphql";
export type fooQuery$variables = {|
  count?: ?number,
  cursor?: ?string,
|};
export type fooQuery$data = {|
  +me: ?{|
    +$fragmentSpreads: foo$fragmentType,
  |},
|};
export type fooQuery = {|
  response: fooQuery$data,
  variables: fooQuery$variables,
|};
*/

var node/*: ConcreteRequest*/ = (function(){
var v0 = [
  {
    "defaultValue": null,
    "kind": "LocalArgument",
    "name": "count"
  },
  {
    "defaultValue": null,
    "kind": "LocalArgument",
    "name": "cursor"
  }
],
v1 = [
  {
    "kind": "Variable",
    "name": "after",
    "variableName": "cursor"
  },
  {
    "kind": "Variable",
    "name": "first",
    "variableName": "count"
  }
];
return {
  "fragment": {
    "argumentDefinitions": (v0/*: any*/),
    "kind": "Fragment",
    "metadata": null,
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "Viewer",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "args": null,
            "kind": "FragmentSpread",
            "name": "foo"
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": (v0/*: any*/),
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "Viewer",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": (v1/*: any*/),
            "concreteType": "PostsConnection",
            "kind": "LinkedField",
            "name": "posts",
            "plural": false,
            "selections": [
              {
                "alias": null,
                "args": null,
                "concreteType": "PostEdge",
                "kind": "LinkedField",
                "name": "edges",
                "plural": true,
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "concreteType": "Page",
                    "kind": "LinkedField",
                    "name": "node",
                    "plural": false,
                    "selections": [
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "title",
                        "storageKey": null
                      },
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "id",
                        "storageKey": null
                      },
                      {
                        "alias": null,
                        "args": null,
                        "kind": "ScalarField",
                        "name": "__typename",
                        "storageKey": null
                      }
                    ],
                    "storageKey": null
                  },
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "cursor",
                    "storageKey": null
                  }
                ],
                "storageKey": null
              },
              {
                "alias": null,
                "args": null,
                "concreteType": "PageInfo",
                "kind": "LinkedField",
                "name": "pageInfo",
                "plural": false,
                "selections": [
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "endCursor",
                    "storageKey": null
                  },
                  {
                    "alias": null,
                    "args": null,
                    "kind": "ScalarField",
                    "name": "hasNextPage",
                    "storageKey": null
                  }
                ],
                "storageKey": null
              }
            ],
            "storageKey": null
          },
          {
            "alias": null,
            "args": (v1/*: any*/),
            "filters": null,
            "handle": "connection",
            "key": "refetch_posts",
            "kind": "LinkedHandle",
            "name": "posts"
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "cacheID": "b9121ed3e6ec5e47846fd0f9a078457a",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": "query fooQuery(\n  $count: Int\n  $cursor: String\n) {\n  me {\n    ...foo\n  }\n}\n\nfragment foo on Viewer {\n  posts(first: $count, after: $cursor) {\n    edges {\n      ...foo__edges\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment foo__edges on PostEdge {\n  node {\n    title\n    id\n    __typename\n  }\n  cursor\n}\n"
  }
};
})();

(node/*: any*/).hash = "5b2116a3cb677e65d08c3df8b486f670";

module.exports = ((node/*: any*/)/*: Query<
  fooQuery$variables,
  fooQuery$data,
>*/);

//- __generated__/foo__edges.graphql.js
/**
 * <auto-generated> SignedSource<<f04ea8a96006c41742d4348f83929820>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type foo__edges$fragmentType: FragmentType;
export type foo__edges$data = $ReadOnlyArray<{|
  +cursor: ?string,
  +node: ?{|
    +__typename: "Page",
    +title: ?string,
  |},
  +$fragmentType: foo__edges$fragmentType,
|}>;
export type foo__edges$key = $ReadOnlyArray<{
  +$data?: foo__edges$data,
  +$fragmentSpreads: foo__edges$fragmentType,
  ...
}>;
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": {
    "plural": true
  },
  "name": "foo__edges",
  "selections": [
    {
      "alias": null,
      "args": null,
      "concreteType": "Page",
      "kind": "LinkedField",
      "name": "node",
      "plural": false,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "title",
          "storageKey": null
        },
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "__typename",
          "storageKey": null
        }
      ],
      "storageKey": null
    },
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "cursor",
      "storageKey": null
    }
  ],
  "type": "PostEdge",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  foo__edges$fragmentType,
  foo__edges$data,
>*/);
