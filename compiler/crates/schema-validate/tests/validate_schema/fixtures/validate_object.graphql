directive @fetchable(field_name: String) on OBJECT

interface Hominid {
  pet: Canine
  friends(location: Location): [Hominid]
}

interface Canine {
  owner: Human
  name: String
}

type Pet implements Canine @fetchable(field_name: "id") {
  id: ID
  owner: Human
  type: PetType
  fur: FurType
}

type OtherPet @fetchable(field_name: "id") {
  id: ID
  owner: Human
  type: PetType
  fur: FurType
}

type Human implements Hominid @fetchable(field_name: "id") {
  id: ID
  pet: OtherPet
  friends(location: Location, radius: Int!, Country: String): [Human]
  location: Location
  location: ID
  other_friends(location: Location, location: Location): [Human]
}

type Ape implements Hominid {
  pet: Canine
  friends: [Hominid] # Missing argument
}

type Chimp implements Hominid {
  pet: Canine
  friends(location: String): [Hominid] # Missing argument
}

# Implement Hominid twice
type Bonobo implements Hominid & Hominid {
  pet: Canine
  friends(location: Location): [Hominid]
}

type Query {
  fetch__Human(id: ID!): Human
  user: Human
}

enum PetType {
  DOG
  CAT
}

input Location {
  lat: String
  lon: String
}

union FurType = Hair | Fur

union EmptyFurType

union InvalidFurType = Hair | Fur

type Hair {
  color: String
}

type Fur {
  color: String
}
