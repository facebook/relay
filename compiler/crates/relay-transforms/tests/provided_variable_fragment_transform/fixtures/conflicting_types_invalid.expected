==================================== INPUT ====================================
# expected-to-throw
fragment FragmentA on User
  @argumentDefinitions(
    var1: {type: "[Int]", provider: "varProviderA"}
    var2: {type: "[Int]!", provider: "varProviderA"}
) {
    picture1: profilePicture(size: $var1) {
        uri
    }
    picture2: profilePicture(size: $var2) {
        uri
    }
}

fragment TestAOther on User
  @argumentDefinitions(
    var_other: {type: "[Int]!", provider: "varProviderA"}
) {
    profilePicture(size: $var_other) {
        uri
    }
}

fragment FragmentB on User
  @argumentDefinitions(
    var1: {type: "[Int]", provider: "varProviderB"}
    var2: {type: "Int", provider: "varProviderB"}
) {
    profilePicture(size: $var1) {
        uri
    }
    friends(first: $var2) {
        count
    }
}

fragment FragmentC on User
  @argumentDefinitions(
    var1: {type: "Float", provider: "varProviderC"}
    var2: {type: "Int", provider: "varProviderC"}
) {
    profile_picture(scale: $var1) {
        uri
    }
    friends(first: $var2) {
        count
    }
}

fragment FragmentD on User
  @argumentDefinitions(
    var1: {type: "Float", provider: "varProviderD"}
    var2: {type: "Float!", provider: "varProviderD"}
) {
    picture1: profile_picture(scale: $var1) {
        uri
    }
    picture2: profile_picture(scale: $var2) {
        uri
    }
}
==================================== ERROR ====================================
[31mâœ–ï¸Ž All provided variables using module 'varProviderA' must declare the same type. Expected '[Int]!' but found '[Int]'[0m

  [4mconflicting_types_invalid.graphql[0m[2m:4:5[0m
[1m    3 â”‚ [0m  @argumentDefinitions(
[1m    4 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]", provider: "varProviderA"}
      â”‚ [31m    ^^^^[0m
[1m    5 â”‚ [0m    var2: {type: "[Int]!", provider: "varProviderA"}


[31mâœ–ï¸Ž All provided variables using module 'varProviderB' must declare the same type. Expected 'Int' but found '[Int]'[0m

  [4mconflicting_types_invalid.graphql[0m[2m:26:5[0m
[1m   25 â”‚ [0m  @argumentDefinitions(
[1m   26 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]", provider: "varProviderB"}
      â”‚ [31m    ^^^^[0m
[1m   27 â”‚ [0m    var2: {type: "Int", provider: "varProviderB"}


[31mâœ–ï¸Ž All provided variables using module 'varProviderC' must declare the same type. Expected 'Float' but found 'Int'[0m

  [4mconflicting_types_invalid.graphql[0m[2m:40:5[0m
[1m   39 â”‚ [0m    var1: {type: "Float", provider: "varProviderC"}
[1m   40 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m2[0m: {type: "Int", provider: "varProviderC"}
      â”‚ [31m    ^^^^[0m
[1m   41 â”‚ [0m) {


âœ–ï¸Ž All provided variables using module 'varProviderD' must declare the same type. Expected 'Float' but found 'Float!'

  conflicting_types_invalid.graphql:53:5
   52 â”‚     var1: {type: "Float", provider: "varProviderD"}
[1m   53 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m2[0m: {type: "Float!", provider: "varProviderD"}
      â”‚ [31m    ^^^^[0m
[1m   54 â”‚ [0m) {
