==================================== INPUT ====================================
# expected-to-throw
query NodeQuery($id: ID!, $first: Int, $after: ID) {
  node(id: $id) {
    id
    ... on User {
      badConnection(first: $first, after: $after) @connection(key: "NodeQuery_badConnection") {
        edges {
          cursor
          node {
            id
          }
        }
      }
    }
  }
}

# %extensions%
extend type User {
  badConnection(after: ID, before: ID, first: Int, last: Int): BadConnection
}

type BadConnection {
  count: Int
  edges: BadConnectionEdge
  pageInfo: BadConnectionPageInfo
}

type BadConnectionEdge {
  cursor: String
  node: BadConnectionNode
}

type BadConnectionNode {
  id: ID
}

type BadConnectionPageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  endCursor: String
  startCursor: String
}
==================================== ERROR ====================================
âœ–ï¸Ž @connection used on invalid field 'badConnection'. Expected the field type 'BadConnection' to expose a 'edges' field that returns a list of objects.

  connection-invalid-edges-field.invalid.graphql:6:7
    5 â”‚     ... on User {
    6 â”‚       bad[31mC[0m[31mo[0m[31mn[0m[31mn[0m[31me[0m[31mc[0m[31mt[0m[31mi[0m[31mo[0m[31mn[0m(first: $first, after: $after) @connection(key: "NodeQuery_badConnection") {
      â”‚ [31m      ^^^^^^^^^^^^^[0m
[1m    7 â”‚ [0m        edges {

[31m  â„¹ï¸Ž invalid field type[0m

  [4mconnection-invalid-edges-field.invalid.graphql[0m[2m:7:9[0m
[1m    6 â”‚ [0m      badConnection(first: $first, after: $after) @connection(key: "NodeQuery_badConnection") {
[1m    7 â”‚ [0m        [31me[0m[31md[0m[31mg[0m[31me[0m[31ms[0m {
      â”‚ [31m        ^^^^^[0m
[1m    8 â”‚ [0m          cursor
