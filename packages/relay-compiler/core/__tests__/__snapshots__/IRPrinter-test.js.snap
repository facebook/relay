// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IRPrinter matches expected output: basic_arg_defs.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User
  @argumentDefinitions(
    after: {type: "ID"}
    first: {type: "Int", defaultValue: 5}
    size: {type: "[Int]"}
  ) {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User @argumentDefinitions(
  after: {type: "ID"}
  first: {type: "Int", defaultValue: 5}
  size: {type: "[Int]"}
) {
  id
}

`;

exports[`IRPrinter matches expected output: basic_directives.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query MyQuery($id: ID, $cond: Boolean!) {
  my_alias: node(id: $id) {
    id
    ... on User @include(if: $cond) {
      name
    }
    ...UserFragment @include(if: $cond)
  }
}

fragment UserFragment on User {
  id
  name @include(if: $cond)
  otherName: name @customDirective(level: 3) @skip(if: $cond)
  address @skip(if: true) {
    city
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query MyQuery(
  $id: ID
  $cond: Boolean!
) {
  my_alias: node(id: $id) {
    id
    ... on User @include(if: $cond) {
      name
    }
    ...UserFragment @include(if: $cond)
  }
}

fragment UserFragment on User {
  id
  name @include(if: $cond)
  otherName: name @skip(if: $cond) @customDirective(level: 3)
  address @skip(if: true) {
    city
  }
}

`;

exports[`IRPrinter matches expected output: basic_fragment.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment MyFragment on Query {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: $count) {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment MyFragment on Query {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: $count) {
        count
      }
    }
  }
}

`;

exports[`IRPrinter matches expected output: basic_inline_fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment MyFragment on Query {
  my_alias: node(id: $id) {
    id
    ... {
      id
    }
    ... on User {
      name
      likers(first: $count) {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment MyFragment on Query {
  my_alias: node(id: $id) {
    id
    ... on Node {
      id
    }
    ... on User {
      name
      likers(first: $count) {
        count
      }
    }
  }
}

`;

exports[`IRPrinter matches expected output: basic_list_object_values.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User {
  id
  checkins(environments: [WEB]) {
    query
  }
  nakedEnum: checkins(environments: WEB) {
    query
  }
  multipleEnum: checkins(environments: [WEB, MOBILE]) {
    query
  }
  friends(after: $after, first: $first, traits: [HELPFUL]) {
    count
  }
  secondFriends: friends(first: 10) {
    count
  }
  name @include(if: $cond)
  otherName: name @customDirective(level: 3)
  thumbnail: profilePicture2(
    size: 32
    cropPosition: CENTER
    fileExtension: PNG
    options: {newName: null}
  ) {
    height
    width
    src: uri
  }
  profilePicture(size: $size) @include(if: $cond) @skip(if: $foo) {
    height
    width
    src: uri
  }
  storySearch(query: {type: DIRECTED}) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User {
  id
  checkins(environments: [WEB]) {
    query
  }
  nakedEnum: checkins(environments: WEB) {
    query
  }
  multipleEnum: checkins(environments: [WEB, MOBILE]) {
    query
  }
  friends(after: $after, first: $first, traits: [HELPFUL]) {
    count
  }
  secondFriends: friends(first: 10) {
    count
  }
  name @include(if: $cond)
  otherName: name @customDirective(level: 3)
  thumbnail: profilePicture2(size: 32, cropPosition: CENTER, fileExtension: PNG, options: {newName: null}) {
    height
    width
    src: uri
  }
  profilePicture(size: $size) @include(if: $cond) @skip(if: $foo) {
    height
    width
    src: uri
  }
  storySearch(query: {type: DIRECTED}) {
    id
  }
}

`;

exports[`IRPrinter matches expected output: basic_query.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query MyQuery($id: ID) {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: 5) {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query MyQuery(
  $id: ID
) {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: 5) {
        count
      }
    }
  }
}

`;

exports[`IRPrinter matches expected output: basic_var_defs.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query MyQuery($id: ID, $count: Int! = 5, $envs: [Environment!]! = [WEB]) {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: $count) {
        count
      }
      checkins(environments: $envs) {
        query
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query MyQuery(
  $id: ID
  $count: Int! = 5
  $envs: [Environment!]! = [WEB]
) {
  my_alias: node(id: $id) {
    id
    ... on User {
      name
      likers(first: $count) {
        count
      }
      checkins(environments: $envs) {
        query
      }
    }
  }
}

`;

exports[`IRPrinter matches expected output: kitchen-sink.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query NodeQuery(
  $cond: Boolean! = false
  $id: ID!
  $size: [Int] = [32]
  $query: CheckinSearchInput!
) {
  node(id: $id) {
    id
    ... on User @include(if: $cond) {
      name
    }
    ...UserFragment @include(if: $cond) @arguments(size: $size)
  }
  checkinSearchQuery(query: $query) {
    query
  }
}

fragment UserFragment on User
  @argumentDefinitions(
    after: {type: "ID"}
    first: {type: "Int", defaultValue: 5}
    size: {type: "[Int]"}
    storyType: {type: "StoryType", defaultValue: DIRECTED}
    storyType_invalid_string: {type: "StoryType", defaultValue: "DIRECTED"}
    storyType_invalid_lowercase: {type: "StoryType", defaultValue: directed}
  ) {
  id
  __typename
  checkins(environments: [WEB]) {
    __typename
  }
  nakedEnum: checkins(environments: WEB) {
    __typename
  }
  friends(after: $after, first: $first, traits: [HELPFUL]) {
    count
  }
  secondFriends: friends(first: 10) {
    count
  }
  name @include(if: $cond)
  otherName: name @customDirective(level: 3)
  thumbnail: profilePicture2(
    size: 32
    cropPosition: CENTER
    fileExtension: PNG
    additionalParameters: {filter: "Boston"}
    options: {newName: null}
  ) {
    height
    width
    src: uri
  }
  profilePicture(size: $size) @include(if: $cond) @skip(if: $foo) {
    height
    width
    src: uri
  }
  storySearch(query: {type: DIRECTED}) {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query NodeQuery(
  $cond: Boolean! = false
  $id: ID!
  $size: [Int] = [32]
  $query: CheckinSearchInput!
) {
  node(id: $id) {
    id
    ... on User @include(if: $cond) {
      name
    }
    ...UserFragment @include(if: $cond) @arguments(size: $size)
  }
  checkinSearchQuery(query: $query) {
    query
  }
}

fragment UserFragment on User @argumentDefinitions(
  after: {type: "ID"}
  first: {type: "Int", defaultValue: 5}
  size: {type: "[Int]"}
  storyType: {type: "StoryType", defaultValue: DIRECTED}
  storyType_invalid_string: {type: "StoryType", defaultValue: DIRECTED}
  storyType_invalid_lowercase: {type: "StoryType", defaultValue: directed}
) {
  id
  __typename
  checkins(environments: [WEB]) {
    __typename
  }
  nakedEnum: checkins(environments: WEB) {
    __typename
  }
  friends(after: $after, first: $first, traits: [HELPFUL]) {
    count
  }
  secondFriends: friends(first: 10) {
    count
  }
  name @include(if: $cond)
  otherName: name @customDirective(level: 3)
  thumbnail: profilePicture2(size: 32, cropPosition: CENTER, fileExtension: PNG, additionalParameters: {"filter":"Boston"}, options: {newName: null}) {
    height
    width
    src: uri
  }
  profilePicture(size: $size) @include(if: $cond) @skip(if: $foo) {
    height
    width
    src: uri
  }
  storySearch(query: {type: DIRECTED}) {
    id
  }
}

`;

exports[`IRPrinter matches expected output: lowercase-enum-fragment-arg.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User
  @argumentDefinitions(
    environments: {type: "[Environment!]!", defaultValue: [web]}
  ) {
  checkins(environments: $environments) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User @argumentDefinitions(
  environments: {type: "[Environment!]!", defaultValue: [web]}
) {
  checkins(environments: $environments) {
    __typename
  }
}

`;

exports[`IRPrinter matches expected output: single-value-array-of-objects.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query SingleValueArrayQuery {
  route(waypoints: {lat: "123", lon: "456"}) {
    steps {
      lat
      lon
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query SingleValueArrayQuery {
  route(waypoints: {lat: "123", lon: "456"}) {
    steps {
      lat
      lon
    }
  }
}

`;

exports[`IRPrinter matches expected output: string-enum-arg.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment UserFragment on User {
  checkins(environments: "WEB") {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected a value matching type 'Environment!'. Possible values: WEB or MOBILE?'

GraphQL request:3:26
2 | fragment UserFragment on User {
3 |   checkins(environments: "WEB") {
  |                          ^
4 |     __typename
`;

exports[`IRPrinter matches expected output: string-enum-fragment-arg.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User
  @argumentDefinitions(
    environments: {type: "[Environment!]!", defaultValue: [WEB]}
  ) {
  checkins(environments: $environments) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User @argumentDefinitions(
  environments: {type: "[Environment!]!", defaultValue: [WEB]}
) {
  checkins(environments: $environments) {
    __typename
  }
}

`;

exports[`IRPrinter matches expected output: string-enum-fragment-arg-with-complex-input.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User
  @argumentDefinitions(
    environments: {type: "Environment", defaultValue: "WEB"}
  ) {
  checkins(environments: [$environments]) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User @argumentDefinitions(
  environments: {type: "Environment", defaultValue: WEB}
) {
  checkins(environments: [$environments]) {
    __typename
  }
}

`;

exports[`IRPrinter matches expected output: unknown-enum-arg.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment UserFragment on User {
  checkins(environments: UNKNOWN_ENUM_VALUE) {
    __typename
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected a value matching type 'Environment!'. Possible values: WEB or MOBILE?'

GraphQL request:3:26
2 | fragment UserFragment on User {
3 |   checkins(environments: UNKNOWN_ENUM_VALUE) {
  |                          ^
4 |     __typename
`;
