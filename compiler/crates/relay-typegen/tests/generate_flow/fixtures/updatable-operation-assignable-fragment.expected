==================================== INPUT ====================================
query UpdatableQuery @updatable {
  viewer {
    ...Assignable_viewer
  }
}

fragment Assignable_viewer on Viewer @assignable {
  __typename
}
==================================== OUTPUT ===================================
import type { Assignable_viewer$fragmentType } from "Assignable_viewer.graphql";
export type UpdatableQuery$variables = {||};
export type UpdatableQuery$data = {|
  get viewer(): ?{||},
  set viewer(value: ?{
    +__typename: "Viewer",
    +__id: string,
    +$fragmentSpreads: Assignable_viewer$fragmentType,
    ...
  }): void,
|};
export type UpdatableQuery = {|
  response: UpdatableQuery$data,
  variables: UpdatableQuery$variables,
|};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type Assignable_viewer$fragmentType: FragmentType;
export type Assignable_viewer$data = {|
  +__typename: "Viewer",
  +$fragmentType: Assignable_viewer$fragmentType,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
  +$fragmentType: Assignable_viewer$fragmentType,
|};
export type Assignable_viewer$key = {
  +$data?: Assignable_viewer$data,
  +$fragmentSpreads: Assignable_viewer$fragmentType,
  ...
};
module.exports.validate = function validate(value/*: {
  +__typename: string,
  +__id: string,
  +$fragmentSpreads: Assignable_viewer$fragmentType,
  ...
}*/)/*: false | {
  +__typename: "Viewer",
  +__id: string,
  +$fragmentSpreads: Assignable_viewer$fragmentType,
  ...
}*/ {
  return value.__typename === 'Viewer' ? (value/*: any*/) : false;
};
