==================================== INPUT ====================================
# expected-to-throw

fragment Foo_user on User {
  poppy: pop_star_name {
    __typename
  }
}

fragment PopStarNameResolverFragment_name on User {
  name
  address {
    street
  }
  parents {
    lastName
  }
}

# %extensions%
type PopStarName {
  stage_name: IStageName
  also_a_stage_name: IStageName
}

interface IStageName {
  value: String
  client_type: ClientType
}

type Foo implements IStageName {
  value: String
  client_type: ClientType
}

type ClientType {
  stage_name: IStageName
}

extend type User {
  pop_star_name: PopStarName @relay_resolver(fragment_name: "PopStarNameResolverFragment_name", import_path: "PopStarNameResolver", has_output_type: true)
}
==================================== ERROR ====================================
[31mâœ–ï¸Ž @RelayResolver type recursion detected for the output type `IStageName`. This is not supported for `@outputType` resolvers. If you want to model a connection between two entities of the same GraphQL type, consider creating a new Relay Resolver with `@edgeTo` annotation.[0m

  [4moutput-type-with-client-interface-and-object-recursion.invalid.graphql[0m[2m:18:3[0m
[1m   17 â”‚ [0mtype ClientType {
   18 â”‚   stage_name: IStageName
      â”‚ [31m  ^^^^^^^^^^[0m
[1m   19 â”‚ [0m}


âœ–ï¸Ž @RelayResolver type recursion detected for the output type `IStageName`. This is not supported for `@outputType` resolvers. If you want to model a connection between two entities of the same GraphQL type, consider creating a new Relay Resolver with `@edgeTo` annotation.

  output-type-with-client-interface-and-object-recursion.invalid.graphql:18:3
   17 â”‚ type ClientType {
[1m   18 â”‚ [0m  [31ms[0m[31mt[0m[31ma[0m[31mg[0m[31me[0m[31m_[0m[31mn[0m[31ma[0m[31mm[0m[31me[0m: IStageName
      â”‚ [31m  ^^^^^^^^^^[0m
[1m   19 â”‚ [0m}
