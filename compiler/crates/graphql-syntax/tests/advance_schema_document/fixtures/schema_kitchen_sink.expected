==================================== INPUT ====================================
# source: https://github.com/graphql/graphql-js/blob/5d109ec32f60b593b721037cd2944d2c07420006/src/__fixtures__/schema-kitchen-sink.graphql

"""This is a description of the schema as a whole."""
schema {
  query: QueryType
  mutation: MutationType
}

"""
This is a description
of the `Foo` type.
"""
type Foo implements Bar & Baz & Two {
  "Description of the `one` field."
  one: Type
  """
  This is a description of the `two` field.
  """
  two(
    """
    This is a description of the `argument` argument.
    """
    argument: InputType!
  ): Type
  """This is a description of the `three` field."""
  three(argument: InputType, other: String): Int
  four(argument: String = "string"): String
  five(argument: [String] = ["string", "string"]): String
  six(argument: InputType = {key: "value"}): Type
  seven(argument: Int = null): Type
}

type AnnotatedObject @onObject(arg: "value") {
  annotatedField(arg: Type = "default" @onArgumentDefinition): Type @onField
}

type UndefinedType

extend type Foo {
  seven(argument: [String]): Type
}

extend type Foo @onType

interface Bar {
  one: Type
  four(argument: String = "string"): String
}

interface AnnotatedInterface @onInterface {
  annotatedField(arg: Type @onArgumentDefinition): Type @onField
}

interface UndefinedInterface

extend interface Bar implements Two {
  two(argument: InputType!): Type
}

extend interface Bar @onInterface

interface Baz implements Bar & Two {
  one: Type
  two(argument: InputType!): Type
  four(argument: String = "string"): String
}

union Feed =
  | Story
  | Article
  | Advert

union AnnotatedUnion @onUnion = A | B

union AnnotatedUnionTwo @onUnion = | A | B

union UndefinedUnion

extend union Feed = Photo | Video

extend union Feed @onUnion

scalar CustomScalar

scalar AnnotatedScalar @onScalar

extend scalar CustomScalar @onScalar

enum Site {
  """
  This is a description of the `DESKTOP` value
  """
  DESKTOP

  """This is a description of the `MOBILE` value"""
  MOBILE

  "This is a description of the `WEB` value"
  WEB
}

enum AnnotatedEnum @onEnum {
  ANNOTATED_VALUE @onEnumValue
  OTHER_VALUE
}

enum UndefinedEnum

extend enum Site {
  VR
}

extend enum Site @onEnum

input InputType {
  key: String!
  answer: Int = 42
}

input AnnotatedInput @onInputObject {
  annotatedField: Type @onInputFieldDefinition
}

input UndefinedInput

extend input InputType {
  other: Float = 1.23e4 @onInputFieldDefinition
}

extend input InputType @onInputObject

"""
This is a description of the `@skip` directive
"""
directive @skip(
  """This is a description of the `if` argument"""
  if: Boolean! @onArgumentDefinition
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @include(if: Boolean!)
  on FIELD
   | FRAGMENT_SPREAD
   | INLINE_FRAGMENT

directive @include2(if: Boolean!) on
  | FIELD
  | FRAGMENT_SPREAD
  | INLINE_FRAGMENT

directive @myRepeatableDir(name: String!) repeatable on
  | OBJECT
  | INTERFACE

extend schema @onSchema

extend schema @onSchema {
  subscription: SubscriptionType
}
==================================== OUTPUT ===================================
[
    "\"\"\"This is a description of the schema as a whole.\"\"\"\nschema {\n  query: QueryType\n  mutation: MutationType\n}\n\n",
    "\"\"\"\nThis is a description\nof the `Foo` type.\n\"\"\"\ntype Foo implements Bar & Baz & Two {\n  \"Description of the `one` field.\"\n  one: Type\n  \"\"\"\n  This is a description of the `two` field.\n  \"\"\"\n  two(\n    \"\"\"\n    This is a description of the `argument` argument.\n    \"\"\"\n    argument: InputType!\n  ): Type\n  \"\"\"This is a description of the `three` field.\"\"\"\n  three(argument: InputType, other: String): Int\n  four(argument: String = \"string\"): String\n  five(argument: [String] = [\"string\", \"string\"]): String\n  six(argument: InputType = {key: \"value\"}): Type\n  seven(argument: Int = null): Type\n}\n\n",
    "type AnnotatedObject @onObject(arg: \"value\") {\n  annotatedField(arg: Type = \"default\" @onArgumentDefinition): Type @onField\n}\n\n",
    "type UndefinedType\n\n",
    "extend type Foo {\n  seven(argument: [String]): Type\n}\n\n",
    "extend type Foo @onType\n\n",
    "interface Bar {\n  one: Type\n  four(argument: String = \"string\"): String\n}\n\n",
    "interface AnnotatedInterface @onInterface {\n  annotatedField(arg: Type @onArgumentDefinition): Type @onField\n}\n\n",
    "interface UndefinedInterface\n\n",
    "extend interface Bar implements Two {\n  two(argument: InputType!): Type\n}\n\n",
    "extend interface Bar @onInterface\n\n",
    "interface Baz implements Bar & Two {\n  one: Type\n  two(argument: InputType!): Type\n  four(argument: String = \"string\"): String\n}\n\n",
    "union Feed =\n  | Story\n  | Article\n  | Advert\n\n",
    "union AnnotatedUnion @onUnion = A | B\n\n",
    "union AnnotatedUnionTwo @onUnion = | A | B\n\n",
    "union UndefinedUnion\n\n",
    "extend union Feed = Photo | Video\n\n",
    "extend union Feed @onUnion\n\n",
    "scalar CustomScalar\n\n",
    "scalar AnnotatedScalar @onScalar\n\n",
    "extend scalar CustomScalar @onScalar\n\n",
    "enum Site {\n  \"\"\"\n  This is a description of the `DESKTOP` value\n  \"\"\"\n  DESKTOP\n\n  \"\"\"This is a description of the `MOBILE` value\"\"\"\n  MOBILE\n\n  \"This is a description of the `WEB` value\"\n  WEB\n}\n\n",
    "enum AnnotatedEnum @onEnum {\n  ANNOTATED_VALUE @onEnumValue\n  OTHER_VALUE\n}\n\n",
    "enum UndefinedEnum\n\n",
    "extend enum Site {\n  VR\n}\n\n",
    "extend enum Site @onEnum\n\n",
    "input InputType {\n  key: String!\n  answer: Int = 42\n}\n\n",
    "input AnnotatedInput @onInputObject {\n  annotatedField: Type @onInputFieldDefinition\n}\n\n",
    "input UndefinedInput\n\n",
    "extend input InputType {\n  other: Float = 1.23e4 @onInputFieldDefinition\n}\n\n",
    "extend input InputType @onInputObject\n\n",
    "\"\"\"\nThis is a description of the `@skip` directive\n\"\"\"\ndirective @skip(\n  \"\"\"This is a description of the `if` argument\"\"\"\n  if: Boolean! @onArgumentDefinition\n) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n",
    "directive @include(if: Boolean!)\n  on FIELD\n   | FRAGMENT_SPREAD\n   | INLINE_FRAGMENT\n\n",
    "directive @include2(if: Boolean!) on\n  | FIELD\n  | FRAGMENT_SPREAD\n  | INLINE_FRAGMENT\n\n",
    "directive @myRepeatableDir(name: String!) repeatable on\n  | OBJECT\n  | INTERFACE\n\n",
    "extend schema @onSchema\n\n",
    "extend schema @onSchema {\n  subscription: SubscriptionType\n}\n",
]
