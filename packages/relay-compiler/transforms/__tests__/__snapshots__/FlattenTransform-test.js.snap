// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlattenTransform matches expected output: flatten-same-alias-different-args.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    ... on User {
      ... on User {
        friendsAlias: friends(first: 5) {
          count
        }
      }
      ... on User {
        friendsAlias: friends(first: 10) {
          edges {
            node {
              id
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected all fields on the same parent with the name or alias 'friendsAlias' to have the same name and arguments.

Source: GraphQL request (12:9)
11:       ... on User {
12:         friendsAlias: friends(first: 10) {
            ^
13:           edges {

Source: GraphQL request (7:9)
6:       ... on User {
7:         friendsAlias: friends(first: 5) {
           ^
8:           count

`;

exports[`FlattenTransform matches expected output: flatten-same-name-different-args.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    ... on User {
      ... on User {
        friends(first: 5) {
          count
        }
      }
      ... on User {
        friends(first: 10) {
          edges {
            node {
              id
            }
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected all fields on the same parent with the name or alias 'friends' to have the same name and arguments.

Source: GraphQL request (12:9)
11:       ... on User {
12:         friends(first: 10) {
            ^
13:           edges {

Source: GraphQL request (7:9)
6:       ... on User {
7:         friends(first: 5) {
           ^
8:           count

`;

exports[`FlattenTransform matches expected output: flattens-inline-inside-condition.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment UserFragment on User {
  ... @include(if: $conditional) {
    ...NestedFragment
  }
  name
  ... @skip(if: $conditional) {
    ...NestedFragment2
  }
}

fragment NestedFragment on User {
  name
}

fragment NestedFragment2 on User {
  name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment UserFragment on User {
  ...NestedFragment @include(if: $conditional)
  name
  ...NestedFragment2 @skip(if: $conditional)
}

fragment NestedFragment on User {
  name
}

fragment NestedFragment2 on User {
  name
}

`;

exports[`FlattenTransform matches expected output: flattens-inside-plural.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  flattened: usernames(names: []) {
    ... on Actor {
      name
    }
  }
  notFlattened: usernames(names: []) {
    ... on User {
      lastName
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  flattened: usernames(names: []) {
    name
  }
  notFlattened: usernames(names: []) {
    ... on User {
      lastName
    }
  }
}

`;

exports[`FlattenTransform matches expected output: flattens-matching-fragment-types.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    __typename
    type: __typename
    ... on Node {
      id
      __typename
      typeName: __typename
    }
    ... on User {
      ... on Node {
        id
      }
      firstName
      surname: lastName
      friends(first: 10) {
        edges {
          node {
            id
            firstName
          }
        }
      }
      ... on User {
        firstName
        lastName
        friends(first: 10) {
          edges {
            cursor
            node {
              id
              lastName
            }
          }
        }
      }
      firstName @customDirective(level: 1)
      lastName @customDirective(level: 3)
      ... on User {
        firstName @customDirective(level: 2)
        lastName @customDirective(level: 3)
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    __typename
    type: __typename
    typeName: __typename
    ... on User {
      ... on Node {
        id
      }
      firstName
      surname: lastName
      friends(first: 10) {
        edges {
          node {
            id
            firstName
            lastName
          }
          cursor
        }
      }
      lastName
      firstName @customDirective(level: 1)
      lastName @customDirective(level: 3)
      firstName @customDirective(level: 2)
    }
  }
}

`;

exports[`FlattenTransform matches expected output: linked-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10) @__clientField(handle: "clientFriends") {
    count
  }
  ... on User {
    # should be de-duped
    friends(first: 10) @__clientField(handle: "clientFriends") {
      count
    }
    ... on User {
      friends(first: 10) @__clientField(handle: "recentFriends") {
        count
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment LinkedHandleField on User {
  friends(first: 10) @__clientField(handle: "clientFriends") @__clientField(handle: "recentFriends") {
    count
  }
}

`;

exports[`FlattenTransform matches expected output: match-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
  plainNameRenderer: nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
  }
  plainNameRenderer: nameRenderer(supported: ["PlainUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.plainNameRenderer")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.plainNameRenderer")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`FlattenTransform matches expected output: match-field-overlap.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
  ... on User {
    # same alias and selections, should flatten together
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
    ... on PlainUserNameData {
      text # should be flattened
    }
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
    ... on MarkdownUserNameData {
      markup # should be flattened
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRenderer(supported: ["PlainUserNameRenderer", "MarkdownUserNameRenderer"]) {
    ... on PlainUserNameRenderer {
      ...PlainUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "PlainUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
    ... on MarkdownUserNameRenderer {
      ...MarkdownUserNameRenderer_name
      __module_operation_NameRendererFragment: js(module: "MarkdownUserNameRenderer_name$normalization.graphql", id: "NameRendererFragment.nameRenderer")
      __module_component_NameRendererFragment: js(module: "MarkdownUserNameRenderer.react", id: "NameRendererFragment.nameRenderer")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

`;

exports[`FlattenTransform matches expected output: match-field-overlap.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
  ... on User {
    # conflicts with above: same alias but different types are matched
    nameRenderer @match {
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Expected all fields on the same parent with the name or alias 'nameRenderer' to have the same name and arguments.

Source: GraphQL request (11:5)
10:     # conflicts with above: same alias but different types are matched
11:     nameRenderer @match {
        ^
12:       ...MarkdownUserNameRenderer_name

Source: GraphQL request (4:3)
3:   id
4:   nameRenderer @match {
     ^
5:     ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")

`;

exports[`FlattenTransform matches expected output: match-field-overlap-different-react-modules.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
  ... on User {
    # conflicts with above: same alias but different module names
    nameRenderer @match {
      ...PlainUserNameRenderer_name
        @module(name: "OtherPlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "OtherMarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Found conflicting @module selections: use a unique alias on the parent fields.

Source: GraphQL request (13:9)
12:       ...PlainUserNameRenderer_name
13:         @module(name: "OtherPlainUserNameRenderer.react")
            ^
14:       ...MarkdownUserNameRenderer_name

Source: GraphQL request (5:35)
4:   nameRenderer @match {
5:     ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
                                     ^
6:     ...MarkdownUserNameRenderer_name

`;

exports[`FlattenTransform matches expected output: scalar-handle-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ScalarHandleField on User {
  name @__clientField(handle: "clientName")
  ... on User {
    # should be de-duped
    name @__clientField(handle: "clientName")
    ... on User {
      name @__clientField(handle: "otherClientName")
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment ScalarHandleField on User {
  name @__clientField(handle: "otherClientName") @__clientField(handle: "clientName")
}

`;
