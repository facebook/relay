// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SkipClientExtensionsTransform matches expected output: client-conditions.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  name @include(if: $shouldInclude)

  client_nickname @include(if: $shouldInclude)

  foo {
    ... on ClientNamed @include(if: $shouldInclude) {
      client_name
      client_name_2
    }
  }

  ... on Actor @include(if: $shouldInclude) {
    client_actor_field
    address {
      city
      client_street_address_field(arg: $arg) # nested client field
    }
  }
}

extend type User {
  client_nickname: String
  client_actor_field: String
  foo: ClientNamed
}

extend type StreetAddress {
  client_street_address_field(arg: String): String
}

extend interface Actor {
  client_actor_field: String
}

extend type Page {
  client_actor_field: String
}

interface ClientNamed {
  client_name: String
  client_name_2: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  name @include(if: $shouldInclude)
  ... on Actor @include(if: $shouldInclude) {
    address {
      city
    }
  }
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-fields-in-inline-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id

  ... on Actor {
    client_actor_field
    address {
      city
      client_street_address_field(arg: $arg) # nested client field
    }
  }
}

extend type StreetAddress {
  client_street_address_field(arg: String): String
}

extend type User {
  client_actor_field: String
}

extend interface Actor {
  client_actor_field: String
}

extend type Page {
  client_actor_field: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  ... on Actor {
    address {
      city
    }
  }
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-fields-of-client-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id

  client_foo {
    client_name
    profile_picture(scale: 2) {
      uri
    }
  }
}

extend type User {
  client_foo: Foo
}

type Foo {
  client_name: String
  profile_picture(scale: Float): Image
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-fields-on-roots.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query FooQuery($id: ID!, $arg: String) {
  client_root_field

  node(id: $id) {
    id
  }
}

mutation FooMutation {
  client_root_field
}

subscription FooSubscription {
  client_root_field
}

extend type Query {
  client_root_field: String
}

extend type Mutation {
  client_root_field: String
}

extend type Subscription {
  client_root_field: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query FooQuery(
  $id: ID!
  $arg: String
) {
  node(id: $id) {
    id
  }
}

mutation FooMutation

subscription FooSubscription

`;

exports[`SkipClientExtensionsTransform matches expected output: client-fragment-spreads.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  foo {
    ...ClientTypeFragment # include fragment on client-only type
  }
}

extend type User {
  foo: ClientType
}

fragment ClientTypeFragment on ClientType {
  client_field
}

type ClientType {
  client_field: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-inline-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  foo {
    ... on ClientNamed {
      client_name
    }
  }
}

extend type User {
  foo: ClientNamed
}

interface ClientNamed {
  client_name: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-linked-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id

  client_friends {
    edges {
      client_friend_edge_field # nested client field, should not create new ClientExtension node
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

extend type User {
  client_friends: FriendsConnection
}

extend type FriendsEdge {
  client_friend_edge_field: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
}

`;

exports[`SkipClientExtensionsTransform matches expected output: client-scalar-fields.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id

  client_nickname # client field
  friends {
    count
    client_friends_connection_field # nested client field
  }
}

extend type User {
  client_nickname: String
}

extend type FriendsConnection {
  client_friends_connection_field: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  friends {
    count
  }
}

`;

exports[`SkipClientExtensionsTransform matches expected output: original-skip-client-fields-test.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query BestFriendsQuery($id: ID!) {
  node(id: $id) {
    ...BestFriends
  }
}

fragment BestFriends on User {
  # this is the only field that is part of the base schema
  id
  # fields defined in type extensions are skipped
  best_friends {
    edges {
      cursor
      node {
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
  ... on Named {
    # fragments on extension types are skipped
    ...FooFragment
    ... on Foo {
      name
    }
  }
}

fragment FooFragment on Foo {
  name
}

extend type User {
  best_friends: FriendsConnection
}

type Foo implements Named {
  name: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query BestFriendsQuery(
  $id: ID!
) {
  node(id: $id) {
    ...BestFriends
  }
}

fragment BestFriends on User {
  id
}

`;

exports[`SkipClientExtensionsTransform matches expected output: sibling-client-selections.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  name

  # Different types of client selections should be grouped under single
  # ClientExtension node:
  client_nickname
  client_foo {
    client_name
  }
  client_friends {
    edges {
      client_friend_edge_field # nested client field, should not create new ClientExtension node
      node {
        id
      }
    }
  }
  client_foo {
    ... on ClientNamed {
      client_name
    }
  }
  client_foo2 {
    ...ClientTypeFragment # include fragment on client-only type
  }
}

fragment ClientTypeFragment on ClientType {
  client_field
}

extend type User {
  client_friends: FriendsConnection
  client_nickname: String
  client_foo: Foo
  client_foo2: ClientType
}

extend type FriendsEdge {
  client_friend_edge_field: String
}

type ClientType {
  client_field: String
}

type Foo implements ClientNamed {
  client_name: String
}

interface ClientNamed {
  client_name: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
fragment Foo_user on User {
  id
  name
}

`;
