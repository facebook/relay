==================================== INPUT ====================================
//- PersonComponent.js
graphql`query PersonComponentQuery {
  person {
    ... on User {
      name
    }
    ... on Admin {
      name
    }
  }
}`

//- QueryResolvers.js
/**
 * @RelayResolver Query.person: Person
 */

//- UserTypeResolvers.js
/**
 * @RelayResolver User.name: String
 */

//- AdminTypeResolvers.js
/**
 * @RelayResolver Admin.name: String
 */

//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "featureFlags": {
    "enable_resolver_normalization_ast": true,
    "relay_resolver_enable_interface_output_type": { "kind": "enabled" }
  }
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql
type User {
  id: ID!
}
type Admin {
  id: ID!
}

union Person = User | Admin
==================================== OUTPUT ===================================
//- __generated__/PersonComponentQuery.graphql.js
/**
 * <auto-generated> SignedSource<<5482af7faa6804c7e8a9331a2d410982>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, ClientQuery } from 'relay-runtime';
import type { DataID } from "relay-runtime";
import {name as adminNameResolverType} from "AdminTypeResolvers";
// Type assertion validating that `adminNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(adminNameResolverType: () => ?string);
import {person as queryPersonResolverType} from "QueryResolvers";
// Type assertion validating that `queryPersonResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(queryPersonResolverType: () => ?{|
  +__typename: "Admin" | "User",
  +id: DataID,
|});
import {name as userNameResolverType} from "UserTypeResolvers";
// Type assertion validating that `userNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userNameResolverType: () => ?string);
export type PersonComponentQuery$variables = {||};
export type PersonComponentQuery$data = {|
  +person: ?{|
    +name?: ?string,
  |},
|};
export type PersonComponentQuery = {|
  response: PersonComponentQuery$data,
  variables: PersonComponentQuery$variables,
|};
*/

var node/*: ClientRequest*/ = (function(){
var v0 = {
  "alias": null,
  "args": null,
  "kind": "ScalarField",
  "name": "id",
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": {
      "hasClientEdges": true
    },
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "concreteType": null,
        "modelResolvers": null,
        "backingField": {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "person",
          "resolverModule": require('QueryResolvers').person,
          "path": "person"
        },
        "linkedField": {
          "alias": null,
          "args": null,
          "concreteType": null,
          "kind": "LinkedField",
          "name": "person",
          "plural": false,
          "selections": [
            {
              "kind": "InlineFragment",
              "selections": [
                {
                  "alias": null,
                  "args": null,
                  "fragment": null,
                  "kind": "RelayResolver",
                  "name": "name",
                  "resolverModule": require('UserTypeResolvers').name,
                  "path": "person.name"
                }
              ],
              "type": "User",
              "abstractKey": null
            },
            {
              "kind": "InlineFragment",
              "selections": [
                {
                  "alias": null,
                  "args": null,
                  "fragment": null,
                  "kind": "RelayResolver",
                  "name": "name",
                  "resolverModule": require('AdminTypeResolvers').name,
                  "path": "person.name"
                }
              ],
              "type": "Admin",
              "abstractKey": null
            }
          ],
          "storageKey": null
        }
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "backingField": {
          "name": "person",
          "args": null,
          "kind": "RelayResolver",
          "storageKey": null,
          "isOutputType": false,
          "resolverInfo": {
            "resolverFunction": require('QueryResolvers').person,
            "rootFragment": null
          }
        },
        "linkedField": {
          "alias": null,
          "args": null,
          "concreteType": null,
          "kind": "LinkedField",
          "name": "person",
          "plural": false,
          "selections": [
            {
              "alias": null,
              "args": null,
              "kind": "ScalarField",
              "name": "__typename",
              "storageKey": null
            },
            {
              "kind": "InlineFragment",
              "selections": [
                {
                  "name": "name",
                  "args": null,
                  "kind": "RelayResolver",
                  "storageKey": null,
                  "isOutputType": true,
                  "resolverInfo": {
                    "resolverFunction": require('UserTypeResolvers').name,
                    "rootFragment": null
                  }
                },
                (v0/*: any*/)
              ],
              "type": "User",
              "abstractKey": null
            },
            {
              "kind": "InlineFragment",
              "selections": [
                {
                  "name": "name",
                  "args": null,
                  "kind": "RelayResolver",
                  "storageKey": null,
                  "isOutputType": true,
                  "resolverInfo": {
                    "resolverFunction": require('AdminTypeResolvers').name,
                    "rootFragment": null
                  }
                },
                (v0/*: any*/)
              ],
              "type": "Admin",
              "abstractKey": null
            }
          ],
          "storageKey": null
        }
      }
    ]
  },
  "params": {
    "cacheID": "0deed3d106ca29ad927a703c08de07e0",
    "id": null,
    "metadata": {},
    "name": "PersonComponentQuery",
    "operationKind": "query",
    "text": null
  }
};
})();

(node/*: any*/).hash = "6c9de2c954253987b712fc422952bea1";

module.exports = ((node/*: any*/)/*: ClientQuery<
  PersonComponentQuery$variables,
  PersonComponentQuery$data,
>*/);
