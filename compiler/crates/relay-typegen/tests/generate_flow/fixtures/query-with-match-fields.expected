==================================== INPUT ====================================
query Test @raw_response_type {
  node(id: "1") {
    ...NameRendererFragment
  }
}

fragment NameRendererFragment on User {
  id
  nameRenderer @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}
==================================== OUTPUT ===================================
import type { Local3DPayload } from "relay-runtime";
import type { NameRendererFragment$ref } from "NameRendererFragment.graphql";
import type { MarkdownUserNameRenderer_name$normalization } from "MarkdownUserNameRenderer_name$normalization.graphql";
import type { PlainUserNameRenderer_name$normalization } from "PlainUserNameRenderer_name$normalization.graphql";
export type TestVariables = {||};
export type TestResponse = {|
  +node: ?{|
    +$fragmentRefs: NameRendererFragment$ref,
  |},
|};
export type PlainUserNameRenderer_name = {|
  ...PlainUserNameRenderer_name$normalization,
|};
export type MarkdownUserNameRenderer_name = {|
  ...MarkdownUserNameRenderer_name$normalization,
|};
export type TestRawResponse = {|
  +node: ?({|
    +__typename: "User",
    +id: string,
    +nameRenderer: ?({|
      +__typename: "PlainUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...PlainUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "PlainUserNameRenderer",
      ...PlainUserNameRenderer_name,
    |}> | {|
      +__typename: "MarkdownUserNameRenderer",
      +__module_operation_NameRendererFragment: ?any,
      +__module_component_NameRendererFragment: ?any,
      ...MarkdownUserNameRenderer_name,
    |} | Local3DPayload<"NameRendererFragment", {|
      +__typename: "MarkdownUserNameRenderer",
      ...MarkdownUserNameRenderer_name,
    |}> | {|
      +__typename: string,
    |}),
  |} | {|
    +__typename: string,
    +id: string,
  |}),
|};
export type Test = {|
  variables: TestVariables,
  response: TestResponse,
  rawResponse: TestRawResponse,
|};
-------------------------------------------------------------------------------
import type { FragmentReference } from "relay-runtime";
declare export opaque type MarkdownUserNameRenderer_name$ref: FragmentReference;
declare export opaque type MarkdownUserNameRenderer_name$fragmentType: MarkdownUserNameRenderer_name$ref;
export type MarkdownUserNameRenderer_name = {|
  +markdown: ?string,
  +data: ?{|
    +markup: ?string,
  |},
  +$refType: MarkdownUserNameRenderer_name$ref,
|};
export type MarkdownUserNameRenderer_name$data = MarkdownUserNameRenderer_name;
export type MarkdownUserNameRenderer_name$key = {
  +$data?: MarkdownUserNameRenderer_name$data,
  +$fragmentRefs: MarkdownUserNameRenderer_name$ref,
  ...
};
-------------------------------------------------------------------------------
import type { MarkdownUserNameRenderer_name$ref } from "MarkdownUserNameRenderer_name.graphql";
import type { PlainUserNameRenderer_name$ref } from "PlainUserNameRenderer_name.graphql";
import type { FragmentReference } from "relay-runtime";
declare export opaque type NameRendererFragment$ref: FragmentReference;
declare export opaque type NameRendererFragment$fragmentType: NameRendererFragment$ref;
export type NameRendererFragment = {|
  +id: string,
  +nameRenderer: ?{|
    +__fragmentPropName?: ?string,
    +__module_component?: ?string,
    +$fragmentRefs: PlainUserNameRenderer_name$ref & MarkdownUserNameRenderer_name$ref,
  |},
  +$refType: NameRendererFragment$ref,
|};
export type NameRendererFragment$data = NameRendererFragment;
export type NameRendererFragment$key = {
  +$data?: NameRendererFragment$data,
  +$fragmentRefs: NameRendererFragment$ref,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentReference } from "relay-runtime";
declare export opaque type PlainUserNameRenderer_name$ref: FragmentReference;
declare export opaque type PlainUserNameRenderer_name$fragmentType: PlainUserNameRenderer_name$ref;
export type PlainUserNameRenderer_name = {|
  +plaintext: ?string,
  +data: ?{|
    +text: ?string,
  |},
  +$refType: PlainUserNameRenderer_name$ref,
|};
export type PlainUserNameRenderer_name$data = PlainUserNameRenderer_name;
export type PlainUserNameRenderer_name$key = {
  +$data?: PlainUserNameRenderer_name$data,
  +$fragmentRefs: PlainUserNameRenderer_name$ref,
  ...
};
