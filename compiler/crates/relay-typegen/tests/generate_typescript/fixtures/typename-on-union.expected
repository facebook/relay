==================================== INPUT ====================================
fragment TypenameInside on Actor {
  ... on User {
    __typename
    firstName
  }
  ... on Page {
    __typename
    username
  }
}

fragment TypenameOutside on Actor {
  __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameOutsideWithAbstractType on Node {
  __typename
  ... on User {
    firstName
    address {
      street # only here
      city # common
    }
  }
  ... on Actor {
    username
    address {
      city # common
      country # only here
    }
  }
}

fragment TypenameWithoutSpreads on User {
  __typename
  firstName
}

fragment TypenameWithoutSpreadsAbstractType on Node {
  __typename
  id
}

fragment TypenameWithCommonSelections on Actor {
  __typename
  name
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAlias on Actor {
  _typeAlias: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}

fragment TypenameAliases on Actor {
  _typeAlias1: __typename
  _typeAlias2: __typename
  ... on User {
    firstName
  }
  ... on Page {
    username
  }
}


fragment TypenameOnUnionWithFragmentsOnConcreteType on UserNameRenderer {
  __typename
  ...MarkdownUserNameRenderer
  ...PlainUserNameRenderer
}

fragment TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment on UserNameRenderer {
  __typename
  ... on MarkdownUserNameRenderer {
    markdown
  }
  ...PlainUserNameRenderer
}

fragment MarkdownUserNameRenderer on MarkdownUserNameRenderer {
  markdown
}

fragment PlainUserNameRenderer on PlainUserNameRenderer {
  plaintext
}

fragment TypenameOnInterfaceWithFragmentsOnConcreteType on Actor {
  __typename
  ...User
  ...Page
}

fragment TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType on Actor {
  __typename
  address {
    city
  }
  ...User
  ...Page
}

fragment TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment on Actor {
  __typename
  ... on User {
    firstName
  }
  ...Page
}

fragment TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment on Actor {
  __typename
  address {
    city
  }
  ... on User {
    firstName
  }
  ...Page
}

fragment User on User {
  firstName
}

fragment Page on Page {
  username
}
==================================== OUTPUT ===================================
import { FragmentRefs } from "relay-runtime";
export type MarkdownUserNameRenderer$data = {
  readonly markdown: string | null | undefined;
  readonly " $fragmentType": "MarkdownUserNameRenderer";
};
export type MarkdownUserNameRenderer$key = {
  readonly " $data"?: MarkdownUserNameRenderer$data;
  readonly " $fragmentSpreads": FragmentRefs<"MarkdownUserNameRenderer">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type Page$data = {
  readonly username: string | null | undefined;
  readonly " $fragmentType": "Page";
};
export type Page$key = {
  readonly " $data"?: Page$data;
  readonly " $fragmentSpreads": FragmentRefs<"Page">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type PlainUserNameRenderer$data = {
  readonly plaintext: string | null | undefined;
  readonly " $fragmentType": "PlainUserNameRenderer";
};
export type PlainUserNameRenderer$key = {
  readonly " $data"?: PlainUserNameRenderer$data;
  readonly " $fragmentSpreads": FragmentRefs<"PlainUserNameRenderer">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameAlias$data = {
  readonly _typeAlias: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameAlias";
} | {
  readonly _typeAlias: "Page";
  readonly username: string | null | undefined;
  readonly " $fragmentType": "TypenameAlias";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly _typeAlias: "%other";
  readonly " $fragmentType": "TypenameAlias";
};
export type TypenameAlias$key = {
  readonly " $data"?: TypenameAlias$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameAlias">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameAliases$data = {
  readonly _typeAlias1: "User";
  readonly _typeAlias2: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameAliases";
} | {
  readonly _typeAlias1: "Page";
  readonly _typeAlias2: "Page";
  readonly username: string | null | undefined;
  readonly " $fragmentType": "TypenameAliases";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly _typeAlias1: "%other";
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly _typeAlias2: "%other";
  readonly " $fragmentType": "TypenameAliases";
};
export type TypenameAliases$key = {
  readonly " $data"?: TypenameAliases$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameAliases">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameInside$data = {
  readonly __typename: "Page";
  readonly username: string | null | undefined;
  readonly " $fragmentType": "TypenameInside";
} | {
  readonly __typename: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameInside";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameInside";
};
export type TypenameInside$key = {
  readonly " $data"?: TypenameInside$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameInside">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$data = {
  readonly __typename: "Page";
  readonly " $fragmentSpreads": FragmentRefs<"Page">;
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment";
} | {
  readonly __typename: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment";
};
export type TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$key = {
  readonly " $data"?: TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnInterfaceWithFragmentOnConcreteTypeAndInlineFragment">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnInterfaceWithFragmentsOnConcreteType$data = {
  readonly __typename: "Page";
  readonly " $fragmentSpreads": FragmentRefs<"Page">;
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentsOnConcreteType";
} | {
  readonly __typename: "User";
  readonly " $fragmentSpreads": FragmentRefs<"User">;
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentsOnConcreteType";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameOnInterfaceWithFragmentsOnConcreteType";
};
export type TypenameOnInterfaceWithFragmentsOnConcreteType$key = {
  readonly " $data"?: TypenameOnInterfaceWithFragmentsOnConcreteType$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnInterfaceWithFragmentsOnConcreteType">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$data = {
  readonly __typename: string;
  readonly address: {
    readonly city: string | null | undefined;
  } | null | undefined;
  readonly firstName?: string | null | undefined;
  readonly " $fragmentSpreads": FragmentRefs<"Page">;
  readonly " $fragmentType": "TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment";
};
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$key = {
  readonly " $data"?: TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnInterfaceWithSharedSelectionsAndFragmentOnConcreteTypeAndInlineFragment">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$data = {
  readonly __typename: string;
  readonly address: {
    readonly city: string | null | undefined;
  } | null | undefined;
  readonly " $fragmentSpreads": FragmentRefs<"Page" | "User">;
  readonly " $fragmentType": "TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType";
};
export type TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$key = {
  readonly " $data"?: TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnInterfaceWithSharedSelectionsAndFragmentsOnConcreteType">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$data = {
  readonly __typename: "MarkdownUserNameRenderer";
  readonly markdown: string | null | undefined;
  readonly " $fragmentType": "TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment";
} | {
  readonly __typename: "PlainUserNameRenderer";
  readonly " $fragmentSpreads": FragmentRefs<"PlainUserNameRenderer">;
  readonly " $fragmentType": "TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment";
};
export type TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$key = {
  readonly " $data"?: TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnUnionWithFragmentOnConcreteTypeAndInlineFragment">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOnUnionWithFragmentsOnConcreteType$data = {
  readonly __typename: "MarkdownUserNameRenderer";
  readonly " $fragmentSpreads": FragmentRefs<"MarkdownUserNameRenderer">;
  readonly " $fragmentType": "TypenameOnUnionWithFragmentsOnConcreteType";
} | {
  readonly __typename: "PlainUserNameRenderer";
  readonly " $fragmentSpreads": FragmentRefs<"PlainUserNameRenderer">;
  readonly " $fragmentType": "TypenameOnUnionWithFragmentsOnConcreteType";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameOnUnionWithFragmentsOnConcreteType";
};
export type TypenameOnUnionWithFragmentsOnConcreteType$key = {
  readonly " $data"?: TypenameOnUnionWithFragmentsOnConcreteType$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOnUnionWithFragmentsOnConcreteType">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOutside$data = {
  readonly __typename: "Page";
  readonly username: string | null | undefined;
  readonly " $fragmentType": "TypenameOutside";
} | {
  readonly __typename: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameOutside";
} | {
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  readonly __typename: "%other";
  readonly " $fragmentType": "TypenameOutside";
};
export type TypenameOutside$key = {
  readonly " $data"?: TypenameOutside$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOutside">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameOutsideWithAbstractType$data = {
  readonly __typename: string;
  readonly address?: {
    readonly city: string | null | undefined;
    readonly country: string | null | undefined;
    readonly street?: string | null | undefined;
  } | null | undefined;
  readonly firstName?: string | null | undefined;
  readonly username?: string | null | undefined;
  readonly " $fragmentType": "TypenameOutsideWithAbstractType";
};
export type TypenameOutsideWithAbstractType$key = {
  readonly " $data"?: TypenameOutsideWithAbstractType$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameOutsideWithAbstractType">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameWithCommonSelections$data = {
  readonly __typename: string;
  readonly firstName?: string | null | undefined;
  readonly name: string | null | undefined;
  readonly username?: string | null | undefined;
  readonly " $fragmentType": "TypenameWithCommonSelections";
};
export type TypenameWithCommonSelections$key = {
  readonly " $data"?: TypenameWithCommonSelections$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameWithCommonSelections">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameWithoutSpreads$data = {
  readonly __typename: "User";
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "TypenameWithoutSpreads";
};
export type TypenameWithoutSpreads$key = {
  readonly " $data"?: TypenameWithoutSpreads$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameWithoutSpreads">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type TypenameWithoutSpreadsAbstractType$data = {
  readonly __typename: string;
  readonly id: string;
  readonly " $fragmentType": "TypenameWithoutSpreadsAbstractType";
};
export type TypenameWithoutSpreadsAbstractType$key = {
  readonly " $data"?: TypenameWithoutSpreadsAbstractType$data;
  readonly " $fragmentSpreads": FragmentRefs<"TypenameWithoutSpreadsAbstractType">;
};
-------------------------------------------------------------------------------
import { FragmentRefs } from "relay-runtime";
export type User$data = {
  readonly firstName: string | null | undefined;
  readonly " $fragmentType": "User";
};
export type User$key = {
  readonly " $data"?: User$data;
  readonly " $fragmentSpreads": FragmentRefs<"User">;
};
