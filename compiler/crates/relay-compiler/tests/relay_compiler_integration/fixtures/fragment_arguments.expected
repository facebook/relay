==================================== INPUT ====================================
//- foo.js
graphql`
  fragment foo($postCount: Int) on User {
     posts(first: $postCount) {
      title
     }
  }`;

graphql`
  query fooQuery {
   me {
      ...foo(postCount: 5)
   }
  }
`

//- relay.config.json
{
   "language": "typescript",
   "schema": "./schema.graphql",
   "featureFlags": {
      "enable_fragment_argument_transform": true
   }
}

//- schema.graphql
type Query {
   me: User
}

type User {
   posts(first: Int): [Post]
}

type Post {
   title: String
}
==================================== OUTPUT ===================================
//- __generated__/foo.graphql.ts
/**
 * <auto-generated> SignedSource<<0e503f5c200310a5580a2b4853a499ce>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { Fragment, ReaderFragment } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type foo$data = {
  readonly posts: ReadonlyArray<{
    readonly title: string | null | undefined;
  } | null | undefined> | null | undefined;
  readonly " $fragmentType": "foo";
};
export type foo$key = {
  readonly " $data"?: foo$data;
  readonly " $fragmentSpreads": FragmentRefs<"foo">;
};

const node: ReaderFragment = {
  "argumentDefinitions": [
    {
      "defaultValue": null,
      "kind": "LocalArgument",
      "name": "postCount"
    }
  ],
  "kind": "Fragment",
  "metadata": null,
  "name": "foo",
  "selections": [
    {
      "alias": null,
      "args": [
        {
          "kind": "Variable",
          "name": "first",
          "variableName": "postCount"
        }
      ],
      "concreteType": "Post",
      "kind": "LinkedField",
      "name": "posts",
      "plural": true,
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "title",
          "storageKey": null
        }
      ],
      "storageKey": null
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node as any).hash = "55999049d2511b8662e2fb877d8bf661";

export default node;

//- __generated__/fooQuery.graphql.ts
/**
 * <auto-generated> SignedSource<<20043d1d00f946a33727d27907f7f3f2>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { ConcreteRequest, Query } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
export type fooQuery$variables = Record<PropertyKey, never>;
export type fooQuery$data = {
  readonly me: {
    readonly " $fragmentSpreads": FragmentRefs<"foo">;
  } | null | undefined;
};
export type fooQuery = {
  response: fooQuery$data;
  variables: fooQuery$variables;
};

const node: ConcreteRequest = {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": null,
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "args": [
              {
                "kind": "Literal",
                "name": "postCount",
                "value": 5
              }
            ],
            "kind": "FragmentSpread",
            "name": "foo"
          }
        ],
        "storageKey": null
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "fooQuery",
    "selections": [
      {
        "alias": null,
        "args": null,
        "concreteType": "User",
        "kind": "LinkedField",
        "name": "me",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": [
              {
                "kind": "Literal",
                "name": "first",
                "value": 5
              }
            ],
            "concreteType": "Post",
            "kind": "LinkedField",
            "name": "posts",
            "plural": true,
            "selections": [
              {
                "alias": null,
                "args": null,
                "kind": "ScalarField",
                "name": "title",
                "storageKey": null
              }
            ],
            "storageKey": "posts(first:5)"
          }
        ],
        "storageKey": null
      }
    ]
  },
  "params": {
    "cacheID": "4fbb83aa0c91b56ee5c3eed90060ce7a",
    "id": null,
    "metadata": {},
    "name": "fooQuery",
    "operationKind": "query",
    "text": "query fooQuery {\n  me {\n    ...foo_3lq16u\n  }\n}\n\nfragment foo_3lq16u on User {\n  posts(first: 5) {\n    title\n  }\n}\n"
  }
};

(node as any).hash = "3508818a33211bc36644b79de3011e83";

export default node;
