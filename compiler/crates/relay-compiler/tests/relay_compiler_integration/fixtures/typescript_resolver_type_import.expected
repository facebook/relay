==================================== INPUT ====================================
//- foo.ts
/**
 * @RelayResolver User.foo: RelayResolverValue
 */

//- bar.ts
graphql`fragment barFragment on User {
   foo
}`

//- relay.config.json
{
   "language": "typescript",
   "schema": "./schema.graphql"
}

//- schema.graphql
type Query { user: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/barFragment.graphql.ts
/**
 * <auto-generated> SignedSource<<284259362519796254aa84f73acdabc2>>
 * @lightSyntaxTransform
 * @nogrep
 */

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck

import { ReaderFragment } from 'relay-runtime';
import { FragmentRefs } from "relay-runtime";
import { foo as userFooResolverType } from "../foo";
// Type assertion validating that `userFooResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userFooResolverType satisfies () => unknown | null);
export type barFragment$data = {
  readonly foo: ReturnType<typeof userFooResolverType> | null | undefined;
  readonly " $fragmentType": "barFragment";
};
export type barFragment$key = {
  readonly " $data"?: barFragment$data;
  readonly " $fragmentSpreads": FragmentRefs<"barFragment">;
};

import {foo as userFooResolver} from './../foo';

const node: ReaderFragment = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "barFragment",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "foo",
          "resolverModule": userFooResolver,
          "path": "foo"
        }
      ]
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node as any).hash = "f60f2dcc6b71a6c9ec170e68dc2c994d";

export default node;
