==================================== INPUT ====================================
fragment relayResolver_BestFriendResolverFragment_name on User {
  name
}

query relayResolver_Query {
  me {
    best_friends {
      name
    }
  }
}

# %extensions%

type ClientUser {
  name: String
}

extend type User {
  best_friends: [ClientUser!]
    @relay_resolver(
      fragment_name: "relayResolver_BestFriendResolverFragment_name"
      import_path: "./foo/bar/baz/BestFriendResolver.js"
    )
}
==================================== OUTPUT ===================================
import type { DataID } from "relay-runtime";
import type { relayResolver_BestFriendResolverFragment_name$key } from "relayResolver_BestFriendResolverFragment_name.graphql";
import userBestFriendsResolverType from "BestFriendResolver";
// Type assertion validating that `userBestFriendsResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userBestFriendsResolverType: (
  rootKey: relayResolver_BestFriendResolverFragment_name$key,
) => ?$ReadOnlyArray<{|
  +id: DataID,
|}>);
export type relayResolver_Query$variables = {||};
export type relayResolver_Query$data = {|
  +me: ?{|
    +best_friends: ?$ReadOnlyArray<{|
      +name: ?string,
    |}>,
  |},
|};
export type relayResolver_Query = {|
  response: relayResolver_Query$data,
  variables: relayResolver_Query$variables,
|};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type relayResolver_BestFriendResolverFragment_name$fragmentType: FragmentType;
export type relayResolver_BestFriendResolverFragment_name$data = {|
  +name: ?string,
  +$fragmentType: relayResolver_BestFriendResolverFragment_name$fragmentType,
|};
export type relayResolver_BestFriendResolverFragment_name$key = {
  +$data?: relayResolver_BestFriendResolverFragment_name$data,
  +$fragmentSpreads: relayResolver_BestFriendResolverFragment_name$fragmentType,
  ...
};
