"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[53602],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>s});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=t.createContext({}),s=function(e){return function(n){var a=p(n.components);return t.createElement(e,i({},n,{components:a}))}},p=function(e){var n=t.useContext(m),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(m.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),s=p(a),c=r,h=s["".concat(l,".").concat(c)]||s[c]||u[c]||i;return a?t.createElement(h,o(o({ref:n},m),{},{components:a})):t.createElement(h,o({ref:n},m))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},68629:(e,n,a)=>{a.d(n,{Z:()=>u});var t=a(39960),r=a(86341),i=a(67294);function l(){var e=window.encodeURI(JSON.stringify({title:"Feedback about "+window.location.pathname,description:"**!!! Required !!!**\n\nPlease modify the task description to let us know how the docs can be improved.\n\n**Please do not ask support questions via this form! Instead, ask in fburl.com/relay_support**",tag_ids:{add:[0xac96423e5b680,0x64079768ac750]}}));window.open("https://www.internalfb.com/tasks/?n="+e)}function o(e){var n=e.children;return i.createElement("div",{className:"docsRating",id:"docsRating"},i.createElement("hr",null),n)}var d=function(){var e=i.useState(!1),n=e[0],a=e[1],t=function(e){a(!0),function(e){window.ga&&window.ga("send",{hitType:"event",eventCategory:"button",eventAction:"feedback",eventValue:e})}(e)};return n?"Thank you for letting us know!":i.createElement(i.Fragment,null,"Is this page useful?",i.createElement("svg",{className:"i_thumbsup",alt:"Like",id:"docsRating-like",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return t(1)}},i.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})),i.createElement("svg",{className:"i_thumbsdown",alt:"Dislike",id:"docsRating-dislike",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 81.13 89.76",onClick:function(){return t(0)}},i.createElement("path",{d:"M22.9 6a18.57 18.57 0 002.67 8.4 25.72 25.72 0 008.65 7.66c3.86 2 8.67 7.13 13.51 11 3.86 3.11 8.57 7.11 11.54 8.45s13.59.26 14.64 1.17c1.88 1.63 1.55 9-.11 15.25-1.61 5.86-5.96 10.55-6.48 16.86-.4 4.83-2.7 4.88-10.93 4.88h-1.35c-3.82 0-8.24 2.93-12.92 3.62a68 68 0 01-9.73.5c-3.57 0-7.86-.08-13.25-.08-3.56 0-4.71-1.83-4.71-4.48h8.42a3.51 3.51 0 000-7H12.28a2.89 2.89 0 01-2.88-2.88 1.91 1.91 0 01.77-1.78h16.46a3.51 3.51 0 000-7H12.29c-3.21 0-4.84-1.83-4.84-4a6.41 6.41 0 011.17-3.78h19.06a3.5 3.5 0 100-7H9.75A3.51 3.51 0 016 42.27a3.45 3.45 0 013.75-3.48h13.11c5.61 0 7.71-3 5.71-5.52-4.43-4.74-10.84-12.62-11-18.71-.15-6.51 2.6-7.83 5.36-8.56m0-6a6.18 6.18 0 00-1.53.2c-6.69 1.77-10 6.65-9.82 14.5.08 5.09 2.99 11.18 8.52 18.09H9.74a9.52 9.52 0 00-6.23 16.9 12.52 12.52 0 00-2.07 6.84 9.64 9.64 0 003.65 7.7 7.85 7.85 0 00-1.7 5.13 8.9 8.9 0 005.3 8.13 6 6 0 00-.26 1.76c0 6.37 4.2 10.48 10.71 10.48h13.25a73.75 73.75 0 0010.6-.56 35.89 35.89 0 007.58-2.18 17.83 17.83 0 014.48-1.34h1.35c4.69 0 7.79 0 10.5-1 3.85-1.44 6-4.59 6.41-9.38.2-2.46 1.42-4.85 2.84-7.62a41.3 41.3 0 003.42-8.13 48 48 0 001.59-10.79c.1-5.13-1-8.48-3.35-10.55-2.16-1.87-4.64-1.87-9.6-1.88a46.86 46.86 0 01-6.64-.29c-1.92-.94-5.72-4-8.51-6.3l-1.58-1.28c-1.6-1.3-3.27-2.79-4.87-4.23-3.33-3-6.47-5.79-9.61-7.45a20.2 20.2 0 01-6.43-5.53 12.44 12.44 0 01-1.72-5.36 6 6 0 00-6-5.86z"})))},m=function(){return i.createElement("p",null,"Let us know how these docs can be improved by",i.createElement("a",{className:"button",role:"button",tabIndex:0,onClick:l},"Filing a task"))},s=function(){return i.createElement("p",null,"Help us make the site even better by"," ",i.createElement(t.default,{to:"https://www.surveymonkey.com/r/FYC9TCJ"},"answering a few quick questions"),".")},p=function(){return i.createElement(o,null,i.createElement(m,null),i.createElement(d,null),i.createElement(s,null))},c=function(){return i.createElement(o,null,i.createElement(d,null),i.createElement(s,null))};const u=function(){return(0,r.fbContent)({internal:i.createElement(p,null),external:i.createElement(c,null)})}},17389:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>m,metadata:()=>p,toc:()=>u});var t=a(83117),r=a(80102),i=(a(67294),a(3905)),l=a(68629),o=a(86341),d=["components"],m={id:"graphql-directives",title:"GraphQL Directives",slug:"/api-reference/graphql-and-directives/",description:"API Reference for GraphQL directives",keywords:["GraphQL","Directive","arguments","argumentDefinitions","connection","relay","inline","provider"]},s=void 0,p={unversionedId:"api-reference/graphql/graphql-directives",id:"version-v19.0.0/api-reference/graphql/graphql-directives",title:"GraphQL Directives",description:"API Reference for GraphQL directives",source:"@site/versioned_docs/version-v19.0.0/api-reference/graphql/graphql-directives.md",sourceDirName:"api-reference/graphql",slug:"/api-reference/graphql-and-directives/",permalink:"/docs/v19.0.0/api-reference/graphql-and-directives/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v19.0.0/api-reference/graphql/graphql-directives.md",tags:[],version:"v19.0.0",frontMatter:{id:"graphql-directives",title:"GraphQL Directives",slug:"/api-reference/graphql-and-directives/",description:"API Reference for GraphQL directives",keywords:["GraphQL","Directive","arguments","argumentDefinitions","connection","relay","inline","provider"]},sidebar:"docs",previous:{title:"Runtime Functions",permalink:"/docs/v19.0.0/api-reference/relay-resolvers/runtime-functions/"},next:{title:"Testing Relay Components",permalink:"/docs/v19.0.0/guides/testing-relay-components/"}},c={},u=[{value:"<code>@arguments</code>",id:"arguments",level:2},{value:"<code>@argumentDefinitions</code>",id:"argumentdefinitions",level:2},{value:"Provided Variables",id:"provided-variables",level:3},{value:"<code>@catch</code>",id:"catch",level:2},{value:"<code>@connection(key: String!, filters: [String])</code>",id:"connectionkey-string-filters-string",level:2},{value:"<code>@refetchable(queryName: String!, directives: [String], preferFetchable: Boolean)</code>",id:"refetchablequeryname-string-directives-string-preferfetchable-boolean",level:2},{value:"<code>@relay(plural: Boolean)</code>",id:"relayplural-boolean",level:2},{value:"<code>@required</code>",id:"required",level:2},{value:"<code>@throwOnFieldError</code>",id:"throwonfielderror",level:2},{value:"<code>@semanticNonNull</code>",id:"semanticnonnull",level:2},{value:"<code>@alias</code>",id:"alias",level:2},{value:"<code>@inline</code>",id:"inline",level:2},{value:"<code>@relay(mask: Boolean)</code>",id:"relaymask-boolean",level:2},{value:"<code>@waterfall</code>",id:"waterfall",level:2}],h={toc:u};function f(e){var n=e.components,a=(0,r.Z)(e,d);return(0,i.mdx)("wrapper",(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Relay uses directives to add additional information to GraphQL documents, which\nare used by the ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/compiler/"},"Relay compiler")," to generate the\nappropriate runtime artifacts. These directives only appear in your application\ncode and are removed from requests sent to your GraphQL server."),(0,i.mdx)(o.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Note:")," The Relay compiler will maintain any directives supported by your server (such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"@include")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"@skip"),") so they remain part of the request to the GraphQL server and won't alter generated runtime artifacts.")),(0,i.mdx)(o.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Note:")," The Relay compiler will maintain any directives supported by your server (such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"@include")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"@skip"),") so they remain part of the request to the GraphQL server and won't alter generated runtime artifacts. Additional directives are documented ",(0,i.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/wiki/GraphQL/APIs_and_References/Directives/#graphql-standard"},"here"),".")),(0,i.mdx)("h2",{id:"arguments"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@arguments")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@arguments")," is a directive used to pass arguments to a fragment that was\ndefined using ",(0,i.mdx)("a",{parentName:"p",href:"#argumentdefinitions"},(0,i.mdx)("inlineCode",{parentName:"a"},"@argumentDefinitions")),". For example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},"query TodoListQuery($userID: ID) {\n  ...TodoList_list @arguments(count: $count, userID: $userID) # Pass arguments here\n}\n")),(0,i.mdx)("h2",{id:"argumentdefinitions"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@argumentDefinitions")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@argumentDefinitions")," is a directive used to specify arguments taken by a\nfragment. For example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},'fragment TodoList_list on TodoList\n@argumentDefinitions(\n  count: {type: "Int", defaultValue: 10} # Optional argument\n  userID: {type: "ID"} # Required argument\n) {\n  title\n  todoItems(userID: $userID, first: $count) {\n    # Use fragment arguments here as variables\n    ...TodoItem_item\n  }\n}\n')),(0,i.mdx)("h3",{id:"provided-variables"},"Provided Variables"),(0,i.mdx)("p",null,"A provided variable is a special fragment variable whose value is supplied by a\nspecified provider function at runtime. This simplifies supplying device\nattributes, user experiment flags, and other runtime constants to graphql\nfragments."),(0,i.mdx)("p",null,"To add a provided variable:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"add an argument with ",(0,i.mdx)("inlineCode",{parentName:"li"},'provider: "[JSModule].relayprovider"')," to\n",(0,i.mdx)("inlineCode",{parentName:"li"},"@argumentDefinitions")),(0,i.mdx)("li",{parentName:"ul"},"ensure that ",(0,i.mdx)("inlineCode",{parentName:"li"},"[JSModule].relayprovider.js")," exists and exports a ",(0,i.mdx)("inlineCode",{parentName:"li"},"get()"),"\nfunction",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"get")," should return the same value on every call for a given run.")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},'fragment TodoItem_item on TodoList\n@argumentDefinitions(\n  include_timestamp: {\n    type: "Boolean!"\n    provider: "Todo_ShouldIncludeTimestamp.relayprovider"\n  }\n) {\n  timestamp @include(if: $include_timestamp)\n  text\n}\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Todo_ShouldIncludeTimestamp.relayprovider.js\nexport default {\n  get(): boolean {\n    // must always return true or false for a given run\n    return check('todo_should_include_timestamp');\n  },\n};\n")),(0,i.mdx)("p",null,"Notes:"),(0,i.mdx)(o.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Even though fragments declare provided variables in ",(0,i.mdx)("inlineCode",{parentName:"li"},"argumentDefinitions"),",\ntheir parent cannot pass provided variables through ",(0,i.mdx)("inlineCode",{parentName:"li"},"@arguments"),"."),(0,i.mdx)("li",{parentName:"ul"},"An argument definition cannot specify both a provider and a defaultValue."),(0,i.mdx)("li",{parentName:"ul"},"If the modified fragment is included in operations that use hack preloaders\n(",(0,i.mdx)("inlineCode",{parentName:"li"},"@preloadable(hackPreloader: true)"),"), you will need to manually add provided\nvariables when calling ",(0,i.mdx)("inlineCode",{parentName:"li"},"RelayPreloader::gen"),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Hack's typechecker will fail with\n",(0,i.mdx)("inlineCode",{parentName:"li"},"The field __relay_internal__pv__[JsModule] is missing.")),(0,i.mdx)("li",{parentName:"ul"},"We strongly encourage switching to\n",(0,i.mdx)("a",{parentName:"li",href:"../../guides/entrypoints/using-entrypoints/"},"Entrypoints")," if possible."))),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"Unstable / subject to change"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Relay transforms provided variables to operation root variables and renames\nthem to ",(0,i.mdx)("inlineCode",{parentName:"li"},"__relay_internal__pv__[JsModule]"),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Only relevant if you are debugging a query that uses provided variables."))))))),(0,i.mdx)(o.OssOnly,{mdxType:"OssOnly"},(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Even though fragments declare provided variables in ",(0,i.mdx)("inlineCode",{parentName:"li"},"argumentDefinitions"),",\ntheir parent cannot pass provided variables through ",(0,i.mdx)("inlineCode",{parentName:"li"},"@arguments"),"."),(0,i.mdx)("li",{parentName:"ul"},"An argument definition cannot specify both a provider and a defaultValue."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"Unstable / subject to change"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Relay transforms provided variables to operation root variables and renames\nthem to ",(0,i.mdx)("inlineCode",{parentName:"li"},"__relay_internal__pv__[JsModule]"),".",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Only relevant if you are debugging a query that uses provided variables."))))))),(0,i.mdx)("h2",{id:"catch"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@catch")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@catch")," is a directive you can add to fields, fragments, queries, mutations,\nand aliased inline fragments in your Relay queries to declare how field-level\nerrors are handled in runtime."),(0,i.mdx)("p",null,"See also ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/catch-directive/"},"the @catch guide"),"."),(0,i.mdx)("h2",{id:"connectionkey-string-filters-string"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@connection(key: String!, filters: [String])")),(0,i.mdx)("p",null,"With ",(0,i.mdx)("inlineCode",{parentName:"p"},"usePaginationFragment"),", Relay expects connection fields to be annotated\nwith a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@connection")," directive. For more detailed information and an example,\ncheck out the\n",(0,i.mdx)("a",{parentName:"p",href:"../../guided-tour/list-data/rendering-connections"},"docs on ",(0,i.mdx)("inlineCode",{parentName:"a"},"usePaginationFragment")),"."),(0,i.mdx)("h2",{id:"refetchablequeryname-string-directives-string-preferfetchable-boolean"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@refetchable(queryName: String!, directives: [String], preferFetchable: Boolean)")),(0,i.mdx)("p",null,"With ",(0,i.mdx)("inlineCode",{parentName:"p"},"useRefetchableFragment")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"usePaginationFragment"),", Relay expects a\n",(0,i.mdx)("inlineCode",{parentName:"p"},"@refetchable")," directive. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"@refetchable"),' directive can only be added to\nfragments that are "refetchable", that is, on fragments that are declared on\n',(0,i.mdx)("inlineCode",{parentName:"p"},"Viewer")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"Query")," types, or on a type that implements ",(0,i.mdx)("inlineCode",{parentName:"p"},"Node")," (i.e. a type that\nhas an id). The ",(0,i.mdx)("inlineCode",{parentName:"p"},"@refetchable")," directive will autogenerate a query with the\nspecified ",(0,i.mdx)("inlineCode",{parentName:"p"},"queryName"),". This will also generate Flow types for the query,\navailable to import from the generated file: ",(0,i.mdx)("inlineCode",{parentName:"p"},"<queryName>.graphql.js"),". For more\ndetailed information and examples, check out the docs on\n",(0,i.mdx)("a",{parentName:"p",href:"../use-refetchable-fragment/"},(0,i.mdx)("inlineCode",{parentName:"a"},"useRefetchableFragment"))," or\n",(0,i.mdx)("a",{parentName:"p",href:"../use-pagination-fragment/"},(0,i.mdx)("inlineCode",{parentName:"a"},"usePaginationFragment")),"."),(0,i.mdx)("p",null,"Optionally, you can pass in a list of directives to add to the autogenerated\nquery. For example, this can be used to add the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay_test_operation"),"\ndirective for ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/testing-relay-components"},"testing"),":"),(0,i.mdx)("p",null,"[Optional]"," ",(0,i.mdx)("inlineCode",{parentName:"p"},"preferFetchable: Boolean")),(0,i.mdx)("p",null,"This argument tells the Relay compiler to prefer generating\n",(0,i.mdx)("inlineCode",{parentName:"p"},"fetch_MyType(): MyType")," queries for types that implement the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Node")," interface.\nThis is useful for schemas that have adopted the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@strong")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"@fetchable"),"\nserver annotations for types. You can directly fetch concrete objects without\nneeding to refine ",(0,i.mdx)("inlineCode",{parentName:"p"},"Node")," interface to a specific type."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'graphql`\n  fragment FriendsListComponent_user on User\n  @refetchable(\n    queryName: "FriendsListFetchQuery"\n    directives: ["@relay_test_operation"]\n  ) {\n    ...\n  }\n`;\n')),(0,i.mdx)("h2",{id:"relayplural-boolean"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@relay(plural: Boolean)")),(0,i.mdx)("p",null,"When defining a fragment for use with ",(0,i.mdx)("inlineCode",{parentName:"p"},"useFragment"),", you can use the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(plural: true)")," directive to indicate that the hook expects the prop for\nthat fragment to be a list of items instead of a single item. A query or parent\nthat spreads a ",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(plural: true)")," fragment should do so within a plural\nfield (ie a field backed by a\n",(0,i.mdx)("a",{parentName:"p",href:"http://graphql.org/learn/schema/#lists-and-non-null"},"GraphQL list"),". For\nexample:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"// Plural fragment definition\ngraphql`\n  fragment TodoItems_items on TodoItem @relay(plural: true) {\n    id\n    text\n  }\n`;\n\n// Plural fragment usage: note the parent type is a list of items (`TodoItem[]`)\nfragment TodoApp_app on App {\n  items {\n    // parent type is a list here\n    ...TodoItem_items\n  }\n}\n")),(0,i.mdx)("h2",{id:"required"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@required")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," is a directive you can add to fields in your Relay queries to\ndeclare how null values should be handled at runtime."),(0,i.mdx)("p",null,"See also ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/required-directive/"},"the @required guide"),"."),(0,i.mdx)("h2",{id:"throwonfielderror"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@throwOnFieldError")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@throwOnFieldError")," is a directive you can add to your Relay queries and fragments to have Relay throw if any field errors are encountered when reading the query or fragment. Adding the directive will allow Relay to generate non-null types for any fields marked as ",(0,i.mdx)("inlineCode",{parentName:"p"},"@semanticNonNull")," in the schema."),(0,i.mdx)("p",null,"See also ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/throw-on-field-error-directive/"},"the @throwOnFieldError guide"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Read more about Relay's experimental support for\n",(0,i.mdx)("a",{parentName:"strong",href:"/docs/v19.0.0/guides/semantic-nullability/"},"Semantic Nullability"),".")),(0,i.mdx)("h2",{id:"semanticnonnull"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@semanticNonNull")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"@semanticNonNull")," directive can be added to fields in your schema to\nindicate that the field is non-nullable in the semantic sense, but that the\nclient should still be prepared to handle errors."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Read more about Relay's experimental support for\n",(0,i.mdx)("a",{parentName:"strong",href:"/docs/v19.0.0/guides/semantic-nullability/"},"Semantic Nullability"),".")),(0,i.mdx)("h2",{id:"alias"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@alias")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@alias")," is a directive that allows you to give a fragment spread or inline\nfragment an alias, similar to a field alias. This is useful when you want to\nconditionally include a fragment and check if it was fetched, or otherwise group\ndata together."),(0,i.mdx)("p",null,"For fragment spreads, the alias will default to the fragment name. For inline\nfragments, the alias will default to the type name. If you wish to supply your\nown name, or you have an inline fragment without any type condition, you can\nspecify the alias using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"as")," argument."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},'fragment MyFragment on User {\n  ... on User @alias(as: "myGreatAlias") {\n    name\n  }\n}\n')),(0,i.mdx)("p",null,"See also ",(0,i.mdx)("a",{parentName:"p",href:"../../guides/alias-directive/"},"the @alias guide"),"."),(0,i.mdx)("h2",{id:"inline"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@inline")),(0,i.mdx)("p",null,"The hooks APIs that Relay exposes allow you to read data from the store only\nduring the render phase. In order to read data from outside of the render phase\n(or from outside of React), Relay exposes the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@inline")," directive. The data from\na fragment annotated with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@inline")," can be read using ",(0,i.mdx)("inlineCode",{parentName:"p"},"readInlineData"),"."),(0,i.mdx)("p",null,"In the example below, the function ",(0,i.mdx)("inlineCode",{parentName:"p"},"processItemData")," is called from a React\ncomponent. It requires an item object with a specific set of fields. All React\ncomponents that use this function should spread the ",(0,i.mdx)("inlineCode",{parentName:"p"},"processItemData_item"),"\nfragment to ensure all of the correct item data is loaded for this function."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"import {graphql, readInlineData} from 'react-relay';\n\n// non-React function called from React\nfunction processItemData(itemRef) {\n  const item = readInlineData(\n    graphql`\n      fragment processItemData_item on Item @inline {\n        title\n        price\n        creator {\n          name\n        }\n      }\n    `,\n    itemRef,\n  );\n  sendToThirdPartyApi({\n    title: item.title,\n    price: item.price,\n    creatorName: item.creator.name,\n  });\n}\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"export default function MyComponent({item}) {\n  function handleClick() {\n    processItemData(item);\n  }\n\n  const data = useFragment(\n    graphql`\n      fragment MyComponent_item on Item {\n        ...processItemData_item\n        title\n      }\n    `,\n    item,\n  );\n\n  return <button onClick={handleClick}>Process {item.title}</button>;\n}\n")),(0,i.mdx)("h2",{id:"relaymask-boolean"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@relay(mask: Boolean)")),(0,i.mdx)("p",null,"It is not recommended to use ",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(mask: false)"),". Please instead consider\nusing the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@inline")," fragment."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(mask: false)")," can be used to prevent data masking; when including a\nfragment and annotating it with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(mask: false)"),", its data will be\navailable directly to the parent instead of being masked for a different\ncontainer."),(0,i.mdx)("p",null,"Applied to a fragment definition, ",(0,i.mdx)("inlineCode",{parentName:"p"},"@relay(mask: false)")," changes the generated\nFlow types to be better usable when the fragment is included with the same\ndirective. The Flow types will no longer be exact objects and no longer contain\ninternal marker fields."),(0,i.mdx)("p",null,"This may be helpful to reduce redundant fragments when dealing with nested or\nrecursive data within a single Component."),(0,i.mdx)("p",null,"Keep in mind that it is typically considered an ",(0,i.mdx)("strong",{parentName:"p"},"anti-pattern")," to create a\nsingle fragment shared across many containers. Abusing this directive could\nresult in over-fetching in your application."),(0,i.mdx)("p",null,"In the example below, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"user")," prop will include the data for ",(0,i.mdx)("inlineCode",{parentName:"p"},"id")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"name"),"\nfields wherever ",(0,i.mdx)("inlineCode",{parentName:"p"},"...Component_internUser")," is included, instead of Relay's normal\nbehavior to mask those fields:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},"graphql`\n  fragment Component_internUser on InternUser @relay(mask: false) {\n    id\n    name\n  }\n`;\n")),(0,i.mdx)("h2",{id:"waterfall"},(0,i.mdx)("inlineCode",{parentName:"h2"},"@waterfall")),(0,i.mdx)("p",null,"With ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v19.0.0/guides/relay-resolvers/introduction"},"Relay Resolvers")," it's\npossible to create client-defined edges in the graph which point to server\ntypes. When reading these edge fields, Relay is forced to lazily fetch the\nserver data for the edge. This will force Relay to make a second request to the\nserver to fetch the data for the edge."),(0,i.mdx)("p",null,"To highlight this tradeoff both in the editor and during code review, the Relay\ncompiler expects all reads of these fields to be annotated as ",(0,i.mdx)("inlineCode",{parentName:"p"},"@waterfall"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},"fragment EditPost on DraftPost {\n  author @waterfall {\n    name\n  }\n}\n")),(0,i.mdx)("p",null,"See the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/v19.0.0/guides/relay-resolvers/return-types/#server-types"},"Return Type"),"\nportion of the Relay Resolvers guide for more information."),(0,i.mdx)(l.Z,{mdxType:"DocsRating"}))}f.isMDXComponent=!0}}]);