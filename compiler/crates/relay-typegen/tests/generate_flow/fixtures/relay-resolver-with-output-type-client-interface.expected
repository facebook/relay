==================================== INPUT ====================================
# typegen_config.use_import_type_syntax = true

fragment Foo_user on User {
  poppy: pop_star_name {
    name
  }
}

fragment PopStarNameResolverFragment_name on User {
  name
  address {
    street
  }
  parents {
    lastName
  }
}

# %extensions%

interface ClientInterface {
  name: String
}

type ClientType implements ClientInterface {
  name: String
  __relay_model_instance: RelayResolverValue @relay_resolver(import_path: "ClientTypeResolver" fragment_name: "ClientType__id", generated_fragment: true, inject_fragment_data: "id", import_name: "ClientType")
}

type ClientTypeWithNestedInterface {
  client_interface: ClientInterface!
}

extend type User {
  pop_star_name: ClientInterface
    @relay_resolver(
      fragment_name: "PopStarNameResolverFragment_name"
      import_path: "PopStarNameResolver"
      has_output_type: true
    )
  pop_star_game: ClientTypeWithNestedInterface
    @relay_resolver(
      fragment_name: "PopStarNameResolverFragment_name"
      import_path: "PopStarNameResolver"
      has_output_type: true
    )
}
==================================== OUTPUT ===================================
export type User__pop_star_game$normalization$variables = {||};
export type User__pop_star_game$normalization$data = {|
  +client_interface: {|
    +__typename: "ClientType",
    +name: ?string,
  |} | {|
    // This will never be '%other', but we need some
    // value in case none of the concrete values match.
    +__typename: "%other",
  |},
|};
export type User__pop_star_game$normalization = {|
  response: User__pop_star_game$normalization$data,
  variables: User__pop_star_game$normalization$variables,
|};
-------------------------------------------------------------------------------
export type User__pop_star_name$normalization$variables = {||};
export type User__pop_star_name$normalization$data = {|
  +__typename: "ClientType",
  +name: ?string,
|} | {|
  // This will never be '%other', but we need some
  // value in case none of the concrete values match.
  +__typename: "%other",
|};
export type User__pop_star_name$normalization = {|
  response: User__pop_star_name$normalization$data,
  variables: User__pop_star_name$normalization$variables,
|};
-------------------------------------------------------------------------------
import type { PopStarNameResolverFragment_name$key } from "PopStarNameResolverFragment_name.graphql";
import type { User__pop_star_name$normalization } from "User__pop_star_name$normalization.graphql";
import type { FragmentType } from "relay-runtime";
import userPopStarNameResolverType from "PopStarNameResolver";
// Type assertion validating that `userPopStarNameResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(userPopStarNameResolverType: (
  rootKey: PopStarNameResolverFragment_name$key,
) => ?User__pop_star_name$normalization);
declare export opaque type Foo_user$fragmentType: FragmentType;
export type Foo_user$data = {|
  +poppy: ?{|
    +name: ?string,
  |},
  +$fragmentType: Foo_user$fragmentType,
|};
export type Foo_user$key = {
  +$data?: Foo_user$data,
  +$fragmentSpreads: Foo_user$fragmentType,
  ...
};
-------------------------------------------------------------------------------
import type { FragmentType } from "relay-runtime";
declare export opaque type PopStarNameResolverFragment_name$fragmentType: FragmentType;
export type PopStarNameResolverFragment_name$data = {|
  +address: ?{|
    +street: ?string,
  |},
  +name: ?string,
  +parents: $ReadOnlyArray<{|
    +lastName: ?string,
  |}>,
  +$fragmentType: PopStarNameResolverFragment_name$fragmentType,
|};
export type PopStarNameResolverFragment_name$key = {
  +$data?: PopStarNameResolverFragment_name$data,
  +$fragmentSpreads: PopStarNameResolverFragment_name$fragmentType,
  ...
};
