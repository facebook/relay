// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`validateRelayRequiredArguments-test matches expected output: argument-on-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery {
  node {
    hometown {
      nameWithArgs(capitalize: true)
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: argument-on-linked-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment SomeComment on Comment {
  commentBody(supported: "Mark") {
    ... on PlainCommentBody {
      text {
        text
      }
    }
  }
}

query ViewerQuery {
  node {
    ...SomeComment
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: auto-filled-argument-on-defer.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...DeferredFragment @defer
}

fragment DeferredFragment on User {
  id
  name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: auto-filled-argument-on-match.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment NameRendererFragment on User {
  id
  nameRendererForContext(context: HEADER) @match {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: default-argument-on-field.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery {
  node {
    hometown {
      a: nameWithDefaultArgs
      b: nameWithDefaultArgs(capitalize: true)
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-directive.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw

query ViewerQuery {
  node {
    body @customDirective {
      text
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Required argument 'level: Int!' is missing on 'customDirective' in 'ViewerQuery'.

Source: GraphQL request (5:10)
4:   node {
5:     body @customDirective {
            ^
6:       text

Source: GraphQL request (3:1)
2: 
3: query ViewerQuery {
   ^
4:   node {

`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-field.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery {
  node {
    hometown {
      nameWithArgs
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Required argument 'capitalize: Boolean!' is missing on 'nameWithArgs' in 'TestQuery'.

Source: GraphQL request (5:7)
4:     hometown {
5:       nameWithArgs
         ^
6:     }

Source: GraphQL request (2:1)
1: # expected-to-throw
2: query TestQuery {
   ^
3:   node {

`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-linked-field.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment SomeComment on Comment {
  commentBody {
    ... on PlainCommentBody {
      text {
        text
      }
    }
  }
}

query ViewerQuery {
  node {
    ...SomeComment
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Required argument 'supported: [String!]!' is missing on 'commentBody' in 'SomeComment'.

Source: GraphQL request (3:3)
2: fragment SomeComment on Comment {
3:   commentBody {
     ^
4:     ... on PlainCommentBody {

Source: GraphQL request (2:1)
1: # expected-to-throw
2: fragment SomeComment on Comment {
   ^
3:   commentBody {

`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-linked-field-in-inline-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query ViewerQuery {
  node {
    ... on Comment {
      commentBody {
        ... on PlainCommentBody {
          text {
            text
          }
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Required argument 'supported: [String!]!' is missing on 'commentBody' in 'ViewerQuery'.

Source: GraphQL request (5:7)
4:     ... on Comment {
5:       commentBody {
         ^
6:         ... on PlainCommentBody {

Source: GraphQL request (2:1)
1: # expected-to-throw
2: query ViewerQuery {
   ^
3:   node {

`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-linked-field-on-abstract-type.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ViewerQuery {
  node {
    commentBody @fixme_fat_interface {
      # don't validate fixme_fat_interface
      ... on PlainCommentBody {
        text {
          text
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-linked-field-on-abstract-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query ViewerQuery {
  node {
    commentBody @fixme_fat_interface {
      ... on PlainCommentBody {
        text {
          text
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`validateRelayRequiredArguments-test matches expected output: missing-argument-on-unknown-linked-field-on-abstract-type.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query ViewerQuery {
  node {
    commentBody {
      ... on PlainCommentBody {
        text {
          text
        }
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Unknown field 'commentBody' on type 'Node'.

GraphQL request:4:5
3 |   node {
4 |     commentBody {
  |     ^
5 |       ... on PlainCommentBody {
`;
