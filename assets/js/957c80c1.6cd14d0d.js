"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[56090],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),u=function(e){return function(n){var t=p(n.components);return a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(i,".").concat(m)]||u[m]||c[m]||l;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=g;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>p});var a=t(83117),r=t(80102),l=(t(67294),t(3905)),i=["components"],o={id:"lint-rules",title:"Relay ESLint Plugin",slug:"/getting-started/lint-rules/",description:"ESLint Plugin Relay",keywords:["eslint","lint"]},s=void 0,d={unversionedId:"getting-started/lint-rules",id:"version-v20.0.0/getting-started/lint-rules",title:"Relay ESLint Plugin",description:"ESLint Plugin Relay",source:"@site/versioned_docs/version-v20.0.0/getting-started/lint-rules.md",sourceDirName:"getting-started",slug:"/getting-started/lint-rules/",permalink:"/docs/v20.0.0/getting-started/lint-rules/",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/getting-started/lint-rules.md",tags:[],version:"v20.0.0",frontMatter:{id:"lint-rules",title:"Relay ESLint Plugin",slug:"/getting-started/lint-rules/",description:"ESLint Plugin Relay",keywords:["eslint","lint"]},sidebar:"docs",previous:{title:"Compiler Configuration",permalink:"/docs/v20.0.0/getting-started/compiler-config/"},next:{title:"Editor Support",permalink:"/docs/v20.0.0/editor-support/"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Rule Descriptions",id:"rule-descriptions",level:2},{value:"<code>relay/unused-fields</code>",id:"relayunused-fields",level:3},{value:"<code>relay/no-future-added-value</code>",id:"relayno-future-added-value",level:3},{value:"<code>relay/graphql-syntax</code>",id:"relaygraphql-syntax",level:3},{value:"<code>relay/graphql-naming</code>",id:"relaygraphql-naming",level:3},{value:"<code>relay/function-required-argument</code>",id:"relayfunction-required-argument",level:3},{value:"<code>relay/hook-required-argument</code>",id:"relayhook-required-argument",level:3},{value:"<code>relay/must-colocate-fragment-spreads</code>",id:"relaymust-colocate-fragment-spreads",level:3},{value:"Suppressing rules within graphql tags",id:"suppressing-rules-within-graphql-tags",level:2},{value:"Contributing",id:"contributing",level:2}],m={toc:p};function c(e){var n=e.components,o=(0,r.Z)(e,i);return(0,l.mdx)("wrapper",(0,a.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("p",null,"One of the unique features enabled by Relay is the ability to statically detect unused GraphQL fields. This can ",(0,l.mdx)("a",{parentName:"p",href:"https://relay.dev/blog/2023/10/24/how-relay-enables-optimal-data-fetching/"},"categorically prevent"),' the "append only query" problem that is a common disfunction in many GraphQL clients.'),(0,l.mdx)("p",null,(0,l.mdx)("img",{alt:"Relay ESLint Plugin",src:t(81399).Z,width:"2244",height:"1592"})),(0,l.mdx)("p",null,"This validation, and other helpful checks, are enabled by Relay's ESLint plugin ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/eslint-plugin-relay"},(0,l.mdx)("inlineCode",{parentName:"a"},"eslint-plugin-relay")),". ",(0,l.mdx)("strong",{parentName:"p"},"The Relay ESLint plugin is a key part of the Relay developer experience"),"."),(0,l.mdx)("h2",{id:"installation"},"Installation"),(0,l.mdx)("p",null,"Assuming you have ",(0,l.mdx)("a",{parentName:"p",href:"https://eslint.org/"},"ESLint")," already installed, you can add the Relay ESLint plugin to your project by running:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-sh"},"npm install --save-dev eslint-plugin-relay\n")),(0,l.mdx)("p",null,"Then update your ESLint configuration to include the plugin:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js",metastring:'tile="eslint.config.js"',tile:'"eslint.config.js"'},"import relay from 'eslint-plugin-relay';\n\nexport default [\n  // ... other ESlint Config\n  {\n    plugins: { relay },\n    rules: relay.configs['ts-recommended'].rules,\n  },\n];\n")),(0,l.mdx)("h2",{id:"rule-descriptions"},"Rule Descriptions"),(0,l.mdx)("p",null,"The following validation rules are included in the Relay ESLint plugin:"),(0,l.mdx)("h3",{id:"relayunused-fields"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/unused-fields")),(0,l.mdx)("p",null,"Ensures that every GraphQL field referenced is used within the module that includes it. This helps enable Relay's ",(0,l.mdx)("a",{parentName:"p",href:"https://relay.dev/blog/2023/10/24/how-relay-enables-optimal-data-fetching/"},"optimal data fetching"),"."),(0,l.mdx)("h3",{id:"relayno-future-added-value"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/no-future-added-value")),(0,l.mdx)("p",null,"Ensures code does not try to explicitly handle the ",(0,l.mdx)("inlineCode",{parentName:"p"},'"%future added value"')," enum variant which Relay inserts as a placeholder to ensure you handle the possibility that new enum variants may be added by the server after your application has been deployed."),(0,l.mdx)("h3",{id:"relaygraphql-syntax"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/graphql-syntax")),(0,l.mdx)("p",null,"Ensures each ",(0,l.mdx)("inlineCode",{parentName:"p"},"graphql")," tagged template literal contains syntactically valid GraphQL. This is also validated by the Relay Compiler, but the ESLint plugin can often provide faster feedback."),(0,l.mdx)("h3",{id:"relaygraphql-naming"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/graphql-naming")),(0,l.mdx)("p",null,"Ensures GraphQL fragments and queries follow Relay's naming conventions. This is also validated by the Relay Compiler, but the ESLint plugin can often provide faster feedback."),(0,l.mdx)("h3",{id:"relayfunction-required-argument"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/function-required-argument")),(0,l.mdx)("p",null,"Ensures that ",(0,l.mdx)("inlineCode",{parentName:"p"},"readInlineData")," is always passed an explicit argument even though that argument is allowed to be ",(0,l.mdx)("inlineCode",{parentName:"p"},"undefined")," at runtime."),(0,l.mdx)("h3",{id:"relayhook-required-argument"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/hook-required-argument")),(0,l.mdx)("p",null,"Ensures that Relay hooks are always passed an explicit argument even though that argument is allowed to be ",(0,l.mdx)("inlineCode",{parentName:"p"},"undefined")," at runtime."),(0,l.mdx)("h3",{id:"relaymust-colocate-fragment-spreads"},(0,l.mdx)("inlineCode",{parentName:"h3"},"relay/must-colocate-fragment-spreads")),(0,l.mdx)("p",null,"Ensures that when a fragment spread is added within a module, that module directly imports the module which defines that fragment. This prevents the anti-pattern when one component fetches a fragment that is not used by a direct child component.\n",(0,l.mdx)("strong",{parentName:"p"},"Note"),": This rule leans heavily on Meta's globally unique module names. It likely won't work well in other environments."),(0,l.mdx)("h2",{id:"suppressing-rules-within-graphql-tags"},"Suppressing rules within graphql tags"),(0,l.mdx)("p",null,"The following rules support suppression within graphql tags:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"relay/unused-fields")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"relay/must-colocate-fragment-spreads"))),(0,l.mdx)("p",null,"Supported rules can be suppressed by adding ",(0,l.mdx)("inlineCode",{parentName:"p"},"# eslint-disable-next-line relay/name-of-rule")," to the preceding line:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-js"},"graphql`\n  fragment foo on Page {\n    # eslint-disable-next-line relay/must-colocate-fragment-spreads\n    ...unused1\n  }\n`;\n")),(0,l.mdx)("p",null,"Note that only the ",(0,l.mdx)("inlineCode",{parentName:"p"},"eslint-disable-next-line")," form of suppression works. ",(0,l.mdx)("inlineCode",{parentName:"p"},"eslint-disable-line")," doesn't currently work until graphql-js provides support for ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/graphql/graphql-js/issues/2241"},"parsing Comment nodes")," in their AST."),(0,l.mdx)("h2",{id:"contributing"},"Contributing"),(0,l.mdx)("p",null,"If you wish to contribute to the Relay ESLint plugin, you can find the code on GitHub at ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/relayjs/eslint-plugin-relay/"},"relay/eslint-plugin-relay"),"."))}c.isMDXComponent=!0},81399:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/no-unused-fields-a269dbf72527dd3e11b2e99ea6b14047.png"}}]);