==================================== INPUT ====================================
//- foo.js
graphql`
  fragment foo on User @throwOnFieldError {
     name
  }`;

//- relay.config.json
{
   "language": "flow",
   "schema": "./schema.graphql"
}

//- schema.graphql
type Query { me: User }
type User { name: String }
==================================== OUTPUT ===================================
//- __generated__/foo.graphql.js
/**
 * <auto-generated> SignedSource<<70a7a244e5796d4e6e9f2fbcd76c50f0>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type foo$fragmentType: FragmentType;
export type foo$data = {|
  +name: string | null,
  +$fragmentType: foo$fragmentType,
|};
export type foo$key = {
  +$data?: foo$data,
  +$fragmentSpreads: foo$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": {
    "throwOnFieldError": true
  },
  "name": "foo",
  "selections": [
    {
      "alias": null,
      "args": null,
      "kind": "ScalarField",
      "name": "name",
      "storageKey": null
    }
  ],
  "type": "User",
  "abstractKey": null
};

(node/*: any*/).hash = "c846248549175d6d05faa3bd13697146";

export default ((node/*: any*/)/*: Fragment<
  foo$fragmentType,
  foo$data,
>*/);
