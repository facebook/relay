==================================== INPUT ====================================
# expected-to-throw

# When conflicting module + types are encountered for a provided variable
#  we assume that the most frequently used module + type is likely to be correct
#  and warn for all others
fragment TestFragmentA on User
  @argumentDefinitions(
    # varProvider module used more frequently
    var1: {type: "[Int]", provider: "var Provider"}
    var2: {type: "[Int]", provider: "../varProvider"}
    var3: {type: "[Int]", provider: "varProvider"}
) {
    picture1: profilePicture(size: $var1) {
        uri
    }
    picture2: profilePicture(size: $var2) {
        uri
    }
    picture3: profilePicture(size: $var3) {
        uri
    }
}

fragment TestFragmentB on User
  @argumentDefinitions(
    var1: {type: "[Int]", provider: "varProvider"}
  ) {
    picture1: profilePicture(size: $var1) {
        uri
    }
}

# If there is no most frequently used definition,
# we tie break with string ordering
fragment TestFragmentC on User
  @argumentDefinitions(
    # Same frequency, but var(Provider1 < var)Provider1
    var1: {type: "[Int]", provider: "var)Provider1"}
    var2: {type: "[Int]", provider: "var(Provider1"}
) {
    picture1: profilePicture(size: $var1) {
        uri
    }
    picture2: profilePicture(size: $var2) {
        uri
    }
}

fragment TestFragmentD on User
  @argumentDefinitions(
    # Same frequency, but [Int] < [Int]!
    var1: {type: "[Int]!", provider: "varProvider2"}
    var2: {type: "[Int]", provider: "varProvider2"}
) {
    picture1: profilePicture(size: $var1) {
        uri
    }
    picture2: profilePicture(size: $var2) {
        uri
    }
}
==================================== ERROR ====================================
[31mâœ–ï¸Ž All provided variables using module 'varProvider2' must declare the same type. Expected '[Int]' but found '[Int]!'[0m

  [4mconflict_warn_infrequent_definitions.graphql[0m[2m:52:5[0m
[1m   51 â”‚ [0m    # Same frequency, but [Int] < [Int]!
[1m   52 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]!", provider: "varProvider2"}
      â”‚ [31m    ^^^^[0m
[1m   53 â”‚ [0m    var2: {type: "[Int]", provider: "varProvider2"}


[31mâœ–ï¸Ž Modules 'var(Provider1' and 'var)Provider1' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflict_warn_infrequent_definitions.graphql[0m[2m:38:5[0m
[1m   37 â”‚ [0m    # Same frequency, but var(Provider1 < var)Provider1
[1m   38 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]", provider: "var)Provider1"}
      â”‚ [31m    ^^^^[0m
[1m   39 â”‚ [0m    var2: {type: "[Int]", provider: "var(Provider1"}


[31mâœ–ï¸Ž Modules 'varProvider' and '../varProvider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflict_warn_infrequent_definitions.graphql[0m[2m:10:5[0m
[1m    9 â”‚ [0m    var1: {type: "[Int]", provider: "var Provider"}
[1m   10 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m2[0m: {type: "[Int]", provider: "../varProvider"}
      â”‚ [31m    ^^^^[0m
[1m   11 â”‚ [0m    var3: {type: "[Int]", provider: "varProvider"}


[31mâœ–ï¸Ž Modules 'varProvider' and 'var Provider' used by provided variables have indistinguishable names. (All non ascii-alphanumeric characters are stripped in Relay transform)[0m

  [4mconflict_warn_infrequent_definitions.graphql[0m[2m:9:5[0m
[1m    8 â”‚ [0m    # varProvider module used more frequently
[1m    9 â”‚ [0m    [31mv[0m[31ma[0m[31mr[0m[31m1[0m: {type: "[Int]", provider: "var Provider"}
      â”‚ [31m    ^^^^[0m
[1m   10 â”‚ [0m    var2: {type: "[Int]", provider: "../varProvider"}
