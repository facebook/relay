==================================== INPUT ====================================
//- PersonComponent.js
graphql`query PersonComponentQuery {
  boss {
    admin {
      id
    }
  }
}`

//- Admin.js
/**
 * @RelayResolver Admin implements Worker
 */
export function

/**
 * @RelayResolver Admin.admin: Admin
 */
export function admin() {
  return "123";
}

/**
 * @RelayResolver Query.boss: Admin
 */
export function boss() {
  return "123";
}


//- relay.config.json
{
  "language": "flow",
  "jsModuleFormat": "haste",
  "schema": "schema.graphql",
  "schemaExtensions": [
    "schema-extensions"
  ],
  "featureFlags": {
    "enable_relay_resolver_transform": true
  }
}

//- schema.graphql
type Query {
  greeting: String
}

//- schema-extensions/extension.graphql

# A resolver type will implement this
interface Worker {
  id: ID! # This field will be created by the making a model resolver
  admin: Admin # Here we reference a type defined by resolvers
}
==================================== OUTPUT ===================================
//- __generated__/Admin____relay_model_instance.graphql.js
/**
 * <auto-generated> SignedSource<<2a569a157aaf5519c1f05d904b6d6d26>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { Admin__id$data } from "Admin__id.graphql";
import type { FragmentType } from "relay-runtime";
import {Admin as adminRelayModelInstanceResolverType} from "Admin";
// Type assertion validating that `adminRelayModelInstanceResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(adminRelayModelInstanceResolverType: (
  id: Admin__id$data['id'],
) => mixed);
declare export opaque type Admin____relay_model_instance$fragmentType: FragmentType;
export type Admin____relay_model_instance$data = {|
  +__relay_model_instance: $NonMaybeType<ReturnType<typeof adminRelayModelInstanceResolverType>>,
  +$fragmentType: Admin____relay_model_instance$fragmentType,
|};
export type Admin____relay_model_instance$key = {
  +$data?: Admin____relay_model_instance$data,
  +$fragmentSpreads: Admin____relay_model_instance$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin____relay_model_instance",
  "selections": [
    {
      "alias": null,
      "args": null,
      "fragment": {
        "args": null,
        "kind": "FragmentSpread",
        "name": "Admin__id"
      },
      "kind": "RelayResolver",
      "name": "__relay_model_instance",
      "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin__id.graphql'), require('Admin').Admin, 'id', true),
      "path": "__relay_model_instance"
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin____relay_model_instance$fragmentType,
  Admin____relay_model_instance$data,
>*/);

//- __generated__/Admin__id.graphql.js
/**
 * <auto-generated> SignedSource<<29acfbf1d6f559b8b77e9cd1f35218c0>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { Fragment, ReaderFragment } from 'relay-runtime';
import type { FragmentType } from "relay-runtime";
declare export opaque type Admin__id$fragmentType: FragmentType;
export type Admin__id$data = {|
  +id: string,
  +$fragmentType: Admin__id$fragmentType,
|};
export type Admin__id$key = {
  +$data?: Admin__id$data,
  +$fragmentSpreads: Admin__id$fragmentType,
  ...
};
*/

var node/*: ReaderFragment*/ = {
  "argumentDefinitions": [],
  "kind": "Fragment",
  "metadata": null,
  "name": "Admin__id",
  "selections": [
    {
      "kind": "ClientExtension",
      "selections": [
        {
          "alias": null,
          "args": null,
          "kind": "ScalarField",
          "name": "id",
          "storageKey": null
        }
      ]
    }
  ],
  "type": "Admin",
  "abstractKey": null
};

module.exports = ((node/*: any*/)/*: Fragment<
  Admin__id$fragmentType,
  Admin__id$data,
>*/);

//- __generated__/PersonComponentQuery.graphql.js
/**
 * <auto-generated> SignedSource<<678979a6fbd285c60deb8d498debb4ca>>
 * @flow
 * @lightSyntaxTransform
 * @nogrep
 */

/* eslint-disable */

'use strict';

/*::
import type { ClientRequest, ClientQuery } from 'relay-runtime';
import type { DataID } from "relay-runtime";
import type { Admin____relay_model_instance$data } from "Admin____relay_model_instance.graphql";
import {admin as adminAdminResolverType} from "Admin";
// Type assertion validating that `adminAdminResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(adminAdminResolverType: (
  __relay_model_instance: Admin____relay_model_instance$data['__relay_model_instance'],
) => ?{|
  +id: DataID,
|});
import {boss as queryBossResolverType} from "Admin";
// Type assertion validating that `queryBossResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(queryBossResolverType: () => ?{|
  +id: DataID,
|});
export type PersonComponentQuery$variables = {||};
export type PersonComponentQuery$data = {|
  +boss: ?{|
    +admin: ?{|
      +id: string,
    |},
  |},
|};
export type PersonComponentQuery = {|
  response: PersonComponentQuery$data,
  variables: PersonComponentQuery$variables,
|};
*/

var node/*: ClientRequest*/ = (function(){
var v0 = {
  "args": null,
  "kind": "FragmentSpread",
  "name": "Admin__id"
},
v1 = {
  "alias": null,
  "args": null,
  "kind": "ScalarField",
  "name": "id",
  "storageKey": null
},
v2 = [
  (v1/*: any*/)
],
v3 = {
  "alias": null,
  "args": null,
  "concreteType": "Admin",
  "kind": "LinkedField",
  "name": "admin",
  "plural": false,
  "selections": (v2/*: any*/),
  "storageKey": null
};
return {
  "fragment": {
    "argumentDefinitions": [],
    "kind": "Fragment",
    "metadata": {
      "hasClientEdges": true
    },
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "concreteType": "Admin",
        "modelResolvers": {
          "Admin": {
            "alias": null,
            "args": null,
            "fragment": (v0/*: any*/),
            "kind": "RelayResolver",
            "name": "boss",
            "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin__id.graphql'), require('Admin').Admin, 'id', true),
            "path": "boss.__relay_model_instance"
          }
        },
        "backingField": {
          "alias": null,
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "name": "boss",
          "resolverModule": require('Admin').boss,
          "path": "boss"
        },
        "linkedField": {
          "alias": null,
          "args": null,
          "concreteType": "Admin",
          "kind": "LinkedField",
          "name": "boss",
          "plural": false,
          "selections": [
            {
              "kind": "ClientEdgeToClientObject",
              "concreteType": "Admin",
              "modelResolvers": {
                "Admin": {
                  "alias": null,
                  "args": null,
                  "fragment": (v0/*: any*/),
                  "kind": "RelayResolver",
                  "name": "admin",
                  "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin__id.graphql'), require('Admin').Admin, 'id', true),
                  "path": "boss.admin.__relay_model_instance"
                }
              },
              "backingField": {
                "alias": null,
                "args": null,
                "fragment": {
                  "args": null,
                  "kind": "FragmentSpread",
                  "name": "Admin____relay_model_instance"
                },
                "kind": "RelayResolver",
                "name": "admin",
                "resolverModule": require('relay-runtime/experimental').resolverDataInjector(require('Admin____relay_model_instance.graphql'), require('Admin').admin, '__relay_model_instance', true),
                "path": "boss.admin"
              },
              "linkedField": (v3/*: any*/)
            }
          ],
          "storageKey": null
        }
      }
    ],
    "type": "Query",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [],
    "kind": "Operation",
    "name": "PersonComponentQuery",
    "selections": [
      {
        "kind": "ClientEdgeToClientObject",
        "backingField": {
          "name": "boss",
          "args": null,
          "fragment": null,
          "kind": "RelayResolver",
          "storageKey": null,
          "isOutputType": false
        },
        "linkedField": {
          "alias": null,
          "args": null,
          "concreteType": "Admin",
          "kind": "LinkedField",
          "name": "boss",
          "plural": false,
          "selections": [
            {
              "kind": "ClientEdgeToClientObject",
              "backingField": {
                "name": "admin",
                "args": null,
                "fragment": {
                  "kind": "InlineFragment",
                  "selections": [
                    {
                      "name": "__relay_model_instance",
                      "args": null,
                      "fragment": {
                        "kind": "InlineFragment",
                        "selections": (v2/*: any*/),
                        "type": "Admin",
                        "abstractKey": null
                      },
                      "kind": "RelayResolver",
                      "storageKey": null,
                      "isOutputType": false
                    }
                  ],
                  "type": "Admin",
                  "abstractKey": null
                },
                "kind": "RelayResolver",
                "storageKey": null,
                "isOutputType": false
              },
              "linkedField": (v3/*: any*/)
            },
            (v1/*: any*/)
          ],
          "storageKey": null
        }
      }
    ]
  },
  "params": {
    "cacheID": "0deed3d106ca29ad927a703c08de07e0",
    "id": null,
    "metadata": {},
    "name": "PersonComponentQuery",
    "operationKind": "query",
    "text": null
  }
};
})();

(node/*: any*/).hash = "25c3cfb12f96f3cf4479f3effad2e911";

module.exports = ((node/*: any*/)/*: ClientQuery<
  PersonComponentQuery$variables,
  PersonComponentQuery$data,
>*/);
