==================================== INPUT ====================================
# relay:experimental_emit_semantic_nullability_types
fragment MyFragment on ClientUser {
  blob {
    data
  }
}

%extensions%

type ClientUser {
  blob: Blob @semanticNonNull @relay_resolver(
      import_path: "./foo/bar.js"
      has_output_type: true
    )
}

type Blob {
  data: String
}
==================================== OUTPUT ===================================
export type ClientUser__blob$normalization$variables = {||};
export type ClientUser__blob$normalization$data = {|
  +data: ?string,
|};
export type ClientUser__blob$normalization = {|
  response: ClientUser__blob$normalization$data,
  variables: ClientUser__blob$normalization$variables,
|};
-------------------------------------------------------------------------------
import type { ClientUser__blob$normalization } from "ClientUser__blob$normalization.graphql";
import type { FragmentType } from "relay-runtime";
import clientUserBlobResolverType from "bar";
// Type assertion validating that `clientUserBlobResolverType` resolver is correctly implemented.
// A type error here indicates that the type signature of the resolver module is incorrect.
(clientUserBlobResolverType: () => ClientUser__blob$normalization);
declare export opaque type MyFragment$fragmentType: FragmentType;
export type MyFragment$data = {|
  +blob: {|
    +data: ?string,
  |},
  +$fragmentType: MyFragment$fragmentType,
|};
export type MyFragment$key = {
  +$data?: MyFragment$data,
  +$fragmentSpreads: MyFragment$fragmentType,
  ...
};
