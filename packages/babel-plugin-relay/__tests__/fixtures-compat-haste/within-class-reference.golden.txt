/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule CompatStory
 */

'use strict';

var _graphql;

const { createFragmentContainer, graphql } = require('RelayClassic');
const React = require('React');
const CompatProfilePic = require('CompatProfilePic');

class CompatProfile extends React.Component {
  render() {
    return <div>
      <CompatProfilePic user={this.props.data} />
      {this.props.data.name}
      {this.props.data.subscribeStatus}
    </div>;
  }

  doSomething() {
    commitMutation(this.props.relay, _graphql || (_graphql = {
      modern: function () {
        return require('ActorSubscribe.graphql');
      },
      classic: function (RelayQL_GENERATED) {
        const CompatProfile = (CompatProfile.__container__ || CompatProfile).getFragment('data');
        return {
          kind: 'OperationDefinition',
          argumentDefinitions: [{
            defaultValue: null,
            kind: 'LocalArgument',
            name: 'input'
          }],
          name: 'ActorSubscribe',
          operation: 'mutation',
          node: function () {
            return {
              calls: [{
                kind: 'Call',
                metadata: {},
                name: 'actorSubscribe',
                value: {
                  kind: 'CallVariable',
                  callVariableName: 'input'
                }
              }],
              children: [{
                children: [].concat.apply([], [{
                  fieldName: 'id',
                  kind: 'Field',
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: 'ID'
                }, {
                  fieldName: '__typename',
                  kind: 'Field',
                  metadata: {
                    isGenerated: true,
                    isRequisite: true
                  },
                  type: 'String'
                }, RelayQL_GENERATED.__frag(CompatProfile)]),
                fieldName: 'subscribee',
                kind: 'Field',
                metadata: {
                  canHaveSubselections: true,
                  inferredRootCallName: 'node',
                  inferredPrimaryKey: 'id',
                  isAbstract: true
                },
                type: 'Actor'
              }, {
                fieldName: 'clientMutationId',
                kind: 'Field',
                metadata: {
                  isGenerated: true,
                  isRequisite: true
                },
                type: 'String'
              }],
              kind: 'Mutation',
              metadata: {
                inputType: 'ActorSubscribeInput'
              },
              name: 'ActorSubscribe',
              responseType: 'ActorSubscribeResponsePayload'
            };
          }()
        };
      }
    }), { input: { subscribeeId: 123 } });
  }
}

module.exports = createFragmentContainer(CompatProfile, {
  data: {
    modern: function () {
      return require('CompatProfile.graphql');
    },
    classic: function (RelayQL_GENERATED) {
      const CompatProfilePic_user = CompatProfilePic.getFragment('user');
      return {
        kind: 'FragmentDefinition',
        argumentDefinitions: [],
        node: function () {
          return {
            children: [].concat.apply([], [{
              fieldName: 'name',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              fieldName: 'subscribeStatus',
              kind: 'Field',
              metadata: {},
              type: 'String'
            }, {
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'ID'
            }, {
              fieldName: '__typename',
              kind: 'Field',
              metadata: {
                isGenerated: true,
                isRequisite: true
              },
              type: 'String'
            }, RelayQL_GENERATED.__frag(CompatProfilePic_user)]),
            id: RelayQL_GENERATED.__id(),
            kind: 'Fragment',
            metadata: {
              isAbstract: true
            },
            name: 'CompatProfile',
            type: 'Actor'
          };
        }()
      };
    }
  }
});
