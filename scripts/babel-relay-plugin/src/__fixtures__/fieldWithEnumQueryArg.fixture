Input:
var Relay = require('react-relay');
var x = Relay.QL`
  query($gender_0: Gender) {
    node(id: 123) {
      ... on User {
        friends(first: 5, gender: $gender_0) {
          edges {
            node {
              id,
            },
          },
        },
      },
    },
  }
`;

Output:
var Relay = require('react-relay');
var x = (function () {
  return {
    calls: [{
      kind: 'Call',
      metadata: {
        type: null
      },
      name: 'id',
      value: {
        kind: 'CallValue',
        callValue: 123
      }
    }],
    children: [{
      alias: null,
      calls: [],
      children: [],
      condition: null,
      directives: [],
      fieldName: 'id',
      kind: 'Field',
      metadata: {
        parentType: 'Node',
        isGenerated: true,
        isRequisite: true
      }
    }, {
      alias: null,
      calls: [],
      children: [],
      condition: null,
      directives: [],
      fieldName: '__typename',
      kind: 'Field',
      metadata: {
        parentType: 'Node',
        isGenerated: true,
        isRequisite: true
      }
    }, {
      children: [{
        alias: null,
        calls: [{
          kind: 'Call',
          metadata: {},
          name: 'first',
          value: {
            kind: 'CallValue',
            callValue: 5
          }
        }, {
          kind: 'Call',
          metadata: {
            type: 'Gender'
          },
          name: 'gender',
          value: {
            kind: 'CallVariable',
            callVariableName: 'gender_0'
          }
        }],
        children: [{
          alias: null,
          calls: [],
          children: [{
            alias: null,
            calls: [],
            children: [{
              alias: null,
              calls: [],
              children: [],
              condition: null,
              directives: [],
              fieldName: 'id',
              kind: 'Field',
              metadata: {
                parentType: 'User',
                isRequisite: true
              }
            }],
            condition: null,
            directives: [],
            fieldName: 'node',
            kind: 'Field',
            metadata: {
              parentType: 'UserConnectionEdge',
              inferredRootCallName: 'node',
              inferredPrimaryKey: 'id',
              isRequisite: true
            }
          }, {
            alias: null,
            calls: [],
            children: [],
            condition: null,
            directives: [],
            fieldName: 'cursor',
            kind: 'Field',
            metadata: {
              parentType: 'UserConnectionEdge',
              isGenerated: true,
              isRequisite: true
            }
          }],
          condition: null,
          directives: [],
          fieldName: 'edges',
          kind: 'Field',
          metadata: {
            parentType: 'UserConnection',
            isPlural: true
          }
        }, {
          alias: null,
          calls: [],
          children: [{
            alias: null,
            calls: [],
            children: [],
            condition: null,
            directives: [],
            fieldName: 'hasNextPage',
            kind: 'Field',
            metadata: {
              parentType: 'PageInfo',
              isGenerated: true,
              isRequisite: true
            }
          }, {
            alias: null,
            calls: [],
            children: [],
            condition: null,
            directives: [],
            fieldName: 'hasPreviousPage',
            kind: 'Field',
            metadata: {
              parentType: 'PageInfo',
              isGenerated: true,
              isRequisite: true
            }
          }],
          condition: null,
          directives: [],
          fieldName: 'pageInfo',
          kind: 'Field',
          metadata: {
            parentType: 'UserConnection',
            isGenerated: true,
            isRequisite: true
          }
        }],
        condition: null,
        directives: [],
        fieldName: 'friends',
        kind: 'Field',
        metadata: {
          parentType: 'User',
          isConnection: true,
          isFindable: true
        }
      }, {
        alias: null,
        calls: [],
        children: [],
        condition: null,
        directives: [],
        fieldName: 'id',
        kind: 'Field',
        metadata: {
          parentType: 'User',
          isGenerated: true,
          isRequisite: true
        }
      }],
      directives: [],
      isPlural: null,
      kind: 'Fragment',
      metadata: {},
      name: 'User',
      type: 'User'
    }],
    directives: [],
    fieldName: 'node',
    isDeferred: false,
    kind: 'Query',
    metadata: {
      identifyingArgName: 'id',
      identifyingArgType: null
    },
    name: 'FieldWithEnumQueryArg'
  };
})();
