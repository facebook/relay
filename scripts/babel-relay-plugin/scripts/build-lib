#!/usr/bin/env node

const babel = require('babel-core');
const crypto = require('crypto');
const fs = require('fs');
const glob = require('glob');
const mkdirp = require('mkdirp');
const path = require('path');
const rimraf = require('rimraf');

const root = path.resolve(__dirname, '..');
const lib = path.join(root, 'lib');
const src = path.join(root, 'src');

// Blow away prior build artifacts.
rimraf.sync(lib);

const sources = [];

// Get the files to transform
const files = glob.sync('**/*.js', {
  cwd: src,
  ignore: '**/__tests__/*'}
);
files.forEach(file => {
  // Make sure file is fully resolved
  const srcFile = path.resolve(src, file);
  const libFile = path.resolve(lib, file);

  // Make sure the full path the destination file exists so we can write to it
  mkdirp.sync(path.dirname(libFile));
  const result = babel.transformFileSync(srcFile);

  sources.push(fs.readFileSync(srcFile, 'utf8'));

  // Prepend generated annotation
  const code = '// @' + 'generated\n' + result.code;
  fs.writeFile(libFile, code, 'utf8');
});

// Hash sources to be used as a cache breaker and to verify we've build the
// latest sources.
const hash = crypto.createHash('sha1');
sources.sort();
sources.forEach((source) => {
  hash.update(source);
});

const hashFile = path.resolve(lib, 'HASH');
fs.writeFile(hashFile, hash.digest('base64'), 'utf8');
