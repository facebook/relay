// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ApplyFragmentArgumentTransform matches expected output: deletes-unreferenced-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  node(id: $id) {
    id
  }
}

fragment UnreferencedFragment on User {
  id
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  node(id: $id) {
    id
  }
}

`;

exports[`ApplyFragmentArgumentTransform matches expected output: inlines-fragment-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
  $pictureSize: [Int] = [128]
  $includeFriends: Boolean = true
) {
  node(id: $id) {
    id
    ...Profile
      @arguments(pictureSize: $pictureSize, includeFriends: $includeFriends)
  }
}

fragment Profile on User
  @argumentDefinitions(
    pictureSize: {type: "[Int]"}
    includeFriends: {type: "Boolean!", defaultValue: false}
  ) {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
  friends(first: 10) @include(if: $includeFriends) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
  $pictureSize: [Int] = [128]
  $includeFriends: Boolean = true
) {
  node(id: $id) {
    id
    ...Profile_4FmGHP
  }
}

fragment Profile_4FmGHP on User {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
  friends(first: 10) @include(if: $includeFriends) {
    edges {
      node {
        ...Profile_4CNNX6
      }
    }
  }
}

fragment Profile_4CNNX6 on User {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
}

`;

exports[`ApplyFragmentArgumentTransform matches expected output: inlines-literal-fragment-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    ...Profile @arguments(pictureSize: [128], includeFriends: true)
  }
}

fragment Profile on User
  @argumentDefinitions(
    pictureSize: {type: "[Int]"}
    includeFriends: {type: "Boolean!", defaultValue: false}
  ) {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
  friends(first: 10) @include(if: $includeFriends) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ...Profile_4cg4Po
  }
}

fragment Profile_4cg4Po on User {
  id
  name
  profilePicture(size: [128]) {
    uri
  }
  friends(first: 10) {
    edges {
      node {
        ...Profile_17y1Ti
      }
    }
  }
}

fragment Profile_17y1Ti on User {
  id
  name
  profilePicture(size: [128]) {
    uri
  }
}

`;

exports[`ApplyFragmentArgumentTransform matches expected output: merges-identical-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!, $pictureSize: [Int] = [128]) {
  node(id: $id) {
    id
    ...Profile @arguments(pictureSize: $pictureSize)
    ...ProfileFriends
  }
}

fragment ProfileFriends on User {
  friends(first: 10) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

fragment Profile on User @argumentDefinitions(pictureSize: {type: "[Int]"}) {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
  $pictureSize: [Int] = [128]
) {
  node(id: $id) {
    id
    ...Profile_4CNNX6
    ...ProfileFriends
  }
}

fragment Profile_4CNNX6 on User {
  profilePicture(size: $pictureSize) {
    uri
  }
}

fragment ProfileFriends on User {
  friends(first: 10) {
    edges {
      node {
        ...Profile_4CNNX6
      }
    }
  }
}

`;

exports[`ApplyFragmentArgumentTransform matches expected output: merges-identical-fragments-literal-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    ...Profile @arguments(pictureSize: [128])
    ...ProfileFriends
  }
}

fragment ProfileFriends on User
  @argumentDefinitions(pictureSize: {type: "[Int]", defaultValue: [128]}) {
  friends(first: 10) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

fragment Profile on User @argumentDefinitions(pictureSize: {type: "[Int]"}) {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ...Profile_17y1Ti
    ...ProfileFriends
  }
}

fragment Profile_17y1Ti on User {
  profilePicture(size: [128]) {
    uri
  }
}

fragment ProfileFriends on User {
  friends(first: 10) {
    edges {
      node {
        ...Profile_17y1Ti
      }
    }
  }
}

`;

exports[`ApplyFragmentArgumentTransform matches expected output: rejects-cyclic-fragments.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery($id: ID!, $pictureSize: [Int] = [128]) {
  node(id: $id) {
    id
    ...Profile
  }
}

fragment Profile on User {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
  friends(first: 10) {
    edges {
      node {
        ...Profile
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Found a circular reference from fragment 'Profile'.

Source: GraphQL request (2:1)
1: # expected-to-throw
2: query TestQuery($id: ID!, $pictureSize: [Int] = [128]) {
   ^
3:   node(id: $id) {

Source: GraphQL request (5:5)
4:     id
5:     ...Profile
       ^
6:   }

Source: GraphQL request (18:9)
17:       node {
18:         ...Profile
            ^
19:       }

`;

exports[`ApplyFragmentArgumentTransform matches expected output: rejects-unknown-query-variables.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery(
  $id: ID!
  $pictureSize: [Int] = [128]
  $includeFriends: Boolean = true
) {
  node(id: $id) {
    id
    ...Profile
      @arguments(pictureSize: $pictureSize, includeFriends: $includeFriends2)
  }
}

fragment Profile on User
  @argumentDefinitions(
    pictureSize: {type: "[Int]"}
    includeFriends: {type: "Boolean!", defaultValue: false}
  ) {
  id
  name
  profilePicture(size: $pictureSize) {
    uri
  }
  friends(first: 10) @include(if: $includeFriends) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Query 'TestQuery' references undefined variables.

GraphQL request (10:61)
 9:     ...Profile
10:       @arguments(pictureSize: $pictureSize, includeFriends: $includeFriends2)
                                                                ^
11:   }

`;

exports[`ApplyFragmentArgumentTransform matches expected output: uses-defaults-for-literal-null-arguments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query TestQuery($id: ID!) {
  node(id: $id) {
    id
    ...Profile @arguments(pictureSize: [128])
    ...ProfileFriends @arguments(pictureSize: null) # should be equivalent to passing the default value
  }
}

fragment ProfileFriends on User
  @argumentDefinitions(pictureSize: {type: "[Int]", defaultValue: [128]}) {
  friends(first: 10) {
    edges {
      node {
        ...Profile @arguments(pictureSize: $pictureSize)
      }
    }
  }
}

fragment Profile on User @argumentDefinitions(pictureSize: {type: "[Int]"}) {
  profilePicture(size: $pictureSize) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
query TestQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ...Profile_17y1Ti
    ...ProfileFriends_48REbJ
  }
}

fragment Profile_17y1Ti on User {
  profilePicture(size: [128]) {
    uri
  }
}

fragment ProfileFriends_48REbJ on User {
  friends(first: 10) {
    edges {
      node {
        ...Profile_17y1Ti
      }
    }
  }
}

`;
