/**
 * Inlined GraphQL printer,
 * forked from https://github.com/graphql/graphql-js/blob/v15.3.0/src/language/printer.js
 *
 * This ensure compatibility with document hash generated by the Relay compiler.
 * graphql-js' printer is incompatible with Relay's one since v15.4
 *
 * TODO: Canonicalize printer spec for Relay projects
 *
 * @see https://github.com/facebook/relay/pull/3628
 * @see https://github.com/facebook/relay/issues/4226
 */

const { visit } = require('graphql');

/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */
function print(ast: any): string {
  return visit(ast, {
    Name: { leave: (node) => node.value },
    Variable: { leave: (node) => '$' + node.name },

    // Document

    Document: { leave: (node) => join(node.definitions, '\n') + '\n' },

    OperationDefinition: {
      leave: (node) => {
        const op = node.operation;
        const name = node.name;
        const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        const directives = join(node.directives, ' ');
        const selectionSet = node.selectionSet;
        // Anonymous queries with no directives or variable definitions can use
        // the query short form.
        return !name && !directives && !varDefs && op === 'query'
          ? selectionSet
          : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
    },

    VariableDefinition: {
      leave: ({ variable, type, defaultValue, directives }) =>
        variable +
        ': ' +
        type +
        wrap(' = ', defaultValue) +
        wrap(' ', join(directives, ' ')),
    },
    SelectionSet: {
      leave: ({ selections }) => block(selections),
    },

    Field: {
      leave: ({ alias, name, arguments: args, directives, selectionSet }) =>
        join(
          [
            wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'),
            join(directives, ' '),
            selectionSet,
          ],
          ' ',
        ),
    },

    Argument: {
      leave: ({ name, value }) => name + ': ' + value,
    },

    // Fragments

    FragmentSpread: {
      leave: ({ name, directives }) =>
        '...' + name + wrap(' ', join(directives, ' ')),
    },

    InlineFragment: {
      leave: ({ typeCondition, directives, selectionSet }) =>
        join(
          ['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet],
          ' ',
        ),
    },

    FragmentDefinition: {
      leave: ({
        name,
        typeCondition,
        variableDefinitions,
        directives,
        selectionSet,
      }) =>
        // Note: fragment variable definitions are experimental and may be changed
        // or removed in the future.
        `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +
        `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +
        selectionSet,
    },

    // Value

    IntValue: { leave: ({ value }) => value },
    FloatValue: { leave: ({ value }) => value },
    StringValue: {
      leave: ({ value, block: isBlockString }, key) =>
        isBlockString
          ? printBlockString(value, key === 'description' ? '' : '  ')
          : JSON.stringify(value),
    },
    BooleanValue: { leave: ({ value }) => (value ? 'true' : 'false') },
    NullValue: { leave: () => 'null' },
    EnumValue: { leave: ({ value }) => value },
    ListValue: { leave: ({ values }) => '[' + join(values, ', ') + ']' },
    ObjectValue: { leave: ({ fields }) => '{' + join(fields, ', ') + '}' },
    ObjectField: { leave: ({ name, value }) => name + ': ' + value },

    // Directive

    Directive: {
      leave: ({ name, arguments: args }) =>
        '@' + name + wrap('(', join(args, ', '), ')'),
    },

    // Type

    NamedType: { leave: ({ name }) => name },
    ListType: { leave: ({ type }) => '[' + type + ']' },
    NonNullType: { leave: ({ type }) => type + '!' },

    // Type System Definitions
    // Removed since that never included in the Relay documents
  });
}

/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */
function join(maybeArray: ?Array<string>, separator = '') {
  return maybeArray?.filter((x) => x).join(separator) ?? '';
}

/**
 * Given array, print each item on its own line, wrapped in an
 * indented "{ }" block.
 */
function block(array) {
  return array && array.length !== 0
    ? '{\n' + indent(join(array, '\n')) + '\n}'
    : '';
}

/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise
 * print an empty string.
 */
function wrap(start, maybeString, end = '') {
  return maybeString ? start + maybeString + end : '';
}

function indent(maybeString) {
  return maybeString && '  ' + maybeString.replace(/\n/g, '\n  ');
}

/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */
function printBlockString(
  value: string,
  indentation?: string = '',
  preferMultipleLines?: boolean = false,
): string {
  const isSingleLine = value.indexOf('\n') === -1;
  const hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
  const hasTrailingQuote = value[value.length - 1] === '"';
  const hasTrailingSlash = value[value.length - 1] === '\\';
  const printAsMultipleLines =
    !isSingleLine ||
    hasTrailingQuote ||
    hasTrailingSlash ||
    preferMultipleLines;

  let result = '';
  // Format a multi-line block quote to account for leading space.
  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
    result += '\n' + indentation;
  }
  result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;
  if (printAsMultipleLines) {
    result += '\n';
  }

  return '"""' + result.replace(/"""/g, '\\"""') + '"""';
}

module.exports = print;
