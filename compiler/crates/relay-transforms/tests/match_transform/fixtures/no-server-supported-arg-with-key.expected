==================================== INPUT ====================================
fragment ActorsRendererFragment on Node {
  id
  # Adding a key here supresses the validation that checks if this field defines
  # a `supported` arg.
  actors @match(key: "ActorsRendererFragment_a") {
    ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
  }
}

fragment PlainUserNameRenderer_name on User {
  __typename
}
==================================== OUTPUT ===================================
fragment ActorsRendererFragment on Node {
  id
  actors @match(key: "ActorsRendererFragment_a") {
    ... on User {
      ... on User @__ModuleMetadata
      # ModuleMetadata {
      #     location: no-server-supported-arg-with-key.graphql:236:243,
      #     key: "ActorsRendererFragment_a",
      #     module_id: "ActorsRendererFragment.actors",
      #     module_name: "PlainUserNameRenderer.react",
      #     source_document_name: FragmentDefinitionName(
      #         FragmentDefinitionName(
      #             "ActorsRendererFragment",
      #         ),
      #     ),
      #     read_time_resolvers: false,
      #     fragment_name: FragmentDefinitionName(
      #         "PlainUserNameRenderer_name",
      #     ),
      #     fragment_source_location: no-server-supported-arg-with-key.graphql:297:323,
      #     no_inline: false,
      # }
       {
        ...PlainUserNameRenderer_name
        __module_operation_ActorsRendererFragment_a: js(module: "PlainUserNameRenderer_name$normalization.graphql", id: "ActorsRendererFragment.actors")
        __module_component_ActorsRendererFragment_a: js(module: "PlainUserNameRenderer.react", id: "ActorsRendererFragment.actors")
      }
    }
  }
}

fragment PlainUserNameRenderer_name on User {
  __typename
}
