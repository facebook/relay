==================================== INPUT ====================================
# expected-to-throw
fragment EnabledFoo on Node {
  ... on User {
    ... on Actor {
      # Theoretically this _could_ be okay becuase User implements Actor,
      # But there is no reason to write something like this, so it should
      # be fine to just not allow it.
      name @required(action: LOG)
    }
  }
}
==================================== ERROR ====================================
âœ–ï¸Ž Unexpected @required within inline fragment on an abstract type. At runtime we cannot know if this field is null, or if it's missing because the inline fragment did not match. Consider using `@alias` to give your inline fragment a name.

  inline-fragment-on-interface-in-concrete.invalid.graphql:8:12
    7 â”‚       # be fine to just not allow it.
[1m    8 â”‚ [0m      name @req[31mu[0m[31mi[0m[31mr[0m[31me[0m[31md[0m(action: LOG)
      â”‚ [31m           ^^^^^^^^^[0m
[1m    9 â”‚ [0m    }
