==================================== INPUT ====================================
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// expected-to-throw

/**
 * @RelayResolver
 *
 * @onInterface MyInterface
 * @fieldName some_interface_field
 * @rootFragment myRootFragment
 *
 */

 graphql`
 fragment myRootFragment on MyInterface {
   id
 }
`

// %extensions%

graphql`
interface ParentInterface {
    some_interface_field: String
}

interface MyInterface implements ParentInterface {
    id: ID!
}
`;
==================================== ERROR ====================================
[31mâœ–ï¸Ž Unexpected Relay Resolver for a field which is defined in parent interface. The field `some_interface_field` is defined by `ParentInterface`. Relay does not yet support interfaces where different subtypes implement the same field using different Relay Resolvers. As a workaround consider defining Relay Resolver field directly on the interface and checking the `__typename` field to have special handling for different concrete types.[0m

  [4m/path/to/test/fixture/relay-resolver-on-interface-implementing-a-field-defined-by-parent-interface.js[0m[2m:5:15[0m
[1m    4 â”‚ [0m * @onInterface MyInterface
[1m    5 â”‚ [0m * @fieldName [31ms[0m[31mo[0m[31mm[0m[31me[0m[31m_[0m[31mi[0m[31mn[0m[31mt[0m[31me[0m[31mr[0m[31mf[0m[31ma[0m[31mc[0m[31me[0m[31m_[0m[31mf[0m[31mi[0m[31me[0m[31ml[0m[31md[0m
      â”‚ [31m              ^^^^^^^^^^^^^^^^^^^^[0m
[1m    6 â”‚ [0m * @rootFragment myRootFragment
