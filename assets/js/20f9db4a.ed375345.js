"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[46546],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>l,withMDXComponents:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),d=function(e){return function(t){var n=l(t.components);return r.createElement(e,i({},t,{components:n}))}},l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),d=l(n),p=o,h=d["".concat(a,".").concat(p)]||d[p]||c[p]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},47344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>c,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var r=n(83117),o=n(80102),i=(n(67294),n(3905)),a=["components"],s={},m="Organizing GraphQL Operations",u={unversionedId:"tutorial/organizing-mutations-queries-and-subscriptions",id:"version-v20.0.0/tutorial/organizing-mutations-queries-and-subscriptions",title:"Organizing GraphQL Operations",description:"In Relay, GraphQL operations (Mutations, Queries, and Subscriptions) have strict naming requirements. The operation name must begin with the module name, and end with the GraphQL operation type. The name also must be globally unique.",source:"@site/versioned_docs/version-v20.0.0/tutorial/organizing-mutations-queries-and-subscriptions.md",sourceDirName:"tutorial",slug:"/tutorial/organizing-mutations-queries-and-subscriptions",permalink:"/docs/v20.0.0/tutorial/organizing-mutations-queries-and-subscriptions",draft:!1,editUrl:"https://github.com/facebook/relay/tree/main/website/versioned_docs/version-v20.0.0/tutorial/organizing-mutations-queries-and-subscriptions.md",tags:[],version:"v20.0.0",frontMatter:{},sidebar:"docs",previous:{title:"Mutations & Updates",permalink:"/docs/v20.0.0/tutorial/mutations-updates"},next:{title:"Introduction",permalink:"/docs/v20.0.0/guided-tour/list-data/introduction"}},d={},l=[{value:"Recommended Organization For Mutations and Subscriptions",id:"recommended-organization-for-mutations-and-subscriptions",level:3},{value:"Recommended Organization for Queries and Fragments",id:"recommended-organization-for-queries-and-fragments",level:3}],p={toc:l};function c(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.mdx)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"organizing-graphql-operations"},"Organizing GraphQL Operations"),(0,i.mdx)("p",null,"In Relay, GraphQL operations (Mutations, Queries, and Subscriptions) have strict naming requirements. The operation name must begin with the module name, and end with the GraphQL operation type. The name also must be globally unique."),(0,i.mdx)("admonition",{type:"note"},(0,i.mdx)("p",{parentName:"admonition"},'The "module/operation type" naming scheme originates from trying to enforce the uniqueness constraint. At Meta, Haste (a dependency management system for static resources) enforces that all module names are unique so using the module name in the operation name encourages globally unique operation names. Coupling the module name and operation name also makes it easier to locate a fragment/query/mutation if you know that name.')),(0,i.mdx)("p",null,"For example:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"A Mutation in the file ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponent.js")," must be named with the scheme ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponent*Mutation"),"."),(0,i.mdx)("li",{parentName:"ol"},"A Query in the file ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponent.react.js")," must be named with the scheme ",(0,i.mdx)("inlineCode",{parentName:"li"},"MyComponent*Query"),".")),(0,i.mdx)("p",null,"A NewsFeed component may have mutations/queries that shouldn't logically start with ",(0,i.mdx)("inlineCode",{parentName:"p"},"NewsFeed"),", but Relay requires this ",(0,i.mdx)("em",{parentName:"p"},"if they are defined in that file"),"."),(0,i.mdx)("h3",{id:"recommended-organization-for-mutations-and-subscriptions"},"Recommended Organization For Mutations and Subscriptions"),(0,i.mdx)("p",null,"Put Mutations in their own hook module so the name is closer to ",(0,i.mdx)("em",{parentName:"p"},"what the mutation does")," rather than ",(0,i.mdx)("em",{parentName:"p"},"which component invokes it"),". If the module name is correctly descriptive, it is fine to declare it in the same file."),(0,i.mdx)("p",null,"If you are adding a Mutation for ",(0,i.mdx)("inlineCode",{parentName:"p"},"Post"),", like adding a comment to a post, you may create a new file titled ",(0,i.mdx)("inlineCode",{parentName:"p"},"useAddPostComment.js"),". Your mutation (in this file) will then be named ",(0,i.mdx)("inlineCode",{parentName:"p"},"useAddPostCommentMutation"),", which is a perfectly descriptive name."),(0,i.mdx)("h3",{id:"recommended-organization-for-queries-and-fragments"},"Recommended Organization for Queries and Fragments"),(0,i.mdx)("p",null,"Root components should have a single query that is tightly coupled to a component, since it describes that component's data dependencies. Queries and fragments should co-locate with their data-use code."))}c.isMDXComponent=!0}}]);